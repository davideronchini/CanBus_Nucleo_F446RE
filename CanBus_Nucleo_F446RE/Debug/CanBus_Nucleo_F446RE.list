
CanBus_Nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08009478  08009478  0000a478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098e0  080098e0  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080098e0  080098e0  0000a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098e8  080098e8  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098e8  080098e8  0000a8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098ec  080098ec  0000a8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080098f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001d8  08009ac8  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08009ac8  0000b4f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012508  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ef  00000000  00000000  0001d710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00020800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b66  00000000  00000000  000216f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025317  00000000  00000000  0002225e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c0f  00000000  00000000  00047575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc8a7  00000000  00000000  0005c184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138a2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dcc  00000000  00000000  00138a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0013d83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009460 	.word	0x08009460

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08009460 	.word	0x08009460

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <CanInit>:
 *  Functions
 *
 *
 */
void CanInit(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	@ 0x30
 8000edc:	af00      	add	r7, sp, #0

	// Use filter bank 0 for this filter configuration
	// Filter banks are memory locations where filter settings are stored.
	// The STM32F466RE has a maximum of 28 filter banks.
	// Each filter bank can hold one or more filters. Bank 0 is the first of these banks.
	sFilterConfig.FilterBank = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]

	// Set the filter to operate in identifier mask mode
	// This mode allows filtering based on specific bits in the CAN ID.
	// The filter ID and mask determine which CAN messages are accepted.
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]

	// Set the filter to 32-bit scale
	// This means the filter will use a single 32-bit filter instead of two 16-bit filters.
	// A 32-bit filter can match a full 29-bit extended CAN ID or two 11-bit standard CAN IDs.
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	623b      	str	r3, [r7, #32]

	// Set the high part of the filter ID to 0x0000
	// This is the upper 16 bits of the 32-bit filter ID.
	// It is used to match the incoming CAN messages.
	sFilterConfig.FilterIdHigh = 0x0000;
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]

	// Set the low part of the filter ID to 0x0000
	// This is the lower 16 bits of the 32-bit filter ID.
	// Together with FilterIdHigh, it forms the full 32-bit ID to match incoming messages.
	sFilterConfig.FilterIdLow = 0x0000;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]

	// Set the high part of the filter mask to 0x0000
	// This is the upper 16 bits of the mask used to determine which bits in the ID are significant.
	// A mask bit set to 0 means the corresponding ID bit is "don't care".
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]

	// Set the low part of the filter mask to 0x0000
	// This is the lower 16 bits of the mask.
	// Together with FilterMaskIdHigh, it forms the full 32-bit mask.
	// A mask of 0x0000 means all bits are "don't care" and will accept all IDs.
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]

	// Assign this filter to CAN receive FIFO 0
	// Incoming messages that pass this filter will be stored in FIFO 0.
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]

	// Enable this filter configuration
	// Activates the filter so that it starts processing incoming messages.
	sFilterConfig.FilterActivation = ENABLE;
 8000efe:	2301      	movs	r3, #1
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
	// These filter banks can be shared between the two CAN controllers: CAN1 (master) and CAN2 (slave).
	// By setting sFilterConfig.SlaveStartFilterBank to 14, the first 14 filter banks (0 to 13) are allocated to CAN1,
	// and the remaining 14 filter banks (14 to 27) are allocated to CAN2.
	// This division allows each CAN controller to have its own set of filters for incoming CAN messages.
	// Adjusting this value allows for flexible distribution of the available filter banks based on the application's requirements.
	sFilterConfig.SlaveStartFilterBank = 14;
 8000f02:	230e      	movs	r3, #14
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480b      	ldr	r0, [pc, #44]	@ (8000f38 <CanInit+0x60>)
 8000f0c:	f002 f8ee 	bl	80030ec <HAL_CAN_ConfigFilter>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <CanInit+0x42>
	{
		// Gestione errore
		Error_Handler();
 8000f16:	f000 ff68 	bl	8001dea <Error_Handler>
	}

	// Initialize the SN65HVD230 can transceiver
	HAL_CAN_Start(&hcan1);
 8000f1a:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <CanInit+0x60>)
 8000f1c:	f002 f9c6 	bl	80032ac <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // This interrupt is triggered when there is at least one new message pending in FIFO 0
 8000f20:	2102      	movs	r1, #2
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <CanInit+0x60>)
 8000f24:	f002 fbf8 	bl	8003718 <HAL_CAN_ActivateNotification>

	// Initialize the MCP2515 Can Transceiver
	int result = CANSPI_Initialize();
 8000f28:	f000 f986 	bl	8001238 <CANSPI_Initialize>
 8000f2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if(result < 0)
	{
		// TODO: Handle the error
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3730      	adds	r7, #48	@ 0x30
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200002dc 	.word	0x200002dc

08000f3c <Transmit_CAN_Message>:

void Transmit_CAN_Message(CAN_HandleTypeDef *hcan, uint32_t StdId, uint32_t DLC, uint8_t *TxData)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
	#ifdef USE_SN65HVD230
		Transmit_CAN_Message_SN65HVD230(hcan, StdId, DLC, TxData);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f000 f83f 	bl	8000fd4 <Transmit_CAN_Message_SN65HVD230>
	#else
		Transmit_CAN_Message_MCP2515(StdId, DLC, TxData);
	#endif
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <Receive_CAN_Message_SN65HVD230>:


/* SN65HVD230 Can Transceiver */

void Receive_CAN_Message_SN65HVD230(CAN_HandleTypeDef *hcan)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8]; // Buffer to store received CAN data

	// Check if there is a CAN message available on CAN2
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	f107 0214 	add.w	r2, r7, #20
 8000f70:	2100      	movs	r1, #0
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f002 faae 	bl	80034d4 <HAL_CAN_GetRxMessage>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d11f      	bne.n	8000fbe <Receive_CAN_Message_SN65HVD230+0x5e>
		// Turn on the built-in LED to indicate successful reception
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Green Led

		// Process CAN messages based on their IDs
		switch (RxHeader.StdId) {
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2b33      	cmp	r3, #51	@ 0x33
 8000f82:	d002      	beq.n	8000f8a <Receive_CAN_Message_SN65HVD230+0x2a>
 8000f84:	2b34      	cmp	r3, #52	@ 0x34
 8000f86:	d00d      	beq.n	8000fa4 <Receive_CAN_Message_SN65HVD230+0x44>
			can_flags.msg0x34 = 1;
			break;

		default:
			// Handle other CAN message IDs if needed
			break;
 8000f88:	e019      	b.n	8000fbe <Receive_CAN_Message_SN65HVD230+0x5e>
			a.x = (uint8_t) RxData[0];
 8000f8a:	7b3a      	ldrb	r2, [r7, #12]
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <Receive_CAN_Message_SN65HVD230+0x68>)
 8000f8e:	701a      	strb	r2, [r3, #0]
			a.y = (uint8_t) RxData[1];
 8000f90:	7b7a      	ldrb	r2, [r7, #13]
 8000f92:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <Receive_CAN_Message_SN65HVD230+0x68>)
 8000f94:	705a      	strb	r2, [r3, #1]
			a.z = (uint8_t) RxData[2];
 8000f96:	7bba      	ldrb	r2, [r7, #14]
 8000f98:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <Receive_CAN_Message_SN65HVD230+0x68>)
 8000f9a:	709a      	strb	r2, [r3, #2]
			can_flags.msg0x33 = 1;
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <Receive_CAN_Message_SN65HVD230+0x6c>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
			break;
 8000fa2:	e00c      	b.n	8000fbe <Receive_CAN_Message_SN65HVD230+0x5e>
			g.x = (uint8_t) RxData[0];
 8000fa4:	7b3a      	ldrb	r2, [r7, #12]
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <Receive_CAN_Message_SN65HVD230+0x70>)
 8000fa8:	701a      	strb	r2, [r3, #0]
			g.y = (uint8_t) RxData[1];
 8000faa:	7b7a      	ldrb	r2, [r7, #13]
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <Receive_CAN_Message_SN65HVD230+0x70>)
 8000fae:	705a      	strb	r2, [r3, #1]
			g.z = (uint8_t) RxData[2];
 8000fb0:	7bba      	ldrb	r2, [r7, #14]
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <Receive_CAN_Message_SN65HVD230+0x70>)
 8000fb4:	709a      	strb	r2, [r3, #2]
			can_flags.msg0x34 = 1;
 8000fb6:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <Receive_CAN_Message_SN65HVD230+0x6c>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	705a      	strb	r2, [r3, #1]
			break;
 8000fbc:	bf00      	nop
		}
	}else{
		// Turn off the built-in LED to indicate an error during reception
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
}
 8000fbe:	bf00      	nop
 8000fc0:	3730      	adds	r7, #48	@ 0x30
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001f4 	.word	0x200001f4
 8000fcc:	200001fc 	.word	0x200001fc
 8000fd0:	200001f8 	.word	0x200001f8

08000fd4 <Transmit_CAN_Message_SN65HVD230>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
}

void Transmit_CAN_Message_SN65HVD230(CAN_HandleTypeDef *hcan, uint32_t StdId, uint32_t DLC, uint8_t *TxData)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	@ 0x30
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
	// Initialize CAN header
	CAN_TxHeaderTypeDef TxHeader;

	// Standard 11-bit ID
	TxHeader.StdId = StdId; // Use TxHeader.ExtId = StdId; for 29-bit extended IDs
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	617b      	str	r3, [r7, #20]

	// Configuring a CAN message with standard ID
	TxHeader.IDE = CAN_ID_STD;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]

	// Request type: Data frame
	TxHeader.RTR = CAN_RTR_DATA;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]

	// Number of bytes sent (maximum 8 bytes)
	uint8_t maxLength = (DLC < 8) ? DLC : 8;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	bf28      	it	cs
 8000ff4:	2308      	movcs	r3, #8
 8000ff6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	TxHeader.DLC = maxLength;
 8000ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24

	// Select Tx Mailbox
	uint32_t TxMailbox = CAN_TX_MAILBOX0;
 8001000:	2301      	movs	r3, #1
 8001002:	613b      	str	r3, [r7, #16]

	// Try to add the message to the CAN bus
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	f107 0114 	add.w	r1, r7, #20
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f002 f990 	bl	8003334 <HAL_CAN_AddTxMessage>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <Transmit_CAN_Message_SN65HVD230+0x4a>
		// Turn on the built-in LED to indicate successful transmission
		// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	} else {
		// Turn off the built-in LED to indicate an error during transmission
		// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		Error_Handler(); // Handle error if message transmission fails
 800101a:	f000 fee6 	bl	8001dea <Error_Handler>
	}
}
 800101e:	bf00      	nop
 8001020:	3730      	adds	r7, #48	@ 0x30
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <Display_Can_Messages>:

void Display_Can_Messages()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b092      	sub	sp, #72	@ 0x48
 800102c:	af02      	add	r7, sp, #8
	if (can_flags.msg0x33){
 800102e:	4b6d      	ldr	r3, [pc, #436]	@ (80011e4 <Display_Can_Messages+0x1bc>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d019      	beq.n	800106c <Display_Can_Messages+0x44>
		// Display received messages
		char msg_33[50];
		uint16_t msg_33_length;

		// Formatting and sending the message for the gyroscope
		msg_33_length = sprintf(msg_33, "Accelerometer: x = %d; y = %d; z = %d\n\n", a.x, a.y, a.z);
 8001038:	4b6b      	ldr	r3, [pc, #428]	@ (80011e8 <Display_Can_Messages+0x1c0>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b6a      	ldr	r3, [pc, #424]	@ (80011e8 <Display_Can_Messages+0x1c0>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	4619      	mov	r1, r3
 8001044:	4b68      	ldr	r3, [pc, #416]	@ (80011e8 <Display_Can_Messages+0x1c0>)
 8001046:	789b      	ldrb	r3, [r3, #2]
 8001048:	4638      	mov	r0, r7
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	460b      	mov	r3, r1
 800104e:	4967      	ldr	r1, [pc, #412]	@ (80011ec <Display_Can_Messages+0x1c4>)
 8001050:	f006 f8da 	bl	8007208 <siprintf>
 8001054:	4603      	mov	r3, r0
 8001056:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_33, msg_33_length, HAL_MAX_DELAY);
 8001058:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800105a:	4639      	mov	r1, r7
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	4863      	ldr	r0, [pc, #396]	@ (80011f0 <Display_Can_Messages+0x1c8>)
 8001062:	f004 fffb 	bl	800605c <HAL_UART_Transmit>

		can_flags.msg0x33 = 0;
 8001066:	4b5f      	ldr	r3, [pc, #380]	@ (80011e4 <Display_Can_Messages+0x1bc>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
	}

	if (can_flags.msg0x34){
 800106c:	4b5d      	ldr	r3, [pc, #372]	@ (80011e4 <Display_Can_Messages+0x1bc>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d019      	beq.n	80010aa <Display_Can_Messages+0x82>
		// Display received messages
		char msg_34[50];
		uint16_t msg_34_length;

		// Formatting and sending the message for the gyroscope
		msg_34_length = sprintf(msg_34, "Gyroscope: x = %d; y = %d; z = %d\n\n", g.x, g.y, g.z);
 8001076:	4b5f      	ldr	r3, [pc, #380]	@ (80011f4 <Display_Can_Messages+0x1cc>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b5d      	ldr	r3, [pc, #372]	@ (80011f4 <Display_Can_Messages+0x1cc>)
 800107e:	785b      	ldrb	r3, [r3, #1]
 8001080:	4619      	mov	r1, r3
 8001082:	4b5c      	ldr	r3, [pc, #368]	@ (80011f4 <Display_Can_Messages+0x1cc>)
 8001084:	789b      	ldrb	r3, [r3, #2]
 8001086:	4638      	mov	r0, r7
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	460b      	mov	r3, r1
 800108c:	495a      	ldr	r1, [pc, #360]	@ (80011f8 <Display_Can_Messages+0x1d0>)
 800108e:	f006 f8bb 	bl	8007208 <siprintf>
 8001092:	4603      	mov	r3, r0
 8001094:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_34, msg_34_length, HAL_MAX_DELAY);
 8001096:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001098:	4639      	mov	r1, r7
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	4854      	ldr	r0, [pc, #336]	@ (80011f0 <Display_Can_Messages+0x1c8>)
 80010a0:	f004 ffdc 	bl	800605c <HAL_UART_Transmit>

		can_flags.msg0x34 = 0;
 80010a4:	4b4f      	ldr	r3, [pc, #316]	@ (80011e4 <Display_Can_Messages+0x1bc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	705a      	strb	r2, [r3, #1]
	}

	if (can_flags.msg0x35){
 80010aa:	4b4e      	ldr	r3, [pc, #312]	@ (80011e4 <Display_Can_Messages+0x1bc>)
 80010ac:	789b      	ldrb	r3, [r3, #2]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d046      	beq.n	8001142 <Display_Can_Messages+0x11a>
		// Display received messages
		char msg_35[50];
		uint16_t msg_35_length;

		// Formatting and sending the message for the sensor 1
		msg_35_length = sprintf(msg_35, "Sensor 1: %d\n", s1);
 80010b4:	4b51      	ldr	r3, [pc, #324]	@ (80011fc <Display_Can_Messages+0x1d4>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	463b      	mov	r3, r7
 80010bc:	4950      	ldr	r1, [pc, #320]	@ (8001200 <Display_Can_Messages+0x1d8>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 f8a2 	bl	8007208 <siprintf>
 80010c4:	4603      	mov	r3, r0
 80010c6:	877b      	strh	r3, [r7, #58]	@ 0x3a
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_35, msg_35_length, HAL_MAX_DELAY);
 80010c8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80010ca:	4639      	mov	r1, r7
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	4847      	ldr	r0, [pc, #284]	@ (80011f0 <Display_Can_Messages+0x1c8>)
 80010d2:	f004 ffc3 	bl	800605c <HAL_UART_Transmit>

		// Formatting and sending the message for the sensor 2
		msg_35_length = sprintf(msg_35, "Sensor 2: %d\n", s2);
 80010d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001204 <Display_Can_Messages+0x1dc>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	463b      	mov	r3, r7
 80010de:	494a      	ldr	r1, [pc, #296]	@ (8001208 <Display_Can_Messages+0x1e0>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f006 f891 	bl	8007208 <siprintf>
 80010e6:	4603      	mov	r3, r0
 80010e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_35, msg_35_length, HAL_MAX_DELAY);
 80010ea:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80010ec:	4639      	mov	r1, r7
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	483f      	ldr	r0, [pc, #252]	@ (80011f0 <Display_Can_Messages+0x1c8>)
 80010f4:	f004 ffb2 	bl	800605c <HAL_UART_Transmit>

		// Formatting and sending the message for the sensor 3
		msg_35_length = sprintf(msg_35, "Sensor 3: %d\n", s3);
 80010f8:	4b44      	ldr	r3, [pc, #272]	@ (800120c <Display_Can_Messages+0x1e4>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	463b      	mov	r3, r7
 8001100:	4943      	ldr	r1, [pc, #268]	@ (8001210 <Display_Can_Messages+0x1e8>)
 8001102:	4618      	mov	r0, r3
 8001104:	f006 f880 	bl	8007208 <siprintf>
 8001108:	4603      	mov	r3, r0
 800110a:	877b      	strh	r3, [r7, #58]	@ 0x3a
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_35, msg_35_length, HAL_MAX_DELAY);
 800110c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800110e:	4639      	mov	r1, r7
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	4836      	ldr	r0, [pc, #216]	@ (80011f0 <Display_Can_Messages+0x1c8>)
 8001116:	f004 ffa1 	bl	800605c <HAL_UART_Transmit>

		// Formatting and sending the message for the sensor 4
		msg_35_length = sprintf(msg_35, "Sensor 4: %d\n", s4);
 800111a:	4b3e      	ldr	r3, [pc, #248]	@ (8001214 <Display_Can_Messages+0x1ec>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	463b      	mov	r3, r7
 8001122:	493d      	ldr	r1, [pc, #244]	@ (8001218 <Display_Can_Messages+0x1f0>)
 8001124:	4618      	mov	r0, r3
 8001126:	f006 f86f 	bl	8007208 <siprintf>
 800112a:	4603      	mov	r3, r0
 800112c:	877b      	strh	r3, [r7, #58]	@ 0x3a
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_35, msg_35_length, HAL_MAX_DELAY);
 800112e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8001130:	4639      	mov	r1, r7
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	482e      	ldr	r0, [pc, #184]	@ (80011f0 <Display_Can_Messages+0x1c8>)
 8001138:	f004 ff90 	bl	800605c <HAL_UART_Transmit>

		can_flags.msg0x35 = 0;
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <Display_Can_Messages+0x1bc>)
 800113e:	2200      	movs	r2, #0
 8001140:	709a      	strb	r2, [r3, #2]
	}

	if (can_flags.msg0x36){
 8001142:	4b28      	ldr	r3, [pc, #160]	@ (80011e4 <Display_Can_Messages+0x1bc>)
 8001144:	78db      	ldrb	r3, [r3, #3]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <Display_Can_Messages+0x14c>
		// Display received messages
		char msg_36[50];
		uint16_t msg_36_length;

		// Formatting and sending the message for the sensor 5
		msg_36_length = sprintf(msg_36, "Sensor 5: %d\n\n", s5);
 800114c:	4b33      	ldr	r3, [pc, #204]	@ (800121c <Display_Can_Messages+0x1f4>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	463b      	mov	r3, r7
 8001154:	4932      	ldr	r1, [pc, #200]	@ (8001220 <Display_Can_Messages+0x1f8>)
 8001156:	4618      	mov	r0, r3
 8001158:	f006 f856 	bl	8007208 <siprintf>
 800115c:	4603      	mov	r3, r0
 800115e:	873b      	strh	r3, [r7, #56]	@ 0x38
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_36, msg_36_length, HAL_MAX_DELAY);
 8001160:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001162:	4639      	mov	r1, r7
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	4821      	ldr	r0, [pc, #132]	@ (80011f0 <Display_Can_Messages+0x1c8>)
 800116a:	f004 ff77 	bl	800605c <HAL_UART_Transmit>

		can_flags.msg0x36 = 0;
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <Display_Can_Messages+0x1bc>)
 8001170:	2200      	movs	r2, #0
 8001172:	70da      	strb	r2, [r3, #3]
	}

	if (can_flags.msg0x05){
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <Display_Can_Messages+0x1bc>)
 8001176:	791b      	ldrb	r3, [r3, #4]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d014      	beq.n	80011a8 <Display_Can_Messages+0x180>
		// Display received messages
		char msg_05[50];
		uint16_t msg_05_length;

		// Formatting and sending the error message
		msg_05_length = sprintf(msg_05, "Error: %c%d\n\n", eChar, sensorNumber);
 800117e:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <Display_Can_Messages+0x1fc>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	4b28      	ldr	r3, [pc, #160]	@ (8001228 <Display_Can_Messages+0x200>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4638      	mov	r0, r7
 800118a:	4928      	ldr	r1, [pc, #160]	@ (800122c <Display_Can_Messages+0x204>)
 800118c:	f006 f83c 	bl	8007208 <siprintf>
 8001190:	4603      	mov	r3, r0
 8001192:	86fb      	strh	r3, [r7, #54]	@ 0x36
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_05, msg_05_length, HAL_MAX_DELAY);
 8001194:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001196:	4639      	mov	r1, r7
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	4814      	ldr	r0, [pc, #80]	@ (80011f0 <Display_Can_Messages+0x1c8>)
 800119e:	f004 ff5d 	bl	800605c <HAL_UART_Transmit>

		can_flags.msg0x05 = 0;
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <Display_Can_Messages+0x1bc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	711a      	strb	r2, [r3, #4]
	}

	if (can_flags.msg0x06){
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <Display_Can_Messages+0x1bc>)
 80011aa:	795b      	ldrb	r3, [r3, #5]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d013      	beq.n	80011da <Display_Can_Messages+0x1b2>
		// Display received messages
		char msg_06[50];
		uint16_t msg_06_length;

		msg_06_length = sprintf(msg_06, "Message: %c\n\n", receivedChar);
 80011b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <Display_Can_Messages+0x208>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	463b      	mov	r3, r7
 80011ba:	491e      	ldr	r1, [pc, #120]	@ (8001234 <Display_Can_Messages+0x20c>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f006 f823 	bl	8007208 <siprintf>
 80011c2:	4603      	mov	r3, r0
 80011c4:	86bb      	strh	r3, [r7, #52]	@ 0x34
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_06, msg_06_length, HAL_MAX_DELAY);
 80011c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80011c8:	4639      	mov	r1, r7
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	4808      	ldr	r0, [pc, #32]	@ (80011f0 <Display_Can_Messages+0x1c8>)
 80011d0:	f004 ff44 	bl	800605c <HAL_UART_Transmit>

		can_flags.msg0x06 = 0;
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <Display_Can_Messages+0x1bc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	715a      	strb	r2, [r3, #5]
	}
}
 80011da:	bf00      	nop
 80011dc:	3740      	adds	r7, #64	@ 0x40
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200001fc 	.word	0x200001fc
 80011e8:	200001f4 	.word	0x200001f4
 80011ec:	08009478 	.word	0x08009478
 80011f0:	2000035c 	.word	0x2000035c
 80011f4:	200001f8 	.word	0x200001f8
 80011f8:	080094a0 	.word	0x080094a0
 80011fc:	20000202 	.word	0x20000202
 8001200:	080094c4 	.word	0x080094c4
 8001204:	20000203 	.word	0x20000203
 8001208:	080094d4 	.word	0x080094d4
 800120c:	20000204 	.word	0x20000204
 8001210:	080094e4 	.word	0x080094e4
 8001214:	20000205 	.word	0x20000205
 8001218:	080094f4 	.word	0x080094f4
 800121c:	20000206 	.word	0x20000206
 8001220:	08009504 	.word	0x08009504
 8001224:	20000207 	.word	0x20000207
 8001228:	20000208 	.word	0x20000208
 800122c:	08009514 	.word	0x08009514
 8001230:	20000209 	.word	0x20000209
 8001234:	08009524 	.word	0x08009524

08001238 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 800123e:	2300      	movs	r3, #0
 8001240:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8001242:	2300      	movs	r3, #0
 8001244:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8001246:	2300      	movs	r3, #0
 8001248:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800124a:	2300      	movs	r3, #0
 800124c:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 800124e:	2300      	movs	r3, #0
 8001250:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8001252:	2300      	movs	r3, #0
 8001254:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8001262:	2300      	movs	r3, #0
 8001264:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8001266:	2300      	movs	r3, #0
 8001268:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800126a:	2300      	movs	r3, #0
 800126c:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 800126e:	2300      	movs	r3, #0
 8001270:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8001272:	2308      	movs	r3, #8
 8001274:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8001276:	2300      	movs	r3, #0
 8001278:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800127a:	2300      	movs	r3, #0
 800127c:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 800127e:	2300      	movs	r3, #0
 8001280:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8001282:	2300      	movs	r3, #0
 8001284:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8001286:	2300      	movs	r3, #0
 8001288:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800128e:	2300      	movs	r3, #0
 8001290:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8001296:	2300      	movs	r3, #0
 8001298:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800129a:	2300      	movs	r3, #0
 800129c:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800129e:	2300      	movs	r3, #0
 80012a0:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80012a2:	2300      	movs	r3, #0
 80012a4:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 80012ae:	2300      	movs	r3, #0
 80012b0:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80012b2:	2308      	movs	r3, #8
 80012b4:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 80012b6:	2300      	movs	r3, #0
 80012b8:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 80012ba:	2300      	movs	r3, #0
 80012bc:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 80012be:	f000 f86f 	bl	80013a0 <MCP2515_Initialize>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f083 0301 	eor.w	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <CANSPI_Initialize+0x9c>
    return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	e060      	b.n	8001396 <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 80012d4:	f000 f886 	bl	80013e4 <MCP2515_SetConfigMode>
 80012d8:	4603      	mov	r3, r0
 80012da:	f083 0301 	eor.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <CANSPI_Initialize+0xb2>
    return -2;
 80012e4:	f06f 0301 	mvn.w	r3, #1
 80012e8:	e055      	b.n	8001396 <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	461a      	mov	r2, r3
 80012ee:	2123      	movs	r1, #35	@ 0x23
 80012f0:	2020      	movs	r0, #32
 80012f2:	f000 f8fd 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80012f6:	463b      	mov	r3, r7
 80012f8:	461a      	mov	r2, r3
 80012fa:	2127      	movs	r1, #39	@ 0x27
 80012fc:	2024      	movs	r0, #36	@ 0x24
 80012fe:	f000 f8f7 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	461a      	mov	r2, r3
 8001308:	2103      	movs	r1, #3
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f8f0 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	461a      	mov	r2, r3
 8001316:	2107      	movs	r1, #7
 8001318:	2004      	movs	r0, #4
 800131a:	f000 f8e9 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	461a      	mov	r2, r3
 8001324:	210b      	movs	r1, #11
 8001326:	2008      	movs	r0, #8
 8001328:	f000 f8e2 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	461a      	mov	r2, r3
 8001332:	2113      	movs	r1, #19
 8001334:	2010      	movs	r0, #16
 8001336:	f000 f8db 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	461a      	mov	r2, r3
 8001340:	2117      	movs	r1, #23
 8001342:	2014      	movs	r0, #20
 8001344:	f000 f8d4 	bl	80014f0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	461a      	mov	r2, r3
 800134e:	211b      	movs	r1, #27
 8001350:	2018      	movs	r0, #24
 8001352:	f000 f8cd 	bl	80014f0 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8001356:	2104      	movs	r1, #4
 8001358:	2060      	movs	r0, #96	@ 0x60
 800135a:	f000 f8a3 	bl	80014a4 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800135e:	2101      	movs	r1, #1
 8001360:	2070      	movs	r0, #112	@ 0x70
 8001362:	f000 f89f 	bl	80014a4 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8001366:	2100      	movs	r1, #0
 8001368:	202a      	movs	r0, #42	@ 0x2a
 800136a:	f000 f89b 	bl	80014a4 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 800136e:	21e5      	movs	r1, #229	@ 0xe5
 8001370:	2029      	movs	r0, #41	@ 0x29
 8001372:	f000 f897 	bl	80014a4 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8001376:	2183      	movs	r1, #131	@ 0x83
 8001378:	2028      	movs	r0, #40	@ 0x28
 800137a:	f000 f893 	bl	80014a4 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800137e:	f000 f84f 	bl	8001420 <MCP2515_SetNormalMode>
 8001382:	4603      	mov	r3, r0
 8001384:	f083 0301 	eor.w	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <CANSPI_Initialize+0x15c>
    return -3;
 800138e:	f06f 0302 	mvn.w	r3, #2
 8001392:	e000      	b.n	8001396 <CANSPI_Initialize+0x15e>

  return 1;
 8001394:	2301      	movs	r3, #1
}
 8001396:	4618      	mov	r0, r3
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013ac:	480b      	ldr	r0, [pc, #44]	@ (80013dc <MCP2515_Initialize+0x3c>)
 80013ae:	f003 fa1f 	bl	80047f0 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 80013b2:	230a      	movs	r3, #10
 80013b4:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80013b6:	480a      	ldr	r0, [pc, #40]	@ (80013e0 <MCP2515_Initialize+0x40>)
 80013b8:	f004 fcb0 	bl	8005d1c <HAL_SPI_GetState>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d101      	bne.n	80013c6 <MCP2515_Initialize+0x26>
      return true;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e006      	b.n	80013d4 <MCP2515_Initialize+0x34>

    loop--;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f1      	bne.n	80013b6 <MCP2515_Initialize+0x16>

  return false;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40020000 	.word	0x40020000
 80013e0:	20000304 	.word	0x20000304

080013e4 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80013ea:	2180      	movs	r1, #128	@ 0x80
 80013ec:	200f      	movs	r0, #15
 80013ee:	f000 f859 	bl	80014a4 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80013f2:	230a      	movs	r3, #10
 80013f4:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80013f6:	200e      	movs	r0, #14
 80013f8:	f000 f830 	bl	800145c <MCP2515_ReadByte>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001402:	2b80      	cmp	r3, #128	@ 0x80
 8001404:	d101      	bne.n	800140a <MCP2515_SetConfigMode+0x26>
      return true;
 8001406:	2301      	movs	r3, #1
 8001408:	e006      	b.n	8001418 <MCP2515_SetConfigMode+0x34>

    loop--;
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	3b01      	subs	r3, #1
 800140e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ef      	bne.n	80013f6 <MCP2515_SetConfigMode+0x12>

  return false;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001426:	2100      	movs	r1, #0
 8001428:	200f      	movs	r0, #15
 800142a:	f000 f83b 	bl	80014a4 <MCP2515_WriteByte>

  uint8_t loop = 10;
 800142e:	230a      	movs	r3, #10
 8001430:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001432:	200e      	movs	r0, #14
 8001434:	f000 f812 	bl	800145c <MCP2515_ReadByte>
 8001438:	4603      	mov	r3, r0
 800143a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <MCP2515_SetNormalMode+0x26>
      return true;
 8001442:	2301      	movs	r3, #1
 8001444:	e006      	b.n	8001454 <MCP2515_SetNormalMode+0x34>

    loop--;
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	3b01      	subs	r3, #1
 800144a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1ef      	bne.n	8001432 <MCP2515_SetNormalMode+0x12>

  return false;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800146c:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <MCP2515_ReadByte+0x44>)
 800146e:	f003 f9bf 	bl	80047f0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8001472:	2003      	movs	r0, #3
 8001474:	f000 f868 	bl	8001548 <SPI_Tx>
  SPI_Tx(address);
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f864 	bl	8001548 <SPI_Tx>
  retVal = SPI_Rx();
 8001480:	f000 f888 	bl	8001594 <SPI_Rx>
 8001484:	4603      	mov	r3, r0
 8001486:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800148e:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <MCP2515_ReadByte+0x44>)
 8001490:	f003 f9ae 	bl	80047f0 <HAL_GPIO_WritePin>

  return retVal;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40020000 	.word	0x40020000

080014a4 <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	460a      	mov	r2, r1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ba:	480c      	ldr	r0, [pc, #48]	@ (80014ec <MCP2515_WriteByte+0x48>)
 80014bc:	f003 f998 	bl	80047f0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f841 	bl	8001548 <SPI_Tx>
  SPI_Tx(address);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f83d 	bl	8001548 <SPI_Tx>
  SPI_Tx(data);
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 f839 	bl	8001548 <SPI_Tx>

  MCP2515_CS_HIGH();
 80014d6:	2201      	movs	r2, #1
 80014d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014dc:	4803      	ldr	r0, [pc, #12]	@ (80014ec <MCP2515_WriteByte+0x48>)
 80014de:	f003 f987 	bl	80047f0 <HAL_GPIO_WritePin>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40020000 	.word	0x40020000

080014f0 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	603a      	str	r2, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	460b      	mov	r3, r1
 80014fe:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001506:	480f      	ldr	r0, [pc, #60]	@ (8001544 <MCP2515_WriteByteSequence+0x54>)
 8001508:	f003 f972 	bl	80047f0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 800150c:	2002      	movs	r0, #2
 800150e:	f000 f81b 	bl	8001548 <SPI_Tx>
  SPI_Tx(startAddress);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f817 	bl	8001548 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 800151a:	79ba      	ldrb	r2, [r7, #6]
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3301      	adds	r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4619      	mov	r1, r3
 8001528:	6838      	ldr	r0, [r7, #0]
 800152a:	f000 f81f 	bl	800156c <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001534:	4803      	ldr	r0, [pc, #12]	@ (8001544 <MCP2515_WriteByteSequence+0x54>)
 8001536:	f003 f95b 	bl	80047f0 <HAL_GPIO_WritePin>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40020000 	.word	0x40020000

08001548 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8001552:	1df9      	adds	r1, r7, #7
 8001554:	230a      	movs	r3, #10
 8001556:	2201      	movs	r2, #1
 8001558:	4803      	ldr	r0, [pc, #12]	@ (8001568 <SPI_Tx+0x20>)
 800155a:	f003 ffd4 	bl	8005506 <HAL_SPI_Transmit>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000304 	.word	0x20000304

0800156c <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	b29a      	uxth	r2, r3
 800157c:	230a      	movs	r3, #10
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4803      	ldr	r0, [pc, #12]	@ (8001590 <SPI_TxBuffer+0x24>)
 8001582:	f003 ffc0 	bl	8005506 <HAL_SPI_Transmit>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000304 	.word	0x20000304

08001594 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800159a:	1df9      	adds	r1, r7, #7
 800159c:	230a      	movs	r3, #10
 800159e:	2201      	movs	r2, #1
 80015a0:	4803      	ldr	r0, [pc, #12]	@ (80015b0 <SPI_Rx+0x1c>)
 80015a2:	f004 f8f3 	bl	800578c <HAL_SPI_Receive>
  return retVal;
 80015a6:	79fb      	ldrb	r3, [r7, #7]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000304 	.word	0x20000304

080015b4 <SchTimerInterruptCallback>:
 *
 *
 */

void SchTimerInterruptCallback(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
	tickCounter++;
 80015b8:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <SchTimerInterruptCallback+0x90>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a21      	ldr	r2, [pc, #132]	@ (8001644 <SchTimerInterruptCallback+0x90>)
 80015c0:	6013      	str	r3, [r2, #0]

	// Perform quick tasks every 1 ms
	if (tickCounter % 1 == 0) {
 80015c2:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <SchTimerInterruptCallback+0x90>)
 80015c4:	681b      	ldr	r3, [r3, #0]
		fastTaskFlag = 1;
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <SchTimerInterruptCallback+0x94>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
	}

	// Perform medium tasks every 10 ms
	if (tickCounter % 10 == 0) {
 80015cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <SchTimerInterruptCallback+0x90>)
 80015ce:	6819      	ldr	r1, [r3, #0]
 80015d0:	4b1e      	ldr	r3, [pc, #120]	@ (800164c <SchTimerInterruptCallback+0x98>)
 80015d2:	fba3 2301 	umull	r2, r3, r3, r1
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	1aca      	subs	r2, r1, r3
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	d102      	bne.n	80015ec <SchTimerInterruptCallback+0x38>
		mediumTaskFlag = 1;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <SchTimerInterruptCallback+0x9c>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
	}

	// Perform the task every 20 ms
	if (tickCounter % 20 == 0) {
 80015ec:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <SchTimerInterruptCallback+0x90>)
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <SchTimerInterruptCallback+0x98>)
 80015f2:	fba3 2301 	umull	r2, r3, r3, r1
 80015f6:	091a      	lsrs	r2, r3, #4
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	1aca      	subs	r2, r1, r3
 8001602:	2a00      	cmp	r2, #0
 8001604:	d102      	bne.n	800160c <SchTimerInterruptCallback+0x58>
		conversionFlag = 1;
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <SchTimerInterruptCallback+0xa0>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
	}

	// Perform slow tasks every 100 ms
	if (tickCounter % 100 == 0) {
 800160c:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <SchTimerInterruptCallback+0x90>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <SchTimerInterruptCallback+0xa4>)
 8001612:	fba3 1302 	umull	r1, r3, r3, r2
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2164      	movs	r1, #100	@ 0x64
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <SchTimerInterruptCallback+0x76>
		slowTaskFlag = 1;
 8001624:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <SchTimerInterruptCallback+0xa8>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
	}

	// Reset the counter to prevent overflow
	if (tickCounter >= 1000) {
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <SchTimerInterruptCallback+0x90>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001632:	d302      	bcc.n	800163a <SchTimerInterruptCallback+0x86>
		tickCounter = 0;
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <SchTimerInterruptCallback+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
	}
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	2000020c 	.word	0x2000020c
 8001648:	20000210 	.word	0x20000210
 800164c:	cccccccd 	.word	0xcccccccd
 8001650:	20000211 	.word	0x20000211
 8001654:	20000212 	.word	0x20000212
 8001658:	51eb851f 	.word	0x51eb851f
 800165c:	20000213 	.word	0x20000213

08001660 <SchedulerInitFct>:
 *
 *
 */

void SchedulerInitFct(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	// Initialize SysTick to generate an interrupt every 1 ms.
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 160); // Formula for the divider: 128 MHz (of HCLK) / 4 (of APB1 Prescaler) / 2 (of APB2 Prescaler) * 10
 8001664:	f003 f9c4 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8001668:	4603      	mov	r3, r0
 800166a:	4a0c      	ldr	r2, [pc, #48]	@ (800169c <SchedulerInitFct+0x3c>)
 800166c:	fba2 2303 	umull	r2, r3, r2, r3
 8001670:	09db      	lsrs	r3, r3, #7
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fbab 	bl	8003dce <HAL_SYSTICK_Config>

	// Initialize other variables and flags if necessary
	tickCounter = 0;
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <SchedulerInitFct+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
	fastTaskFlag = 0;
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <SchedulerInitFct+0x44>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
	mediumTaskFlag = 0;
 8001684:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <SchedulerInitFct+0x48>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
	conversionFlag = 0;
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <SchedulerInitFct+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
	slowTaskFlag = 0;
 8001690:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <SchedulerInitFct+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	cccccccd 	.word	0xcccccccd
 80016a0:	2000020c 	.word	0x2000020c
 80016a4:	20000210 	.word	0x20000210
 80016a8:	20000211 	.word	0x20000211
 80016ac:	20000212 	.word	0x20000212
 80016b0:	20000213 	.word	0x20000213

080016b4 <SchedulerMgmFct>:
 *
 *
 */

void SchedulerMgmFct(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	// Perform quick tasks if the flag is set
	if (fastTaskFlag) {
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <SchedulerMgmFct+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <SchedulerMgmFct+0x18>
		fastTaskFlag = 0;
 80016c2:	4b12      	ldr	r3, [pc, #72]	@ (800170c <SchedulerMgmFct+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
		TaskFast(); // Perform all quick tests
 80016c8:	f000 f83a 	bl	8001740 <TaskFast>
	}

	// Perform medium tasks if the flag is set
	if (mediumTaskFlag) {
 80016cc:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <SchedulerMgmFct+0x5c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <SchedulerMgmFct+0x2c>
		mediumTaskFlag = 0;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <SchedulerMgmFct+0x5c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
		TaskMed(); // Perform all medium-speed tasks
 80016dc:	f000 f838 	bl	8001750 <TaskMed>
	}

	// Perform average sensors reading conversion before sending to Can
	if (conversionFlag){
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <SchedulerMgmFct+0x60>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d004      	beq.n	80016f4 <SchedulerMgmFct+0x40>
		conversionFlag = 0;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <SchedulerMgmFct+0x60>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
		TaskConv(); // Perform the conversion of the average sensors reading
 80016f0:	f000 f834 	bl	800175c <TaskConv>
	}

	// Perform slow tasks if the flag is set
	if (slowTaskFlag) {
 80016f4:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <SchedulerMgmFct+0x64>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <SchedulerMgmFct+0x54>
		slowTaskFlag = 0;
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <SchedulerMgmFct+0x64>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
		TaskSlow();  // Perform all slow tasks
 8001704:	f000 f832 	bl	800176c <TaskSlow>
	}

	// Other error handling tasks
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000210 	.word	0x20000210
 8001710:	20000211 	.word	0x20000211
 8001714:	20000212 	.word	0x20000212
 8001718:	20000213 	.word	0x20000213

0800171c <TaskInit>:
 *  General Tasks
 *
 *
 */
void TaskInit(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	/* Executed once at startup. */
	/* TODO Functions for HW/SW initialization. */

	SchedulerInitFct();
 8001720:	f7ff ff9e 	bl	8001660 <SchedulerInitFct>

	#ifndef DEBUG_MODE
		HAL_ADC_Start_DMA(&hadc1, adc_buf, ADC_BUF_LEN);
 8001724:	2202      	movs	r2, #2
 8001726:	4904      	ldr	r1, [pc, #16]	@ (8001738 <TaskInit+0x1c>)
 8001728:	4804      	ldr	r0, [pc, #16]	@ (800173c <TaskInit+0x20>)
 800172a:	f001 f805 	bl	8002738 <HAL_ADC_Start_DMA>
	#endif

	CanInit();
 800172e:	f7ff fbd3 	bl	8000ed8 <CanInit>
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000214 	.word	0x20000214
 800173c:	20000234 	.word	0x20000234

08001740 <TaskFast>:

void TaskFast(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (fast schedulation, e.g. 1 ms). */

	#ifndef DEBUG_MODE
		Task1_AcquireSensorValues();
 8001744:	f000 f81a 	bl	800177c <Task1_AcquireSensorValues>
	#endif

	Display_Can_Messages();
 8001748:	f7ff fc6e 	bl	8001028 <Display_Can_Messages>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <TaskMed>:

void TaskMed(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (medium schedulation, e.g. 10 ms). */

	#ifndef DEBUG_MODE
		Task1_AverageSensorValues();
 8001754:	f000 f864 	bl	8001820 <Task1_AverageSensorValues>
	#endif
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <TaskConv>:

void TaskConv(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (medium schedulation, e.g. 20 ms). */

	#ifndef DEBUG_MODE
		Task2_ConvertAndSendSensorData_Task4_ErrorHandling();
 8001760:	f000 f88c 	bl	800187c <Task2_ConvertAndSendSensorData_Task4_ErrorHandling>
		Transmit_CAN_Message(&hcan1, 0x034, 3, g);

	#endif

	// Attention:  since I don't use an interrupt for reception with the MCP2515 can bus transceiver, reception is less accurate.
	Task3_ReadCANMessages();
 8001764:	f000 f8fe 	bl	8001964 <Task3_ReadCANMessages>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <TaskSlow>:

void TaskSlow(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (medium schedulation, e.g. 100 ms). */

}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <Task1_AcquireSensorValues>:
 *
 * Suggestions:
 * Use DMA and interrupts to handle reading and averaging.
 *-----------------------------------------------------------------------------*/
void Task1_AcquireSensorValues(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	@ 0x38
 8001780:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001788:	e032      	b.n	80017f0 <Task1_AcquireSensorValues+0x74>
		raw_readings[i] = adc_buf[i];
 800178a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800178e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001792:	491d      	ldr	r1, [pc, #116]	@ (8001808 <Task1_AcquireSensorValues+0x8c>)
 8001794:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001798:	491c      	ldr	r1, [pc, #112]	@ (800180c <Task1_AcquireSensorValues+0x90>)
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		sum_readings[i] += raw_readings[i];
 800179e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80017a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001810 <Task1_AcquireSensorValues+0x94>)
 80017a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80017ac:	4a17      	ldr	r2, [pc, #92]	@ (800180c <Task1_AcquireSensorValues+0x90>)
 80017ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80017b6:	440a      	add	r2, r1
 80017b8:	4915      	ldr	r1, [pc, #84]	@ (8001810 <Task1_AcquireSensorValues+0x94>)
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Display
		char msg[50];
		uint16_t msg_length = sprintf(msg, "%u) Potentiometer: %lu\n", i, raw_readings[i]);
 80017be:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80017c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80017c6:	4911      	ldr	r1, [pc, #68]	@ (800180c <Task1_AcquireSensorValues+0x90>)
 80017c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017cc:	4638      	mov	r0, r7
 80017ce:	4911      	ldr	r1, [pc, #68]	@ (8001814 <Task1_AcquireSensorValues+0x98>)
 80017d0:	f005 fd1a 	bl	8007208 <siprintf>
 80017d4:	4603      	mov	r3, r0
 80017d6:	86bb      	strh	r3, [r7, #52]	@ 0x34

		// Transmit message via UART
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, msg_length, HAL_MAX_DELAY);
 80017d8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80017da:	4639      	mov	r1, r7
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
 80017e0:	480d      	ldr	r0, [pc, #52]	@ (8001818 <Task1_AcquireSensorValues+0x9c>)
 80017e2:	f004 fc3b 	bl	800605c <HAL_UART_Transmit>
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 80017e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80017ea:	3301      	adds	r3, #1
 80017ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80017f0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80017f4:	4b09      	ldr	r3, [pc, #36]	@ (800181c <Task1_AcquireSensorValues+0xa0>)
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d3c6      	bcc.n	800178a <Task1_AcquireSensorValues+0xe>
	}
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3738      	adds	r7, #56	@ 0x38
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000214 	.word	0x20000214
 800180c:	2000021c 	.word	0x2000021c
 8001810:	20000224 	.word	0x20000224
 8001814:	08009534 	.word	0x08009534
 8001818:	2000035c 	.word	0x2000035c
 800181c:	20000234 	.word	0x20000234

08001820 <Task1_AverageSensorValues>:

void Task1_AverageSensorValues(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 8001826:	2300      	movs	r3, #0
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	e013      	b.n	8001854 <Task1_AverageSensorValues+0x34>
		avg_readings[i] = sum_readings[i] / 10;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4a0f      	ldr	r2, [pc, #60]	@ (800186c <Task1_AverageSensorValues+0x4c>)
 8001830:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	490e      	ldr	r1, [pc, #56]	@ (8001870 <Task1_AverageSensorValues+0x50>)
 8001838:	fba1 1202 	umull	r1, r2, r1, r2
 800183c:	08d2      	lsrs	r2, r2, #3
 800183e:	490d      	ldr	r1, [pc, #52]	@ (8001874 <Task1_AverageSensorValues+0x54>)
 8001840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sum_readings[i] = 0;
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4a09      	ldr	r2, [pc, #36]	@ (800186c <Task1_AverageSensorValues+0x4c>)
 8001848:	2100      	movs	r1, #0
 800184a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	3301      	adds	r3, #1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	79fa      	ldrb	r2, [r7, #7]
 8001856:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <Task1_AverageSensorValues+0x58>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	429a      	cmp	r2, r3
 800185c:	d3e6      	bcc.n	800182c <Task1_AverageSensorValues+0xc>
	}
}
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	20000224 	.word	0x20000224
 8001870:	cccccccd 	.word	0xcccccccd
 8001874:	2000022c 	.word	0x2000022c
 8001878:	20000234 	.word	0x20000234

0800187c <Task2_ConvertAndSendSensorData_Task4_ErrorHandling>:
 * - When the value returns to normal, it will be possible to reactivate the board functions
 *   by sending a message on CAN1 to address 0x006 with content
 *   of a single byte containing the letter 'R' encoded as "char".
 *---------------------------------------------------------------------------- */
void Task2_ConvertAndSendSensorData_Task4_ErrorHandling(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
	uint8_t TxData[5] = {0};
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	2300      	movs	r3, #0
 8001888:	733b      	strb	r3, [r7, #12]
	uint8_t allSensorsValid = 1;
 800188a:	2301      	movs	r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 800188e:	2300      	movs	r3, #0
 8001890:	73bb      	strb	r3, [r7, #14]
 8001892:	e031      	b.n	80018f8 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0x7c>
		// Convert the sensor reading to a percentage scale (0% - 100%).
		// The sensor's voltage range is from 0.3V (reading of 373) to 3V (reading of 3724).
		// The maximum possible sensor reading is 4096, corresponding to 110% in this formula.
		// The conversion formula scales the average reading proportionally.
		int8_t conv_reading = (int8_t) (((avg_readings[i] - 373) * 100) / (3723 - 373));
 8001894:	7bbb      	ldrb	r3, [r7, #14]
 8001896:	4a2e      	ldr	r2, [pc, #184]	@ (8001950 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xd4>)
 8001898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189c:	2264      	movs	r2, #100	@ 0x64
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	f5a3 4311 	sub.w	r3, r3, #37120	@ 0x9100
 80018a6:	3bb4      	subs	r3, #180	@ 0xb4
 80018a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001954 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xd8>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0a9b      	lsrs	r3, r3, #10
 80018b0:	737b      	strb	r3, [r7, #13]

		// Check if the sensor reading is within the valid range
		if (conv_reading >= 0 && conv_reading <= 100){ // OK
 80018b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0a      	blt.n	80018d0 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0x54>
 80018ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018be:	2b64      	cmp	r3, #100	@ 0x64
 80018c0:	dc06      	bgt.n	80018d0 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0x54>
		    // Valid reading: update TxData
		    TxData[i] = (uint8_t) conv_reading;
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
 80018c4:	7b7a      	ldrb	r2, [r7, #13]
 80018c6:	3310      	adds	r3, #16
 80018c8:	443b      	add	r3, r7
 80018ca:	f803 2c08 	strb.w	r2, [r3, #-8]
 80018ce:	e010      	b.n	80018f2 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0x76>
		} else { // ERROR
			// Invalid reading: send error message via CAN
			uint8_t ErrorTxData[2] = {'E', i + 1};
 80018d0:	2345      	movs	r3, #69	@ 0x45
 80018d2:	713b      	strb	r3, [r7, #4]
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	3301      	adds	r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	717b      	strb	r3, [r7, #5]
			Transmit_CAN_Message(&hcan1, 0x05, 2, ErrorTxData);
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2202      	movs	r2, #2
 80018e0:	2105      	movs	r1, #5
 80018e2:	481d      	ldr	r0, [pc, #116]	@ (8001958 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xdc>)
 80018e4:	f7ff fb2a 	bl	8000f3c <Transmit_CAN_Message>
			allSensorsValid = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	73fb      	strb	r3, [r7, #15]

			isConnectionEstablished = 0; // Mark the connection as unstable
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xe0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 80018f2:	7bbb      	ldrb	r3, [r7, #14]
 80018f4:	3301      	adds	r3, #1
 80018f6:	73bb      	strb	r3, [r7, #14]
 80018f8:	7bba      	ldrb	r2, [r7, #14]
 80018fa:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xe4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d3c8      	bcc.n	8001894 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0x18>
		}
	}

	// If all sensors are valid, send the data via CAN
	if (allSensorsValid) {
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01e      	beq.n	8001946 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xca>
		if (!isConnectionEstablished) {
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xe0>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10a      	bne.n	8001928 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xac>
			// Send connection re-establishment message
			uint8_t ReestablishTxData = 'R';
 8001912:	2352      	movs	r3, #82	@ 0x52
 8001914:	70fb      	strb	r3, [r7, #3]
			Transmit_CAN_Message(&hcan1, 0x06, 1, &ReestablishTxData);
 8001916:	1cfb      	adds	r3, r7, #3
 8001918:	2201      	movs	r2, #1
 800191a:	2106      	movs	r1, #6
 800191c:	480e      	ldr	r0, [pc, #56]	@ (8001958 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xdc>)
 800191e:	f7ff fb0d 	bl	8000f3c <Transmit_CAN_Message>

			isConnectionEstablished = 1; // Mark the connection as stable
 8001922:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xe0>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
		}

		// Send sensor data via CAN
		Transmit_CAN_Message(&hcan1, 0x35, 4, TxData);
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	2204      	movs	r2, #4
 800192e:	2135      	movs	r1, #53	@ 0x35
 8001930:	4809      	ldr	r0, [pc, #36]	@ (8001958 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xdc>)
 8001932:	f7ff fb03 	bl	8000f3c <Transmit_CAN_Message>
		Transmit_CAN_Message(&hcan1, 0x36, 1, &TxData[4]);
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	3304      	adds	r3, #4
 800193c:	2201      	movs	r2, #1
 800193e:	2136      	movs	r1, #54	@ 0x36
 8001940:	4805      	ldr	r0, [pc, #20]	@ (8001958 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xdc>)
 8001942:	f7ff fafb 	bl	8000f3c <Transmit_CAN_Message>
	}
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000022c 	.word	0x2000022c
 8001954:	4e407f29 	.word	0x4e407f29
 8001958:	200002dc 	.word	0x200002dc
 800195c:	20000000 	.word	0x20000000
 8001960:	20000234 	.word	0x20000234

08001964 <Task3_ReadCANMessages>:
 * - 0x034 -> [gx, gy, gz]
 * Read these messages and save the data contained in them, taking into account that
 * each variable is encoded as "short int".
 *-----------------------------------------------------------------------------*/
void Task3_ReadCANMessages(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
			Receive_CAN_Message_MCP2515();
		#else
			Debug_Receive_CAN_Message_MCP2515();
		#endif
	#endif
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001976:	f000 fd19 	bl	80023ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800197a:	f000 f811 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197e:	f000 f993 	bl	8001ca8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001982:	f000 f971 	bl	8001c68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001986:	f000 f945 	bl	8001c14 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800198a:	f000 f90d 	bl	8001ba8 <MX_SPI1_Init>
  MX_ADC1_Init();
 800198e:	f000 f875 	bl	8001a7c <MX_ADC1_Init>
  MX_CAN1_Init();
 8001992:	f000 f8d3 	bl	8001b3c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  TaskInit();
 8001996:	f7ff fec1 	bl	800171c <TaskInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SchedulerMgmFct();
 800199a:	f7ff fe8b 	bl	80016b4 <SchedulerMgmFct>
 800199e:	e7fc      	b.n	800199a <main+0x28>

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	@ 0x50
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	2234      	movs	r2, #52	@ 0x34
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f005 fc8d 	bl	80072ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a74 <SystemClock_Config+0xd4>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	4a29      	ldr	r2, [pc, #164]	@ (8001a74 <SystemClock_Config+0xd4>)
 80019ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d4:	4b27      	ldr	r3, [pc, #156]	@ (8001a74 <SystemClock_Config+0xd4>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019e0:	2300      	movs	r3, #0
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <SystemClock_Config+0xd8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80019ec:	4a22      	ldr	r2, [pc, #136]	@ (8001a78 <SystemClock_Config+0xd8>)
 80019ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <SystemClock_Config+0xd8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a00:	2301      	movs	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a14:	2304      	movs	r3, #4
 8001a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a20:	2302      	movs	r3, #2
 8001a22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a24:	2302      	movs	r3, #2
 8001a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f003 fa43 	bl	8004eb8 <HAL_RCC_OscConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a38:	f000 f9d7 	bl	8001dea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3c:	230f      	movs	r3, #15
 8001a3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a40:	2302      	movs	r3, #2
 8001a42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a48:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	2104      	movs	r1, #4
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fee2 	bl	8004824 <HAL_RCC_ClockConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001a66:	f000 f9c0 	bl	8001dea <Error_Handler>
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3750      	adds	r7, #80	@ 0x50
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40007000 	.word	0x40007000

08001a7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a82:	463b      	mov	r3, r7
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a8e:	4b28      	ldr	r3, [pc, #160]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001a90:	4a28      	ldr	r2, [pc, #160]	@ (8001b34 <MX_ADC1_Init+0xb8>)
 8001a92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a94:	4b26      	ldr	r3, [pc, #152]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a9a:	4b25      	ldr	r3, [pc, #148]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001aa0:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001aa6:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aac:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001abc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b38 <MX_ADC1_Init+0xbc>)
 8001abe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001ac8:	2202      	movs	r2, #2
 8001aca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001acc:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ada:	4815      	ldr	r0, [pc, #84]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001adc:	f000 fcd8 	bl	8002490 <HAL_ADC_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ae6:	f000 f980 	bl	8001dea <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001af2:	2307      	movs	r3, #7
 8001af4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af6:	463b      	mov	r3, r7
 8001af8:	4619      	mov	r1, r3
 8001afa:	480d      	ldr	r0, [pc, #52]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001afc:	f000 ff40 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b06:	f000 f970 	bl	8001dea <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b12:	463b      	mov	r3, r7
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	@ (8001b30 <MX_ADC1_Init+0xb4>)
 8001b18:	f000 ff32 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001b22:	f000 f962 	bl	8001dea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000234 	.word	0x20000234
 8001b34:	40012000 	.word	0x40012000
 8001b38:	0f000001 	.word	0x0f000001

08001b3c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b40:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b42:	4a18      	ldr	r2, [pc, #96]	@ (8001ba4 <MX_CAN1_Init+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001b46:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b48:	2210      	movs	r2, #16
 8001b4a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b52:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001b58:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b5e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <MX_CAN1_Init+0x64>)
 8001b8c:	f001 f9b2 	bl	8002ef4 <HAL_CAN_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001b96:	f000 f928 	bl	8001dea <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200002dc 	.word	0x200002dc
 8001ba4:	40006400 	.word	0x40006400

08001ba8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bac:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001bae:	4a18      	ldr	r2, [pc, #96]	@ (8001c10 <MX_SPI1_Init+0x68>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001bb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bba:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001bdc:	2230      	movs	r2, #48	@ 0x30
 8001bde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bec:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001bf4:	220a      	movs	r2, #10
 8001bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bf8:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <MX_SPI1_Init+0x64>)
 8001bfa:	f003 fbfb 	bl	80053f4 <HAL_SPI_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c04:	f000 f8f1 	bl	8001dea <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000304 	.word	0x20000304
 8001c10:	40013000 	.word	0x40013000

08001c14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <MX_USART2_UART_Init+0x50>)
 8001c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <MX_USART2_UART_Init+0x4c>)
 8001c4c:	f004 f9b6 	bl	8005fbc <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c56:	f000 f8c8 	bl	8001dea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000035c 	.word	0x2000035c
 8001c64:	40004400 	.word	0x40004400

08001c68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <MX_DMA_Init+0x3c>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca4 <MX_DMA_Init+0x3c>)
 8001c78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <MX_DMA_Init+0x3c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2038      	movs	r0, #56	@ 0x38
 8001c90:	f002 f873 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c94:	2038      	movs	r0, #56	@ 0x38
 8001c96:	f002 f88c 	bl	8003db2 <HAL_NVIC_EnableIRQ>

}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b31      	ldr	r3, [pc, #196]	@ (8001d88 <MX_GPIO_Init+0xe0>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a30      	ldr	r2, [pc, #192]	@ (8001d88 <MX_GPIO_Init+0xe0>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b2e      	ldr	r3, [pc, #184]	@ (8001d88 <MX_GPIO_Init+0xe0>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b2a      	ldr	r3, [pc, #168]	@ (8001d88 <MX_GPIO_Init+0xe0>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a29      	ldr	r2, [pc, #164]	@ (8001d88 <MX_GPIO_Init+0xe0>)
 8001ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b27      	ldr	r3, [pc, #156]	@ (8001d88 <MX_GPIO_Init+0xe0>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b23      	ldr	r3, [pc, #140]	@ (8001d88 <MX_GPIO_Init+0xe0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a22      	ldr	r2, [pc, #136]	@ (8001d88 <MX_GPIO_Init+0xe0>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b20      	ldr	r3, [pc, #128]	@ (8001d88 <MX_GPIO_Init+0xe0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <MX_GPIO_Init+0xe0>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d88 <MX_GPIO_Init+0xe0>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <MX_GPIO_Init+0xe0>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2120      	movs	r1, #32
 8001d32:	4816      	ldr	r0, [pc, #88]	@ (8001d8c <MX_GPIO_Init+0xe4>)
 8001d34:	f002 fd5c 	bl	80047f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d3e:	4813      	ldr	r0, [pc, #76]	@ (8001d8c <MX_GPIO_Init+0xe4>)
 8001d40:	f002 fd56 	bl	80047f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <MX_GPIO_Init+0xe8>)
 8001d5c:	f002 fbb4 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI_CS_Pin;
 8001d60:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <MX_GPIO_Init+0xe4>)
 8001d7a:	f002 fba5 	bl	80044c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d7e:	bf00      	nop
 8001d80:	3728      	adds	r7, #40	@ 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020800 	.word	0x40020800

08001d94 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2120      	movs	r1, #32
 8001da0:	4803      	ldr	r0, [pc, #12]	@ (8001db0 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001da2:	f002 fd25 	bl	80047f0 <HAL_GPIO_WritePin>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40020000 	.word	0x40020000

08001db4 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completed filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2120      	movs	r1, #32
 8001dc0:	4803      	ldr	r0, [pc, #12]	@ (8001dd0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001dc2:	f002 fd15 	bl	80047f0 <HAL_GPIO_WritePin>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Called when there is at least one new message pending in CAN FIFO 0
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	#ifndef DEBUG_MODE
		Receive_CAN_Message_SN65HVD230(hcan);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff f8bf 	bl	8000f60 <Receive_CAN_Message_SN65HVD230>
	#else
		Debug_Receive_CAN_Message_SN65HVD230(hcan);
	#endif
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dee:	b672      	cpsid	i
}
 8001df0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df2:	bf00      	nop
 8001df4:	e7fd      	b.n	8001df2 <Error_Handler+0x8>
	...

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_MspInit+0x4c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	4a0f      	ldr	r2, [pc, #60]	@ (8001e44 <HAL_MspInit+0x4c>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <HAL_MspInit+0x4c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <HAL_MspInit+0x4c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a08      	ldr	r2, [pc, #32]	@ (8001e44 <HAL_MspInit+0x4c>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_MspInit+0x4c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800

08001e48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	@ 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a33      	ldr	r2, [pc, #204]	@ (8001f34 <HAL_ADC_MspInit+0xec>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d160      	bne.n	8001f2c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b32      	ldr	r3, [pc, #200]	@ (8001f38 <HAL_ADC_MspInit+0xf0>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	4a31      	ldr	r2, [pc, #196]	@ (8001f38 <HAL_ADC_MspInit+0xf0>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <HAL_ADC_MspInit+0xf0>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f38 <HAL_ADC_MspInit+0xf0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f38 <HAL_ADC_MspInit+0xf0>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <HAL_ADC_MspInit+0xf0>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4821      	ldr	r0, [pc, #132]	@ (8001f3c <HAL_ADC_MspInit+0xf4>)
 8001eb6:	f002 fb07 	bl	80044c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001eba:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ebc:	4a21      	ldr	r2, [pc, #132]	@ (8001f44 <HAL_ADC_MspInit+0xfc>)
 8001ebe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ed4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ed8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001edc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ee0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ee4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ee8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eea:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001eec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ef2:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001ef4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ef8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001efa:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f00:	480f      	ldr	r0, [pc, #60]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001f02:	f001 ff71 	bl	8003de8 <HAL_DMA_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001f0c:	f7ff ff6d 	bl	8001dea <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a0b      	ldr	r2, [pc, #44]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001f14:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f16:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <HAL_ADC_MspInit+0xf8>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2101      	movs	r1, #1
 8001f20:	2012      	movs	r0, #18
 8001f22:	f001 ff2a 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f26:	2012      	movs	r0, #18
 8001f28:	f001 ff43 	bl	8003db2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f2c:	bf00      	nop
 8001f2e:	3728      	adds	r7, #40	@ 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40012000 	.word	0x40012000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	2000027c 	.word	0x2000027c
 8001f44:	40026410 	.word	0x40026410

08001f48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	@ 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1d      	ldr	r2, [pc, #116]	@ (8001fdc <HAL_CAN_MspInit+0x94>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d134      	bne.n	8001fd4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <HAL_CAN_MspInit+0x98>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <HAL_CAN_MspInit+0x98>)
 8001f74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7a:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_CAN_MspInit+0x98>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <HAL_CAN_MspInit+0x98>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a14      	ldr	r2, [pc, #80]	@ (8001fe0 <HAL_CAN_MspInit+0x98>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_CAN_MspInit+0x98>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fa2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fb4:	2309      	movs	r3, #9
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4809      	ldr	r0, [pc, #36]	@ (8001fe4 <HAL_CAN_MspInit+0x9c>)
 8001fc0:	f002 fa82 	bl	80044c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2014      	movs	r0, #20
 8001fca:	f001 fed6 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001fce:	2014      	movs	r0, #20
 8001fd0:	f001 feef 	bl	8003db2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	@ 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40006400 	.word	0x40006400
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020400 	.word	0x40020400

08001fe8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	@ 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_SPI_MspInit+0x84>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d12b      	bne.n	8002062 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <HAL_SPI_MspInit+0x88>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	4a17      	ldr	r2, [pc, #92]	@ (8002070 <HAL_SPI_MspInit+0x88>)
 8002014:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002018:	6453      	str	r3, [r2, #68]	@ 0x44
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_SPI_MspInit+0x88>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_SPI_MspInit+0x88>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	4a10      	ldr	r2, [pc, #64]	@ (8002070 <HAL_SPI_MspInit+0x88>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	6313      	str	r3, [r2, #48]	@ 0x30
 8002036:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <HAL_SPI_MspInit+0x88>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002042:	2338      	movs	r3, #56	@ 0x38
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002052:	2305      	movs	r3, #5
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	@ (8002074 <HAL_SPI_MspInit+0x8c>)
 800205e:	f002 fa33 	bl	80044c8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	@ 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40013000 	.word	0x40013000
 8002070:	40023800 	.word	0x40023800
 8002074:	40020400 	.word	0x40020400

08002078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <HAL_UART_MspInit+0x84>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d12b      	bne.n	80020f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <HAL_UART_MspInit+0x88>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <HAL_UART_MspInit+0x88>)
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_UART_MspInit+0x88>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <HAL_UART_MspInit+0x88>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	4a10      	ldr	r2, [pc, #64]	@ (8002100 <HAL_UART_MspInit+0x88>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <HAL_UART_MspInit+0x88>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020d2:	230c      	movs	r3, #12
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e2:	2307      	movs	r3, #7
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	@ (8002104 <HAL_UART_MspInit+0x8c>)
 80020ee:	f002 f9eb 	bl	80044c8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	@ 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40004400 	.word	0x40004400
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000

08002108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <NMI_Handler+0x4>

08002110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <MemManage_Handler+0x4>

08002120 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <BusFault_Handler+0x4>

08002128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <UsageFault_Handler+0x4>

08002130 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215e:	f000 f977 	bl	8002450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SchTimerInterruptCallback();
 8002162:	f7ff fa27 	bl	80015b4 <SchTimerInterruptCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002170:	4802      	ldr	r0, [pc, #8]	@ (800217c <ADC_IRQHandler+0x10>)
 8002172:	f000 f9d0 	bl	8002516 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000234 	.word	0x20000234

08002180 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002184:	4802      	ldr	r0, [pc, #8]	@ (8002190 <CAN1_RX0_IRQHandler+0x10>)
 8002186:	f001 faed 	bl	8003764 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200002dc 	.word	0x200002dc

08002194 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002198:	4802      	ldr	r0, [pc, #8]	@ (80021a4 <DMA2_Stream0_IRQHandler+0x10>)
 800219a:	f001 ff2b 	bl	8003ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000027c 	.word	0x2000027c

080021a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return 1;
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_kill>:

int _kill(int pid, int sig)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021c2:	f005 f8d7 	bl	8007374 <__errno>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2216      	movs	r2, #22
 80021ca:	601a      	str	r2, [r3, #0]
  return -1;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <_exit>:

void _exit (int status)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ffe7 	bl	80021b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021ea:	bf00      	nop
 80021ec:	e7fd      	b.n	80021ea <_exit+0x12>

080021ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	e00a      	b.n	8002216 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002200:	f3af 8000 	nop.w
 8002204:	4601      	mov	r1, r0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	60ba      	str	r2, [r7, #8]
 800220c:	b2ca      	uxtb	r2, r1
 800220e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3301      	adds	r3, #1
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	429a      	cmp	r2, r3
 800221c:	dbf0      	blt.n	8002200 <_read+0x12>
  }

  return len;
 800221e:	687b      	ldr	r3, [r7, #4]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e009      	b.n	800224e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	60ba      	str	r2, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3301      	adds	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	429a      	cmp	r2, r3
 8002254:	dbf1      	blt.n	800223a <_write+0x12>
  }
  return len;
 8002256:	687b      	ldr	r3, [r7, #4]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_close>:

int _close(int file)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002288:	605a      	str	r2, [r3, #4]
  return 0;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_isatty>:

int _isatty(int file)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022a0:	2301      	movs	r3, #1
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d0:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <_sbrk+0x5c>)
 80022d2:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <_sbrk+0x60>)
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022dc:	4b13      	ldr	r3, [pc, #76]	@ (800232c <_sbrk+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e4:	4b11      	ldr	r3, [pc, #68]	@ (800232c <_sbrk+0x64>)
 80022e6:	4a12      	ldr	r2, [pc, #72]	@ (8002330 <_sbrk+0x68>)
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ea:	4b10      	ldr	r3, [pc, #64]	@ (800232c <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d207      	bcs.n	8002308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f8:	f005 f83c 	bl	8007374 <__errno>
 80022fc:	4603      	mov	r3, r0
 80022fe:	220c      	movs	r2, #12
 8002300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	e009      	b.n	800231c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002308:	4b08      	ldr	r3, [pc, #32]	@ (800232c <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230e:	4b07      	ldr	r3, [pc, #28]	@ (800232c <_sbrk+0x64>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	4a05      	ldr	r2, [pc, #20]	@ (800232c <_sbrk+0x64>)
 8002318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800231a:	68fb      	ldr	r3, [r7, #12]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20020000 	.word	0x20020000
 8002328:	00000400 	.word	0x00000400
 800232c:	200003a4 	.word	0x200003a4
 8002330:	200004f8 	.word	0x200004f8

08002334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <SystemInit+0x20>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <SystemInit+0x20>)
 8002340:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <Reset_Handler>:
 8002358:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002390 <LoopFillZerobss+0xe>
 800235c:	f7ff ffea 	bl	8002334 <SystemInit>
 8002360:	480c      	ldr	r0, [pc, #48]	@ (8002394 <LoopFillZerobss+0x12>)
 8002362:	490d      	ldr	r1, [pc, #52]	@ (8002398 <LoopFillZerobss+0x16>)
 8002364:	4a0d      	ldr	r2, [pc, #52]	@ (800239c <LoopFillZerobss+0x1a>)
 8002366:	2300      	movs	r3, #0
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:
 800236a:	58d4      	ldr	r4, [r2, r3]
 800236c:	50c4      	str	r4, [r0, r3]
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:
 8002370:	18c4      	adds	r4, r0, r3
 8002372:	428c      	cmp	r4, r1
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <LoopFillZerobss+0x1e>)
 8002378:	4c0a      	ldr	r4, [pc, #40]	@ (80023a4 <LoopFillZerobss+0x22>)
 800237a:	2300      	movs	r3, #0
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:
 8002382:	42a2      	cmp	r2, r4
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>
 8002386:	f004 fffb 	bl	8007380 <__libc_init_array>
 800238a:	f7ff faf2 	bl	8001972 <main>
 800238e:	4770      	bx	lr
 8002390:	20020000 	.word	0x20020000
 8002394:	20000000 	.word	0x20000000
 8002398:	200001d8 	.word	0x200001d8
 800239c:	080098f0 	.word	0x080098f0
 80023a0:	200001d8 	.word	0x200001d8
 80023a4:	200004f8 	.word	0x200004f8

080023a8 <CAN1_RX1_IRQHandler>:
 80023a8:	e7fe      	b.n	80023a8 <CAN1_RX1_IRQHandler>
	...

080023ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b0:	4b0e      	ldr	r3, [pc, #56]	@ (80023ec <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0d      	ldr	r2, [pc, #52]	@ (80023ec <HAL_Init+0x40>)
 80023b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <HAL_Init+0x40>)
 80023c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c8:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <HAL_Init+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a07      	ldr	r2, [pc, #28]	@ (80023ec <HAL_Init+0x40>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d4:	2003      	movs	r0, #3
 80023d6:	f001 fcc5 	bl	8003d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023da:	2000      	movs	r0, #0
 80023dc:	f000 f808 	bl	80023f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e0:	f7ff fd0a 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023c00 	.word	0x40023c00

080023f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f8:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <HAL_InitTick+0x54>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_InitTick+0x58>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002406:	fbb3 f3f1 	udiv	r3, r3, r1
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	4618      	mov	r0, r3
 8002410:	f001 fcdd 	bl	8003dce <HAL_SYSTICK_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e00e      	b.n	800243c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b0f      	cmp	r3, #15
 8002422:	d80a      	bhi.n	800243a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002424:	2200      	movs	r2, #0
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	f04f 30ff 	mov.w	r0, #4294967295
 800242c:	f001 fca5 	bl	8003d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002430:	4a06      	ldr	r2, [pc, #24]	@ (800244c <HAL_InitTick+0x5c>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000004 	.word	0x20000004
 8002448:	2000000c 	.word	0x2000000c
 800244c:	20000008 	.word	0x20000008

08002450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_IncTick+0x20>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_IncTick+0x24>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4413      	add	r3, r2
 8002460:	4a04      	ldr	r2, [pc, #16]	@ (8002474 <HAL_IncTick+0x24>)
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	2000000c 	.word	0x2000000c
 8002474:	200003a8 	.word	0x200003a8

08002478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return uwTick;
 800247c:	4b03      	ldr	r3, [pc, #12]	@ (800248c <HAL_GetTick+0x14>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	200003a8 	.word	0x200003a8

08002490 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e033      	b.n	800250e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff fcca 	bl	8001e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d118      	bne.n	8002500 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024d6:	f023 0302 	bic.w	r3, r3, #2
 80024da:	f043 0202 	orr.w	r2, r3, #2
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fb7e 	bl	8002be4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f023 0303 	bic.w	r3, r3, #3
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80024fe:	e001      	b.n	8002504 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d049      	beq.n	80025e0 <HAL_ADC_IRQHandler+0xca>
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d046      	beq.n	80025e0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d105      	bne.n	800256a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d12b      	bne.n	80025d0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800257c:	2b00      	cmp	r3, #0
 800257e:	d127      	bne.n	80025d0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002586:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002598:	2b00      	cmp	r3, #0
 800259a:	d119      	bne.n	80025d0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0220 	bic.w	r2, r2, #32
 80025aa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff fbef 	bl	8001db4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f06f 0212 	mvn.w	r2, #18
 80025de:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ee:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d057      	beq.n	80026a6 <HAL_ADC_IRQHandler+0x190>
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d054      	beq.n	80026a6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d139      	bne.n	8002696 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002628:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800262c:	2b00      	cmp	r3, #0
 800262e:	d006      	beq.n	800263e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800263a:	2b00      	cmp	r3, #0
 800263c:	d12b      	bne.n	8002696 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002648:	2b00      	cmp	r3, #0
 800264a:	d124      	bne.n	8002696 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11d      	bne.n	8002696 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800265e:	2b00      	cmp	r3, #0
 8002660:	d119      	bne.n	8002696 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002670:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d105      	bne.n	8002696 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fc22 	bl	8002ee0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 020c 	mvn.w	r2, #12
 80026a4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d017      	beq.n	80026ec <HAL_ADC_IRQHandler+0x1d6>
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d014      	beq.n	80026ec <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10d      	bne.n	80026ec <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f93b 	bl	8002958 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f06f 0201 	mvn.w	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026fa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d015      	beq.n	800272e <HAL_ADC_IRQHandler+0x218>
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	f043 0202 	orr.w	r2, r3, #2
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0220 	mvn.w	r2, #32
 800271c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f924 	bl	800296c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0220 	mvn.w	r2, #32
 800272c:	601a      	str	r2, [r3, #0]
  }
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_ADC_Start_DMA+0x1e>
 8002752:	2302      	movs	r3, #2
 8002754:	e0e9      	b.n	800292a <HAL_ADC_Start_DMA+0x1f2>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d018      	beq.n	800279e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800277c:	4b6d      	ldr	r3, [pc, #436]	@ (8002934 <HAL_ADC_Start_DMA+0x1fc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a6d      	ldr	r2, [pc, #436]	@ (8002938 <HAL_ADC_Start_DMA+0x200>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0c9a      	lsrs	r2, r3, #18
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002790:	e002      	b.n	8002798 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	3b01      	subs	r3, #1
 8002796:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f9      	bne.n	8002792 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027ac:	d107      	bne.n	80027be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027bc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	f040 80a1 	bne.w	8002910 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800280c:	d106      	bne.n	800281c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f023 0206 	bic.w	r2, r3, #6
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	645a      	str	r2, [r3, #68]	@ 0x44
 800281a:	e002      	b.n	8002822 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800282a:	4b44      	ldr	r3, [pc, #272]	@ (800293c <HAL_ADC_Start_DMA+0x204>)
 800282c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002832:	4a43      	ldr	r2, [pc, #268]	@ (8002940 <HAL_ADC_Start_DMA+0x208>)
 8002834:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283a:	4a42      	ldr	r2, [pc, #264]	@ (8002944 <HAL_ADC_Start_DMA+0x20c>)
 800283c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002842:	4a41      	ldr	r2, [pc, #260]	@ (8002948 <HAL_ADC_Start_DMA+0x210>)
 8002844:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800284e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800285e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800286e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	334c      	adds	r3, #76	@ 0x4c
 800287a:	4619      	mov	r1, r3
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f001 fb60 	bl	8003f44 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2b00      	cmp	r3, #0
 800288e:	d12a      	bne.n	80028e6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2d      	ldr	r2, [pc, #180]	@ (800294c <HAL_ADC_Start_DMA+0x214>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d015      	beq.n	80028c6 <HAL_ADC_Start_DMA+0x18e>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a2c      	ldr	r2, [pc, #176]	@ (8002950 <HAL_ADC_Start_DMA+0x218>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d105      	bne.n	80028b0 <HAL_ADC_Start_DMA+0x178>
 80028a4:	4b25      	ldr	r3, [pc, #148]	@ (800293c <HAL_ADC_Start_DMA+0x204>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a27      	ldr	r2, [pc, #156]	@ (8002954 <HAL_ADC_Start_DMA+0x21c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d136      	bne.n	8002928 <HAL_ADC_Start_DMA+0x1f0>
 80028ba:	4b20      	ldr	r3, [pc, #128]	@ (800293c <HAL_ADC_Start_DMA+0x204>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d130      	bne.n	8002928 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d129      	bne.n	8002928 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	e020      	b.n	8002928 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a18      	ldr	r2, [pc, #96]	@ (800294c <HAL_ADC_Start_DMA+0x214>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d11b      	bne.n	8002928 <HAL_ADC_Start_DMA+0x1f0>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d114      	bne.n	8002928 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	e00b      	b.n	8002928 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f043 0210 	orr.w	r2, r3, #16
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000004 	.word	0x20000004
 8002938:	431bde83 	.word	0x431bde83
 800293c:	40012300 	.word	0x40012300
 8002940:	08002ddd 	.word	0x08002ddd
 8002944:	08002e97 	.word	0x08002e97
 8002948:	08002eb3 	.word	0x08002eb3
 800294c:	40012000 	.word	0x40012000
 8002950:	40012100 	.word	0x40012100
 8002954:	40012200 	.word	0x40012200

08002958 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x1c>
 8002998:	2302      	movs	r3, #2
 800299a:	e113      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x244>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b09      	cmp	r3, #9
 80029aa:	d925      	bls.n	80029f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68d9      	ldr	r1, [r3, #12]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	3b1e      	subs	r3, #30
 80029c2:	2207      	movs	r2, #7
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43da      	mvns	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	400a      	ands	r2, r1
 80029d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68d9      	ldr	r1, [r3, #12]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	4603      	mov	r3, r0
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4403      	add	r3, r0
 80029ea:	3b1e      	subs	r3, #30
 80029ec:	409a      	lsls	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	e022      	b.n	8002a3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6919      	ldr	r1, [r3, #16]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	400a      	ands	r2, r1
 8002a1a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6919      	ldr	r1, [r3, #16]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4403      	add	r3, r0
 8002a34:	409a      	lsls	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d824      	bhi.n	8002a90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	3b05      	subs	r3, #5
 8002a58:	221f      	movs	r2, #31
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	400a      	ands	r2, r1
 8002a66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4618      	mov	r0, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	3b05      	subs	r3, #5
 8002a82:	fa00 f203 	lsl.w	r2, r0, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a8e:	e04c      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b0c      	cmp	r3, #12
 8002a96:	d824      	bhi.n	8002ae2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b23      	subs	r3, #35	@ 0x23
 8002aaa:	221f      	movs	r2, #31
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3b23      	subs	r3, #35	@ 0x23
 8002ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ae0:	e023      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	3b41      	subs	r3, #65	@ 0x41
 8002af4:	221f      	movs	r2, #31
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	400a      	ands	r2, r1
 8002b02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	4618      	mov	r0, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b41      	subs	r3, #65	@ 0x41
 8002b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b2a:	4b29      	ldr	r3, [pc, #164]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x250>)
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a28      	ldr	r2, [pc, #160]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x254>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d10f      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x1d8>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b12      	cmp	r3, #18
 8002b3e:	d10b      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x254>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d12b      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x23a>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x258>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d003      	beq.n	8002b74 <HAL_ADC_ConfigChannel+0x1f4>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b11      	cmp	r3, #17
 8002b72:	d122      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a11      	ldr	r2, [pc, #68]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x258>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d111      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b96:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <HAL_ADC_ConfigChannel+0x25c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a11      	ldr	r2, [pc, #68]	@ (8002be0 <HAL_ADC_ConfigChannel+0x260>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	0c9a      	lsrs	r2, r3, #18
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bac:	e002      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40012300 	.word	0x40012300
 8002bd4:	40012000 	.word	0x40012000
 8002bd8:	10000012 	.word	0x10000012
 8002bdc:	20000004 	.word	0x20000004
 8002be0:	431bde83 	.word	0x431bde83

08002be4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bec:	4b79      	ldr	r3, [pc, #484]	@ (8002dd4 <ADC_Init+0x1f0>)
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	021a      	lsls	r2, r3, #8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6899      	ldr	r1, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c76:	4a58      	ldr	r2, [pc, #352]	@ (8002dd8 <ADC_Init+0x1f4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d022      	beq.n	8002cc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6899      	ldr	r1, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6899      	ldr	r1, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	e00f      	b.n	8002ce2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ce0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0202 	bic.w	r2, r2, #2
 8002cf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7e1b      	ldrb	r3, [r3, #24]
 8002cfc:	005a      	lsls	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01b      	beq.n	8002d48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d1e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	035a      	lsls	r2, r3, #13
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	e007      	b.n	8002d58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d56:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	051a      	lsls	r2, r3, #20
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6899      	ldr	r1, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d9a:	025a      	lsls	r2, r3, #9
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6899      	ldr	r1, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	029a      	lsls	r2, r3, #10
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40012300 	.word	0x40012300
 8002dd8:	0f000001 	.word	0x0f000001

08002ddc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d13c      	bne.n	8002e70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d12b      	bne.n	8002e68 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d127      	bne.n	8002e68 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d119      	bne.n	8002e68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0220 	bic.w	r2, r2, #32
 8002e42:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7fe ffa3 	bl	8001db4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e6e:	e00e      	b.n	8002e8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f7ff fd75 	bl	800296c <HAL_ADC_ErrorCallback>
}
 8002e82:	e004      	b.n	8002e8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	4798      	blx	r3
}
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f7fe ff75 	bl	8001d94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2240      	movs	r2, #64	@ 0x40
 8002ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f043 0204 	orr.w	r2, r3, #4
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f7ff fd4a 	bl	800296c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0ed      	b.n	80030e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff f818 	bl	8001f48 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f28:	f7ff faa6 	bl	8002478 <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f2e:	e012      	b.n	8002f56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f30:	f7ff faa2 	bl	8002478 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b0a      	cmp	r3, #10
 8002f3c:	d90b      	bls.n	8002f56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2205      	movs	r2, #5
 8002f4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0c5      	b.n	80030e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0e5      	beq.n	8002f30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0202 	bic.w	r2, r2, #2
 8002f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f74:	f7ff fa80 	bl	8002478 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f7a:	e012      	b.n	8002fa2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f7c:	f7ff fa7c 	bl	8002478 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b0a      	cmp	r3, #10
 8002f88:	d90b      	bls.n	8002fa2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2205      	movs	r2, #5
 8002f9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e09f      	b.n	80030e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e5      	bne.n	8002f7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7e1b      	ldrb	r3, [r3, #24]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d108      	bne.n	8002fca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e007      	b.n	8002fda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7e5b      	ldrb	r3, [r3, #25]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e007      	b.n	8003004 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003002:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7e9b      	ldrb	r3, [r3, #26]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d108      	bne.n	800301e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0220 	orr.w	r2, r2, #32
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e007      	b.n	800302e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0220 	bic.w	r2, r2, #32
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7edb      	ldrb	r3, [r3, #27]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d108      	bne.n	8003048 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0210 	bic.w	r2, r2, #16
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e007      	b.n	8003058 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0210 	orr.w	r2, r2, #16
 8003056:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7f1b      	ldrb	r3, [r3, #28]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d108      	bne.n	8003072 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0208 	orr.w	r2, r2, #8
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	e007      	b.n	8003082 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0208 	bic.w	r2, r2, #8
 8003080:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7f5b      	ldrb	r3, [r3, #29]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d108      	bne.n	800309c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0204 	orr.w	r2, r2, #4
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e007      	b.n	80030ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0204 	bic.w	r2, r2, #4
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	ea42 0103 	orr.w	r1, r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	1e5a      	subs	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003102:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d003      	beq.n	8003112 <HAL_CAN_ConfigFilter+0x26>
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	2b02      	cmp	r3, #2
 800310e:	f040 80be 	bne.w	800328e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003112:	4b65      	ldr	r3, [pc, #404]	@ (80032a8 <HAL_CAN_ConfigFilter+0x1bc>)
 8003114:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800312c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	431a      	orrs	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	2201      	movs	r2, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	43db      	mvns	r3, r3
 8003164:	401a      	ands	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d123      	bne.n	80031bc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	43db      	mvns	r3, r3
 800317e:	401a      	ands	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003196:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3248      	adds	r2, #72	@ 0x48
 800319c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	3348      	adds	r3, #72	@ 0x48
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d122      	bne.n	800320a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	3248      	adds	r2, #72	@ 0x48
 80031ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	3348      	adds	r3, #72	@ 0x48
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	43db      	mvns	r3, r3
 800321c:	401a      	ands	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003224:	e007      	b.n	8003236 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	431a      	orrs	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	43db      	mvns	r3, r3
 8003248:	401a      	ands	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003250:	e007      	b.n	8003262 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	431a      	orrs	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	431a      	orrs	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003280:	f023 0201 	bic.w	r2, r3, #1
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e006      	b.n	800329c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
  }
}
 800329c:	4618      	mov	r0, r3
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	40006400 	.word	0x40006400

080032ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d12e      	bne.n	800331e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032d8:	f7ff f8ce 	bl	8002478 <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032de:	e012      	b.n	8003306 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032e0:	f7ff f8ca 	bl	8002478 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b0a      	cmp	r3, #10
 80032ec:	d90b      	bls.n	8003306 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2205      	movs	r2, #5
 80032fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e012      	b.n	800332c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e5      	bne.n	80032e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	e006      	b.n	800332c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	@ 0x24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003348:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003352:	7ffb      	ldrb	r3, [r7, #31]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d003      	beq.n	8003360 <HAL_CAN_AddTxMessage+0x2c>
 8003358:	7ffb      	ldrb	r3, [r7, #31]
 800335a:	2b02      	cmp	r3, #2
 800335c:	f040 80ad 	bne.w	80034ba <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8095 	beq.w	80034aa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	0e1b      	lsrs	r3, r3, #24
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800338a:	2201      	movs	r2, #1
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	409a      	lsls	r2, r3
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10d      	bne.n	80033b8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033a6:	68f9      	ldr	r1, [r7, #12]
 80033a8:	6809      	ldr	r1, [r1, #0]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3318      	adds	r3, #24
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	440b      	add	r3, r1
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e00f      	b.n	80033d8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033c2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033c8:	68f9      	ldr	r1, [r7, #12]
 80033ca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033cc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	3318      	adds	r3, #24
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	440b      	add	r3, r1
 80033d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3318      	adds	r3, #24
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	440b      	add	r3, r1
 80033e8:	3304      	adds	r3, #4
 80033ea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	7d1b      	ldrb	r3, [r3, #20]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d111      	bne.n	8003418 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	3318      	adds	r3, #24
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	4413      	add	r3, r2
 8003400:	3304      	adds	r3, #4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	6811      	ldr	r1, [r2, #0]
 8003408:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	3318      	adds	r3, #24
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	440b      	add	r3, r1
 8003414:	3304      	adds	r3, #4
 8003416:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3307      	adds	r3, #7
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	061a      	lsls	r2, r3, #24
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3306      	adds	r3, #6
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	041b      	lsls	r3, r3, #16
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3305      	adds	r3, #5
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	021b      	lsls	r3, r3, #8
 8003432:	4313      	orrs	r3, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	3204      	adds	r2, #4
 8003438:	7812      	ldrb	r2, [r2, #0]
 800343a:	4610      	mov	r0, r2
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	6811      	ldr	r1, [r2, #0]
 8003440:	ea43 0200 	orr.w	r2, r3, r0
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	440b      	add	r3, r1
 800344a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800344e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3303      	adds	r3, #3
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	061a      	lsls	r2, r3, #24
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3302      	adds	r3, #2
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	041b      	lsls	r3, r3, #16
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3301      	adds	r3, #1
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	4313      	orrs	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	7812      	ldrb	r2, [r2, #0]
 8003470:	4610      	mov	r0, r2
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	6811      	ldr	r1, [r2, #0]
 8003476:	ea43 0200 	orr.w	r2, r3, r0
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	440b      	add	r3, r1
 8003480:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003484:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	3318      	adds	r3, #24
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	4413      	add	r3, r2
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	6811      	ldr	r1, [r2, #0]
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3318      	adds	r3, #24
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	440b      	add	r3, r1
 80034a4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e00e      	b.n	80034c8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e006      	b.n	80034c8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
  }
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3724      	adds	r7, #36	@ 0x24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d003      	beq.n	80034f8 <HAL_CAN_GetRxMessage+0x24>
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	f040 8103 	bne.w	80036fe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10e      	bne.n	800351c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d116      	bne.n	800353a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0f7      	b.n	800370c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d107      	bne.n	800353a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0e8      	b.n	800370c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	331b      	adds	r3, #27
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	4413      	add	r3, r2
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0204 	and.w	r2, r3, #4
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10c      	bne.n	8003572 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	331b      	adds	r3, #27
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	4413      	add	r3, r2
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	0d5b      	lsrs	r3, r3, #21
 8003568:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e00b      	b.n	800358a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	331b      	adds	r3, #27
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	4413      	add	r3, r2
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	08db      	lsrs	r3, r3, #3
 8003582:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	331b      	adds	r3, #27
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	4413      	add	r3, r2
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0202 	and.w	r2, r3, #2
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	331b      	adds	r3, #27
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	4413      	add	r3, r2
 80035ac:	3304      	adds	r3, #4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2208      	movs	r2, #8
 80035bc:	611a      	str	r2, [r3, #16]
 80035be:	e00b      	b.n	80035d8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	331b      	adds	r3, #27
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	4413      	add	r3, r2
 80035cc:	3304      	adds	r3, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	331b      	adds	r3, #27
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	331b      	adds	r3, #27
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	4413      	add	r3, r2
 80035fc:	3304      	adds	r3, #4
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	0c1b      	lsrs	r3, r3, #16
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	4413      	add	r3, r2
 8003612:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	4413      	add	r3, r2
 8003628:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	0a1a      	lsrs	r2, r3, #8
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	3301      	adds	r3, #1
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	4413      	add	r3, r2
 8003642:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0c1a      	lsrs	r2, r3, #16
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	3302      	adds	r3, #2
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	4413      	add	r3, r2
 800365c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	0e1a      	lsrs	r2, r3, #24
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	3303      	adds	r3, #3
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	4413      	add	r3, r2
 8003676:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	3304      	adds	r3, #4
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	4413      	add	r3, r2
 800368e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0a1a      	lsrs	r2, r3, #8
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	3305      	adds	r3, #5
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	0c1a      	lsrs	r2, r3, #16
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	3306      	adds	r3, #6
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0e1a      	lsrs	r2, r3, #24
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	3307      	adds	r3, #7
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d108      	bne.n	80036ea <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0220 	orr.w	r2, r2, #32
 80036e6:	60da      	str	r2, [r3, #12]
 80036e8:	e007      	b.n	80036fa <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0220 	orr.w	r2, r2, #32
 80036f8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e006      	b.n	800370c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
  }
}
 800370c:	4618      	mov	r0, r3
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003728:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d002      	beq.n	8003736 <HAL_CAN_ActivateNotification+0x1e>
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d109      	bne.n	800374a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6959      	ldr	r1, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e006      	b.n	8003758 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	@ 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800376c:	2300      	movs	r3, #0
 800376e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d07c      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d023      	beq.n	80037fc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2201      	movs	r2, #1
 80037ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f983 	bl	8003ad2 <HAL_CAN_TxMailbox0CompleteCallback>
 80037cc:	e016      	b.n	80037fc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e0:	e00c      	b.n	80037fc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f4:	e002      	b.n	80037fc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f989 	bl	8003b0e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d024      	beq.n	8003850 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800380e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f963 	bl	8003ae6 <HAL_CAN_TxMailbox1CompleteCallback>
 8003820:	e016      	b.n	8003850 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d004      	beq.n	8003836 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
 8003834:	e00c      	b.n	8003850 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
 8003848:	e002      	b.n	8003850 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f969 	bl	8003b22 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d024      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003862:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f943 	bl	8003afa <HAL_CAN_TxMailbox2CompleteCallback>
 8003874:	e016      	b.n	80038a4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
 8003888:	e00c      	b.n	80038a4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
 800389c:	e002      	b.n	80038a4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f949 	bl	8003b36 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00c      	beq.n	80038c8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038be:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2210      	movs	r2, #16
 80038c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d006      	beq.n	80038ea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2208      	movs	r2, #8
 80038e2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f930 	bl	8003b4a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d009      	beq.n	8003908 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fe fa66 	bl	8001dd4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00c      	beq.n	800392c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2210      	movs	r2, #16
 800392a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d006      	beq.n	800394e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f912 	bl	8003b72 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f8f9 	bl	8003b5e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2210      	movs	r2, #16
 8003986:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f8fc 	bl	8003b86 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d006      	beq.n	80039b0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2208      	movs	r2, #8
 80039a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8f5 	bl	8003b9a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d07b      	beq.n	8003ab2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d072      	beq.n	8003aaa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f6:	f043 0302 	orr.w	r3, r3, #2
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	f043 0304 	orr.w	r3, r3, #4
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d043      	beq.n	8003aaa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d03e      	beq.n	8003aaa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a32:	2b60      	cmp	r3, #96	@ 0x60
 8003a34:	d02b      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x32a>
 8003a36:	2b60      	cmp	r3, #96	@ 0x60
 8003a38:	d82e      	bhi.n	8003a98 <HAL_CAN_IRQHandler+0x334>
 8003a3a:	2b50      	cmp	r3, #80	@ 0x50
 8003a3c:	d022      	beq.n	8003a84 <HAL_CAN_IRQHandler+0x320>
 8003a3e:	2b50      	cmp	r3, #80	@ 0x50
 8003a40:	d82a      	bhi.n	8003a98 <HAL_CAN_IRQHandler+0x334>
 8003a42:	2b40      	cmp	r3, #64	@ 0x40
 8003a44:	d019      	beq.n	8003a7a <HAL_CAN_IRQHandler+0x316>
 8003a46:	2b40      	cmp	r3, #64	@ 0x40
 8003a48:	d826      	bhi.n	8003a98 <HAL_CAN_IRQHandler+0x334>
 8003a4a:	2b30      	cmp	r3, #48	@ 0x30
 8003a4c:	d010      	beq.n	8003a70 <HAL_CAN_IRQHandler+0x30c>
 8003a4e:	2b30      	cmp	r3, #48	@ 0x30
 8003a50:	d822      	bhi.n	8003a98 <HAL_CAN_IRQHandler+0x334>
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d002      	beq.n	8003a5c <HAL_CAN_IRQHandler+0x2f8>
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d005      	beq.n	8003a66 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a5a:	e01d      	b.n	8003a98 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	f043 0308 	orr.w	r3, r3, #8
 8003a62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a64:	e019      	b.n	8003a9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	f043 0310 	orr.w	r3, r3, #16
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a6e:	e014      	b.n	8003a9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	f043 0320 	orr.w	r3, r3, #32
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a78:	e00f      	b.n	8003a9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a82:	e00a      	b.n	8003a9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a8c:	e005      	b.n	8003a9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a96:	e000      	b.n	8003a9a <HAL_CAN_IRQHandler+0x336>
            break;
 8003a98:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003aa8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2204      	movs	r2, #4
 8003ab0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f872 	bl	8003bae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003aca:	bf00      	nop
 8003acc:	3728      	adds	r7, #40	@ 0x28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003be0:	4013      	ands	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf6:	4a04      	ldr	r2, [pc, #16]	@ (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	60d3      	str	r3, [r2, #12]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c10:	4b04      	ldr	r3, [pc, #16]	@ (8003c24 <__NVIC_GetPriorityGrouping+0x18>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	f003 0307 	and.w	r3, r3, #7
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db0b      	blt.n	8003c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	f003 021f 	and.w	r2, r3, #31
 8003c40:	4907      	ldr	r1, [pc, #28]	@ (8003c60 <__NVIC_EnableIRQ+0x38>)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2001      	movs	r0, #1
 8003c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e100 	.word	0xe000e100

08003c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	db0a      	blt.n	8003c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	490c      	ldr	r1, [pc, #48]	@ (8003cb0 <__NVIC_SetPriority+0x4c>)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	440b      	add	r3, r1
 8003c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c8c:	e00a      	b.n	8003ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4908      	ldr	r1, [pc, #32]	@ (8003cb4 <__NVIC_SetPriority+0x50>)
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	3b04      	subs	r3, #4
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	761a      	strb	r2, [r3, #24]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000e100 	.word	0xe000e100
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	@ 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f1c3 0307 	rsb	r3, r3, #7
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	bf28      	it	cs
 8003cd6:	2304      	movcs	r3, #4
 8003cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d902      	bls.n	8003ce8 <NVIC_EncodePriority+0x30>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3b03      	subs	r3, #3
 8003ce6:	e000      	b.n	8003cea <NVIC_EncodePriority+0x32>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d00:	f04f 31ff 	mov.w	r1, #4294967295
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	43d9      	mvns	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	4313      	orrs	r3, r2
         );
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3724      	adds	r7, #36	@ 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d30:	d301      	bcc.n	8003d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00f      	b.n	8003d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d36:	4a0a      	ldr	r2, [pc, #40]	@ (8003d60 <SysTick_Config+0x40>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d3e:	210f      	movs	r1, #15
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	f7ff ff8e 	bl	8003c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d48:	4b05      	ldr	r3, [pc, #20]	@ (8003d60 <SysTick_Config+0x40>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d4e:	4b04      	ldr	r3, [pc, #16]	@ (8003d60 <SysTick_Config+0x40>)
 8003d50:	2207      	movs	r2, #7
 8003d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	e000e010 	.word	0xe000e010

08003d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff ff29 	bl	8003bc4 <__NVIC_SetPriorityGrouping>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	4603      	mov	r3, r0
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d8c:	f7ff ff3e 	bl	8003c0c <__NVIC_GetPriorityGrouping>
 8003d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	6978      	ldr	r0, [r7, #20]
 8003d98:	f7ff ff8e 	bl	8003cb8 <NVIC_EncodePriority>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ff5d 	bl	8003c64 <__NVIC_SetPriority>
}
 8003daa:	bf00      	nop
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	4603      	mov	r3, r0
 8003dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff31 	bl	8003c28 <__NVIC_EnableIRQ>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ffa2 	bl	8003d20 <SysTick_Config>
 8003ddc:	4603      	mov	r3, r0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003df4:	f7fe fb40 	bl	8002478 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e099      	b.n	8003f38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e24:	e00f      	b.n	8003e46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e26:	f7fe fb27 	bl	8002478 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d908      	bls.n	8003e46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e078      	b.n	8003f38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e8      	bne.n	8003e26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4b38      	ldr	r3, [pc, #224]	@ (8003f40 <HAL_DMA_Init+0x158>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d107      	bne.n	8003eb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 0307 	bic.w	r3, r3, #7
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d117      	bne.n	8003f0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00e      	beq.n	8003f0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fa6f 	bl	80043d0 <DMA_CheckFifoParam>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2240      	movs	r2, #64	@ 0x40
 8003efc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003f06:	2301      	movs	r3, #1
 8003f08:	e016      	b.n	8003f38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa26 	bl	8004364 <DMA_CalcBaseAndBitshift>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f20:	223f      	movs	r2, #63	@ 0x3f
 8003f22:	409a      	lsls	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	f010803f 	.word	0xf010803f

08003f44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_DMA_Start_IT+0x26>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e040      	b.n	8003fec <HAL_DMA_Start_IT+0xa8>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d12f      	bne.n	8003fde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2202      	movs	r2, #2
 8003f82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f9b8 	bl	8004308 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9c:	223f      	movs	r2, #63	@ 0x3f
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0216 	orr.w	r2, r2, #22
 8003fb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0208 	orr.w	r2, r2, #8
 8003fca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e005      	b.n	8003fea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004000:	4b8e      	ldr	r3, [pc, #568]	@ (800423c <HAL_DMA_IRQHandler+0x248>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a8e      	ldr	r2, [pc, #568]	@ (8004240 <HAL_DMA_IRQHandler+0x24c>)
 8004006:	fba2 2303 	umull	r2, r3, r2, r3
 800400a:	0a9b      	lsrs	r3, r3, #10
 800400c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004012:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401e:	2208      	movs	r2, #8
 8004020:	409a      	lsls	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01a      	beq.n	8004060 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0204 	bic.w	r2, r2, #4
 8004046:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404c:	2208      	movs	r2, #8
 800404e:	409a      	lsls	r2, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004064:	2201      	movs	r2, #1
 8004066:	409a      	lsls	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d012      	beq.n	8004096 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00b      	beq.n	8004096 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004082:	2201      	movs	r2, #1
 8004084:	409a      	lsls	r2, r3
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408e:	f043 0202 	orr.w	r2, r3, #2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409a:	2204      	movs	r2, #4
 800409c:	409a      	lsls	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d012      	beq.n	80040cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	2204      	movs	r2, #4
 80040ba:	409a      	lsls	r2, r3
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c4:	f043 0204 	orr.w	r2, r3, #4
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d0:	2210      	movs	r2, #16
 80040d2:	409a      	lsls	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d043      	beq.n	8004164 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d03c      	beq.n	8004164 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ee:	2210      	movs	r2, #16
 80040f0:	409a      	lsls	r2, r3
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d018      	beq.n	8004136 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d108      	bne.n	8004124 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d024      	beq.n	8004164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
 8004122:	e01f      	b.n	8004164 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01b      	beq.n	8004164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
 8004134:	e016      	b.n	8004164 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d107      	bne.n	8004154 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0208 	bic.w	r2, r2, #8
 8004152:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004168:	2220      	movs	r2, #32
 800416a:	409a      	lsls	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 808f 	beq.w	8004294 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8087 	beq.w	8004294 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418a:	2220      	movs	r2, #32
 800418c:	409a      	lsls	r2, r3
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b05      	cmp	r3, #5
 800419c:	d136      	bne.n	800420c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0216 	bic.w	r2, r2, #22
 80041ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695a      	ldr	r2, [r3, #20]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d103      	bne.n	80041ce <HAL_DMA_IRQHandler+0x1da>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0208 	bic.w	r2, r2, #8
 80041dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e2:	223f      	movs	r2, #63	@ 0x3f
 80041e4:	409a      	lsls	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d07e      	beq.n	8004300 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
        }
        return;
 800420a:	e079      	b.n	8004300 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01d      	beq.n	8004256 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10d      	bne.n	8004244 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422c:	2b00      	cmp	r3, #0
 800422e:	d031      	beq.n	8004294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4798      	blx	r3
 8004238:	e02c      	b.n	8004294 <HAL_DMA_IRQHandler+0x2a0>
 800423a:	bf00      	nop
 800423c:	20000004 	.word	0x20000004
 8004240:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d023      	beq.n	8004294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	4798      	blx	r3
 8004254:	e01e      	b.n	8004294 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10f      	bne.n	8004284 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0210 	bic.w	r2, r2, #16
 8004272:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004298:	2b00      	cmp	r3, #0
 800429a:	d032      	beq.n	8004302 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2205      	movs	r2, #5
 80042ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	3301      	adds	r3, #1
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d307      	bcc.n	80042dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f2      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x2cc>
 80042da:	e000      	b.n	80042de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
 80042fe:	e000      	b.n	8004302 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004300:	bf00      	nop
    }
  }
}
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004324:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b40      	cmp	r3, #64	@ 0x40
 8004334:	d108      	bne.n	8004348 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004346:	e007      	b.n	8004358 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	3b10      	subs	r3, #16
 8004374:	4a14      	ldr	r2, [pc, #80]	@ (80043c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800437e:	4a13      	ldr	r2, [pc, #76]	@ (80043cc <DMA_CalcBaseAndBitshift+0x68>)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b03      	cmp	r3, #3
 8004390:	d909      	bls.n	80043a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	1d1a      	adds	r2, r3, #4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80043a4:	e007      	b.n	80043b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	aaaaaaab 	.word	0xaaaaaaab
 80043cc:	08009564 	.word	0x08009564

080043d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d11f      	bne.n	800442a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d856      	bhi.n	800449e <DMA_CheckFifoParam+0xce>
 80043f0:	a201      	add	r2, pc, #4	@ (adr r2, 80043f8 <DMA_CheckFifoParam+0x28>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	08004409 	.word	0x08004409
 80043fc:	0800441b 	.word	0x0800441b
 8004400:	08004409 	.word	0x08004409
 8004404:	0800449f 	.word	0x0800449f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d046      	beq.n	80044a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004418:	e043      	b.n	80044a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004422:	d140      	bne.n	80044a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004428:	e03d      	b.n	80044a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004432:	d121      	bne.n	8004478 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d837      	bhi.n	80044aa <DMA_CheckFifoParam+0xda>
 800443a:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <DMA_CheckFifoParam+0x70>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004451 	.word	0x08004451
 8004444:	08004457 	.word	0x08004457
 8004448:	08004451 	.word	0x08004451
 800444c:	08004469 	.word	0x08004469
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      break;
 8004454:	e030      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d025      	beq.n	80044ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004466:	e022      	b.n	80044ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004470:	d11f      	bne.n	80044b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004476:	e01c      	b.n	80044b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d903      	bls.n	8004486 <DMA_CheckFifoParam+0xb6>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d003      	beq.n	800448c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004484:	e018      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
      break;
 800448a:	e015      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004490:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00e      	beq.n	80044b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
      break;
 800449c:	e00b      	b.n	80044b6 <DMA_CheckFifoParam+0xe6>
      break;
 800449e:	bf00      	nop
 80044a0:	e00a      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044a2:	bf00      	nop
 80044a4:	e008      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044a6:	bf00      	nop
 80044a8:	e006      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044aa:	bf00      	nop
 80044ac:	e004      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044b6:	bf00      	nop
    }
  } 
  
  return status; 
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop

080044c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	@ 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e165      	b.n	80047b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044e4:	2201      	movs	r2, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	f040 8154 	bne.w	80047aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d005      	beq.n	800451a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004516:	2b02      	cmp	r3, #2
 8004518:	d130      	bne.n	800457c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	2203      	movs	r2, #3
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004550:	2201      	movs	r2, #1
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 0201 	and.w	r2, r3, #1
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	2b03      	cmp	r3, #3
 8004586:	d017      	beq.n	80045b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d123      	bne.n	800460c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	08da      	lsrs	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3208      	adds	r2, #8
 80045cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	220f      	movs	r2, #15
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	08da      	lsrs	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3208      	adds	r2, #8
 8004606:	69b9      	ldr	r1, [r7, #24]
 8004608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2203      	movs	r2, #3
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0203 	and.w	r2, r3, #3
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80ae 	beq.w	80047aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	4b5d      	ldr	r3, [pc, #372]	@ (80047c8 <HAL_GPIO_Init+0x300>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	4a5c      	ldr	r2, [pc, #368]	@ (80047c8 <HAL_GPIO_Init+0x300>)
 8004658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800465c:	6453      	str	r3, [r2, #68]	@ 0x44
 800465e:	4b5a      	ldr	r3, [pc, #360]	@ (80047c8 <HAL_GPIO_Init+0x300>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800466a:	4a58      	ldr	r2, [pc, #352]	@ (80047cc <HAL_GPIO_Init+0x304>)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4f      	ldr	r2, [pc, #316]	@ (80047d0 <HAL_GPIO_Init+0x308>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d025      	beq.n	80046e2 <HAL_GPIO_Init+0x21a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4e      	ldr	r2, [pc, #312]	@ (80047d4 <HAL_GPIO_Init+0x30c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01f      	beq.n	80046de <HAL_GPIO_Init+0x216>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4d      	ldr	r2, [pc, #308]	@ (80047d8 <HAL_GPIO_Init+0x310>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d019      	beq.n	80046da <HAL_GPIO_Init+0x212>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a4c      	ldr	r2, [pc, #304]	@ (80047dc <HAL_GPIO_Init+0x314>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <HAL_GPIO_Init+0x20e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a4b      	ldr	r2, [pc, #300]	@ (80047e0 <HAL_GPIO_Init+0x318>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00d      	beq.n	80046d2 <HAL_GPIO_Init+0x20a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4a      	ldr	r2, [pc, #296]	@ (80047e4 <HAL_GPIO_Init+0x31c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <HAL_GPIO_Init+0x206>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a49      	ldr	r2, [pc, #292]	@ (80047e8 <HAL_GPIO_Init+0x320>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_GPIO_Init+0x202>
 80046c6:	2306      	movs	r3, #6
 80046c8:	e00c      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046ca:	2307      	movs	r3, #7
 80046cc:	e00a      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046ce:	2305      	movs	r3, #5
 80046d0:	e008      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046d2:	2304      	movs	r3, #4
 80046d4:	e006      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046d6:	2303      	movs	r3, #3
 80046d8:	e004      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046da:	2302      	movs	r3, #2
 80046dc:	e002      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046e2:	2300      	movs	r3, #0
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	f002 0203 	and.w	r2, r2, #3
 80046ea:	0092      	lsls	r2, r2, #2
 80046ec:	4093      	lsls	r3, r2
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046f4:	4935      	ldr	r1, [pc, #212]	@ (80047cc <HAL_GPIO_Init+0x304>)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	3302      	adds	r3, #2
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004702:	4b3a      	ldr	r3, [pc, #232]	@ (80047ec <HAL_GPIO_Init+0x324>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	43db      	mvns	r3, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4013      	ands	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004726:	4a31      	ldr	r2, [pc, #196]	@ (80047ec <HAL_GPIO_Init+0x324>)
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800472c:	4b2f      	ldr	r3, [pc, #188]	@ (80047ec <HAL_GPIO_Init+0x324>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004750:	4a26      	ldr	r2, [pc, #152]	@ (80047ec <HAL_GPIO_Init+0x324>)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004756:	4b25      	ldr	r3, [pc, #148]	@ (80047ec <HAL_GPIO_Init+0x324>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	43db      	mvns	r3, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4013      	ands	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800477a:	4a1c      	ldr	r2, [pc, #112]	@ (80047ec <HAL_GPIO_Init+0x324>)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004780:	4b1a      	ldr	r3, [pc, #104]	@ (80047ec <HAL_GPIO_Init+0x324>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047a4:	4a11      	ldr	r2, [pc, #68]	@ (80047ec <HAL_GPIO_Init+0x324>)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3301      	adds	r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b0f      	cmp	r3, #15
 80047b4:	f67f ae96 	bls.w	80044e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	3724      	adds	r7, #36	@ 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40013800 	.word	0x40013800
 80047d0:	40020000 	.word	0x40020000
 80047d4:	40020400 	.word	0x40020400
 80047d8:	40020800 	.word	0x40020800
 80047dc:	40020c00 	.word	0x40020c00
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40021400 	.word	0x40021400
 80047e8:	40021800 	.word	0x40021800
 80047ec:	40013c00 	.word	0x40013c00

080047f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	807b      	strh	r3, [r7, #2]
 80047fc:	4613      	mov	r3, r2
 80047fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004800:	787b      	ldrb	r3, [r7, #1]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004806:	887a      	ldrh	r2, [r7, #2]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800480c:	e003      	b.n	8004816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800480e:	887b      	ldrh	r3, [r7, #2]
 8004810:	041a      	lsls	r2, r3, #16
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	619a      	str	r2, [r3, #24]
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0cc      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004838:	4b68      	ldr	r3, [pc, #416]	@ (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d90c      	bls.n	8004860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b65      	ldr	r3, [pc, #404]	@ (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b63      	ldr	r3, [pc, #396]	@ (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0b8      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d020      	beq.n	80048ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004878:	4b59      	ldr	r3, [pc, #356]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4a58      	ldr	r2, [pc, #352]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004890:	4b53      	ldr	r3, [pc, #332]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a52      	ldr	r2, [pc, #328]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800489a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489c:	4b50      	ldr	r3, [pc, #320]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	494d      	ldr	r1, [pc, #308]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d044      	beq.n	8004944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	4b47      	ldr	r3, [pc, #284]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d119      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e07f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d003      	beq.n	80048e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e2:	4b3f      	ldr	r3, [pc, #252]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e06f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f2:	4b3b      	ldr	r3, [pc, #236]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e067      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004902:	4b37      	ldr	r3, [pc, #220]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f023 0203 	bic.w	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4934      	ldr	r1, [pc, #208]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	4313      	orrs	r3, r2
 8004912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004914:	f7fd fdb0 	bl	8002478 <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7fd fdac 	bl	8002478 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e04f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	4b2b      	ldr	r3, [pc, #172]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 020c 	and.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d1eb      	bne.n	800491c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004944:	4b25      	ldr	r3, [pc, #148]	@ (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d20c      	bcs.n	800496c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b22      	ldr	r3, [pc, #136]	@ (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b20      	ldr	r3, [pc, #128]	@ (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e032      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004978:	4b19      	ldr	r3, [pc, #100]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4916      	ldr	r1, [pc, #88]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004996:	4b12      	ldr	r3, [pc, #72]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	490e      	ldr	r1, [pc, #56]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049aa:	f000 f855 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 80049ae:	4602      	mov	r2, r0
 80049b0:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	490a      	ldr	r1, [pc, #40]	@ (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	5ccb      	ldrb	r3, [r1, r3]
 80049be:	fa22 f303 	lsr.w	r3, r2, r3
 80049c2:	4a09      	ldr	r2, [pc, #36]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049c6:	4b09      	ldr	r3, [pc, #36]	@ (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fd fd10 	bl	80023f0 <HAL_InitTick>

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40023c00 	.word	0x40023c00
 80049e0:	40023800 	.word	0x40023800
 80049e4:	0800954c 	.word	0x0800954c
 80049e8:	20000004 	.word	0x20000004
 80049ec:	20000008 	.word	0x20000008

080049f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f4:	4b03      	ldr	r3, [pc, #12]	@ (8004a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000004 	.word	0x20000004

08004a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a0c:	f7ff fff0 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	0a9b      	lsrs	r3, r3, #10
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4903      	ldr	r1, [pc, #12]	@ (8004a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	0800955c 	.word	0x0800955c

08004a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a34:	f7ff ffdc 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	0b5b      	lsrs	r3, r3, #13
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	4903      	ldr	r1, [pc, #12]	@ (8004a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a46:	5ccb      	ldrb	r3, [r1, r3]
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40023800 	.word	0x40023800
 8004a54:	0800955c 	.word	0x0800955c

08004a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a5c:	b0ae      	sub	sp, #184	@ 0xb8
 8004a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a7e:	4bcb      	ldr	r3, [pc, #812]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x354>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	f200 8206 	bhi.w	8004e98 <HAL_RCC_GetSysClockFreq+0x440>
 8004a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a94 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004ac9 	.word	0x08004ac9
 8004a98:	08004e99 	.word	0x08004e99
 8004a9c:	08004e99 	.word	0x08004e99
 8004aa0:	08004e99 	.word	0x08004e99
 8004aa4:	08004ad1 	.word	0x08004ad1
 8004aa8:	08004e99 	.word	0x08004e99
 8004aac:	08004e99 	.word	0x08004e99
 8004ab0:	08004e99 	.word	0x08004e99
 8004ab4:	08004ad9 	.word	0x08004ad9
 8004ab8:	08004e99 	.word	0x08004e99
 8004abc:	08004e99 	.word	0x08004e99
 8004ac0:	08004e99 	.word	0x08004e99
 8004ac4:	08004cc9 	.word	0x08004cc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ac8:	4bb9      	ldr	r3, [pc, #740]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004aca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004ace:	e1e7      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ad0:	4bb8      	ldr	r3, [pc, #736]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ad6:	e1e3      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ad8:	4bb4      	ldr	r3, [pc, #720]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x354>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ae4:	4bb1      	ldr	r3, [pc, #708]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x354>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d071      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af0:	4bae      	ldr	r3, [pc, #696]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x354>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	099b      	lsrs	r3, r3, #6
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004afc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b16:	4622      	mov	r2, r4
 8004b18:	462b      	mov	r3, r5
 8004b1a:	f04f 0000 	mov.w	r0, #0
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	0159      	lsls	r1, r3, #5
 8004b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b28:	0150      	lsls	r0, r2, #5
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4621      	mov	r1, r4
 8004b30:	1a51      	subs	r1, r2, r1
 8004b32:	6439      	str	r1, [r7, #64]	@ 0x40
 8004b34:	4629      	mov	r1, r5
 8004b36:	eb63 0301 	sbc.w	r3, r3, r1
 8004b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004b48:	4649      	mov	r1, r9
 8004b4a:	018b      	lsls	r3, r1, #6
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b52:	4641      	mov	r1, r8
 8004b54:	018a      	lsls	r2, r1, #6
 8004b56:	4641      	mov	r1, r8
 8004b58:	1a51      	subs	r1, r2, r1
 8004b5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004b70:	4649      	mov	r1, r9
 8004b72:	00cb      	lsls	r3, r1, #3
 8004b74:	4641      	mov	r1, r8
 8004b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	00ca      	lsls	r2, r1, #3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	4622      	mov	r2, r4
 8004b86:	189b      	adds	r3, r3, r2
 8004b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b8a:	462b      	mov	r3, r5
 8004b8c:	460a      	mov	r2, r1
 8004b8e:	eb42 0303 	adc.w	r3, r2, r3
 8004b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	024b      	lsls	r3, r1, #9
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004baa:	4621      	mov	r1, r4
 8004bac:	024a      	lsls	r2, r1, #9
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bc0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004bc4:	f7fc f810 	bl	8000be8 <__aeabi_uldivmod>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4613      	mov	r3, r2
 8004bce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bd2:	e067      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd4:	4b75      	ldr	r3, [pc, #468]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x354>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	099b      	lsrs	r3, r3, #6
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004be0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bee:	2300      	movs	r3, #0
 8004bf0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bf2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	f04f 0000 	mov.w	r0, #0
 8004bfe:	f04f 0100 	mov.w	r1, #0
 8004c02:	0159      	lsls	r1, r3, #5
 8004c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c08:	0150      	lsls	r0, r2, #5
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4621      	mov	r1, r4
 8004c10:	1a51      	subs	r1, r2, r1
 8004c12:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c14:	4629      	mov	r1, r5
 8004c16:	eb63 0301 	sbc.w	r3, r3, r1
 8004c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004c28:	4649      	mov	r1, r9
 8004c2a:	018b      	lsls	r3, r1, #6
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c32:	4641      	mov	r1, r8
 8004c34:	018a      	lsls	r2, r1, #6
 8004c36:	4641      	mov	r1, r8
 8004c38:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c3c:	4649      	mov	r1, r9
 8004c3e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c4e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c56:	4692      	mov	sl, r2
 8004c58:	469b      	mov	fp, r3
 8004c5a:	4623      	mov	r3, r4
 8004c5c:	eb1a 0303 	adds.w	r3, sl, r3
 8004c60:	623b      	str	r3, [r7, #32]
 8004c62:	462b      	mov	r3, r5
 8004c64:	eb4b 0303 	adc.w	r3, fp, r3
 8004c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c76:	4629      	mov	r1, r5
 8004c78:	028b      	lsls	r3, r1, #10
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c80:	4621      	mov	r1, r4
 8004c82:	028a      	lsls	r2, r1, #10
 8004c84:	4610      	mov	r0, r2
 8004c86:	4619      	mov	r1, r3
 8004c88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c90:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c92:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c96:	f7fb ffa7 	bl	8000be8 <__aeabi_uldivmod>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ca4:	4b41      	ldr	r3, [pc, #260]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x354>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004cb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cc6:	e0eb      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cc8:	4b38      	ldr	r3, [pc, #224]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x354>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cd4:	4b35      	ldr	r3, [pc, #212]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x354>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d06b      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce0:	4b32      	ldr	r3, [pc, #200]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x354>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	099b      	lsrs	r3, r3, #6
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cf8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004cfc:	4622      	mov	r2, r4
 8004cfe:	462b      	mov	r3, r5
 8004d00:	f04f 0000 	mov.w	r0, #0
 8004d04:	f04f 0100 	mov.w	r1, #0
 8004d08:	0159      	lsls	r1, r3, #5
 8004d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d0e:	0150      	lsls	r0, r2, #5
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4621      	mov	r1, r4
 8004d16:	1a51      	subs	r1, r2, r1
 8004d18:	61b9      	str	r1, [r7, #24]
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	eb63 0301 	sbc.w	r3, r3, r1
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d2e:	4659      	mov	r1, fp
 8004d30:	018b      	lsls	r3, r1, #6
 8004d32:	4651      	mov	r1, sl
 8004d34:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d38:	4651      	mov	r1, sl
 8004d3a:	018a      	lsls	r2, r1, #6
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	ebb2 0801 	subs.w	r8, r2, r1
 8004d42:	4659      	mov	r1, fp
 8004d44:	eb63 0901 	sbc.w	r9, r3, r1
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d5c:	4690      	mov	r8, r2
 8004d5e:	4699      	mov	r9, r3
 8004d60:	4623      	mov	r3, r4
 8004d62:	eb18 0303 	adds.w	r3, r8, r3
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	462b      	mov	r3, r5
 8004d6a:	eb49 0303 	adc.w	r3, r9, r3
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	024b      	lsls	r3, r1, #9
 8004d80:	4621      	mov	r1, r4
 8004d82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d86:	4621      	mov	r1, r4
 8004d88:	024a      	lsls	r2, r1, #9
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d92:	2200      	movs	r2, #0
 8004d94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d96:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d9c:	f7fb ff24 	bl	8000be8 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4613      	mov	r3, r2
 8004da6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004daa:	e065      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x420>
 8004dac:	40023800 	.word	0x40023800
 8004db0:	00f42400 	.word	0x00f42400
 8004db4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db8:	4b3d      	ldr	r3, [pc, #244]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	099b      	lsrs	r3, r3, #6
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dca:	2300      	movs	r3, #0
 8004dcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004dd2:	4642      	mov	r2, r8
 8004dd4:	464b      	mov	r3, r9
 8004dd6:	f04f 0000 	mov.w	r0, #0
 8004dda:	f04f 0100 	mov.w	r1, #0
 8004dde:	0159      	lsls	r1, r3, #5
 8004de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004de4:	0150      	lsls	r0, r2, #5
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4641      	mov	r1, r8
 8004dec:	1a51      	subs	r1, r2, r1
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	4649      	mov	r1, r9
 8004df2:	eb63 0301 	sbc.w	r3, r3, r1
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004e04:	4659      	mov	r1, fp
 8004e06:	018b      	lsls	r3, r1, #6
 8004e08:	4651      	mov	r1, sl
 8004e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e0e:	4651      	mov	r1, sl
 8004e10:	018a      	lsls	r2, r1, #6
 8004e12:	4651      	mov	r1, sl
 8004e14:	1a54      	subs	r4, r2, r1
 8004e16:	4659      	mov	r1, fp
 8004e18:	eb63 0501 	sbc.w	r5, r3, r1
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	00eb      	lsls	r3, r5, #3
 8004e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e2a:	00e2      	lsls	r2, r4, #3
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	461d      	mov	r5, r3
 8004e30:	4643      	mov	r3, r8
 8004e32:	18e3      	adds	r3, r4, r3
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	464b      	mov	r3, r9
 8004e38:	eb45 0303 	adc.w	r3, r5, r3
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	028b      	lsls	r3, r1, #10
 8004e4e:	4621      	mov	r1, r4
 8004e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e54:	4621      	mov	r1, r4
 8004e56:	028a      	lsls	r2, r1, #10
 8004e58:	4610      	mov	r0, r2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e60:	2200      	movs	r2, #0
 8004e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e64:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e6a:	f7fb febd 	bl	8000be8 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4613      	mov	r3, r2
 8004e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e78:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	0f1b      	lsrs	r3, r3, #28
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e96:	e003      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ea0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	37b8      	adds	r7, #184	@ 0xb8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eae:	bf00      	nop
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	00f42400 	.word	0x00f42400

08004eb8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e28d      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8083 	beq.w	8004fde <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ed8:	4b94      	ldr	r3, [pc, #592]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 030c 	and.w	r3, r3, #12
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d019      	beq.n	8004f18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ee4:	4b91      	ldr	r3, [pc, #580]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d106      	bne.n	8004efe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ef0:	4b8e      	ldr	r3, [pc, #568]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004efc:	d00c      	beq.n	8004f18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004efe:	4b8b      	ldr	r3, [pc, #556]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f06:	2b0c      	cmp	r3, #12
 8004f08:	d112      	bne.n	8004f30 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f0a:	4b88      	ldr	r3, [pc, #544]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f16:	d10b      	bne.n	8004f30 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f18:	4b84      	ldr	r3, [pc, #528]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d05b      	beq.n	8004fdc <HAL_RCC_OscConfig+0x124>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d157      	bne.n	8004fdc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e25a      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f38:	d106      	bne.n	8004f48 <HAL_RCC_OscConfig+0x90>
 8004f3a:	4b7c      	ldr	r3, [pc, #496]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a7b      	ldr	r2, [pc, #492]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	e01d      	b.n	8004f84 <HAL_RCC_OscConfig+0xcc>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCC_OscConfig+0xb4>
 8004f52:	4b76      	ldr	r3, [pc, #472]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a75      	ldr	r2, [pc, #468]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	4b73      	ldr	r3, [pc, #460]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a72      	ldr	r2, [pc, #456]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	e00b      	b.n	8004f84 <HAL_RCC_OscConfig+0xcc>
 8004f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a6e      	ldr	r2, [pc, #440]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	4b6c      	ldr	r3, [pc, #432]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a6b      	ldr	r2, [pc, #428]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d013      	beq.n	8004fb4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8c:	f7fd fa74 	bl	8002478 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f94:	f7fd fa70 	bl	8002478 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b64      	cmp	r3, #100	@ 0x64
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e21f      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa6:	4b61      	ldr	r3, [pc, #388]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f0      	beq.n	8004f94 <HAL_RCC_OscConfig+0xdc>
 8004fb2:	e014      	b.n	8004fde <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb4:	f7fd fa60 	bl	8002478 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fbc:	f7fd fa5c 	bl	8002478 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	@ 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e20b      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fce:	4b57      	ldr	r3, [pc, #348]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f0      	bne.n	8004fbc <HAL_RCC_OscConfig+0x104>
 8004fda:	e000      	b.n	8004fde <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d06f      	beq.n	80050ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fea:	4b50      	ldr	r3, [pc, #320]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 030c 	and.w	r3, r3, #12
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d017      	beq.n	8005026 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ff6:	4b4d      	ldr	r3, [pc, #308]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d105      	bne.n	800500e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005002:	4b4a      	ldr	r3, [pc, #296]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800500e:	4b47      	ldr	r3, [pc, #284]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005016:	2b0c      	cmp	r3, #12
 8005018:	d11c      	bne.n	8005054 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800501a:	4b44      	ldr	r3, [pc, #272]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d116      	bne.n	8005054 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005026:	4b41      	ldr	r3, [pc, #260]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_RCC_OscConfig+0x186>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d001      	beq.n	800503e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e1d3      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503e:	4b3b      	ldr	r3, [pc, #236]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4937      	ldr	r1, [pc, #220]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005052:	e03a      	b.n	80050ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d020      	beq.n	800509e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800505c:	4b34      	ldr	r3, [pc, #208]	@ (8005130 <HAL_RCC_OscConfig+0x278>)
 800505e:	2201      	movs	r2, #1
 8005060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005062:	f7fd fa09 	bl	8002478 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800506a:	f7fd fa05 	bl	8002478 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e1b4      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507c:	4b2b      	ldr	r3, [pc, #172]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005088:	4b28      	ldr	r3, [pc, #160]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4925      	ldr	r1, [pc, #148]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8005098:	4313      	orrs	r3, r2
 800509a:	600b      	str	r3, [r1, #0]
 800509c:	e015      	b.n	80050ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800509e:	4b24      	ldr	r3, [pc, #144]	@ (8005130 <HAL_RCC_OscConfig+0x278>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fd f9e8 	bl	8002478 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ac:	f7fd f9e4 	bl	8002478 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e193      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050be:	4b1b      	ldr	r3, [pc, #108]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d036      	beq.n	8005144 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d016      	beq.n	800510c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050de:	4b15      	ldr	r3, [pc, #84]	@ (8005134 <HAL_RCC_OscConfig+0x27c>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e4:	f7fd f9c8 	bl	8002478 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ec:	f7fd f9c4 	bl	8002478 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e173      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050fe:	4b0b      	ldr	r3, [pc, #44]	@ (800512c <HAL_RCC_OscConfig+0x274>)
 8005100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x234>
 800510a:	e01b      	b.n	8005144 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800510c:	4b09      	ldr	r3, [pc, #36]	@ (8005134 <HAL_RCC_OscConfig+0x27c>)
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005112:	f7fd f9b1 	bl	8002478 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005118:	e00e      	b.n	8005138 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800511a:	f7fd f9ad 	bl	8002478 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d907      	bls.n	8005138 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e15c      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
 800512c:	40023800 	.word	0x40023800
 8005130:	42470000 	.word	0x42470000
 8005134:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005138:	4b8a      	ldr	r3, [pc, #552]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 800513a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1ea      	bne.n	800511a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8097 	beq.w	8005280 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005152:	2300      	movs	r3, #0
 8005154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005156:	4b83      	ldr	r3, [pc, #524]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10f      	bne.n	8005182 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	4b7f      	ldr	r3, [pc, #508]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	4a7e      	ldr	r2, [pc, #504]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 800516c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005170:	6413      	str	r3, [r2, #64]	@ 0x40
 8005172:	4b7c      	ldr	r3, [pc, #496]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517e:	2301      	movs	r3, #1
 8005180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005182:	4b79      	ldr	r3, [pc, #484]	@ (8005368 <HAL_RCC_OscConfig+0x4b0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518a:	2b00      	cmp	r3, #0
 800518c:	d118      	bne.n	80051c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800518e:	4b76      	ldr	r3, [pc, #472]	@ (8005368 <HAL_RCC_OscConfig+0x4b0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a75      	ldr	r2, [pc, #468]	@ (8005368 <HAL_RCC_OscConfig+0x4b0>)
 8005194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800519a:	f7fd f96d 	bl	8002478 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a2:	f7fd f969 	bl	8002478 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e118      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005368 <HAL_RCC_OscConfig+0x4b0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f0      	beq.n	80051a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d106      	bne.n	80051d6 <HAL_RCC_OscConfig+0x31e>
 80051c8:	4b66      	ldr	r3, [pc, #408]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051cc:	4a65      	ldr	r2, [pc, #404]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d4:	e01c      	b.n	8005210 <HAL_RCC_OscConfig+0x358>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d10c      	bne.n	80051f8 <HAL_RCC_OscConfig+0x340>
 80051de:	4b61      	ldr	r3, [pc, #388]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e2:	4a60      	ldr	r2, [pc, #384]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 80051e4:	f043 0304 	orr.w	r3, r3, #4
 80051e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ee:	4a5d      	ldr	r2, [pc, #372]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 80051f0:	f043 0301 	orr.w	r3, r3, #1
 80051f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f6:	e00b      	b.n	8005210 <HAL_RCC_OscConfig+0x358>
 80051f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fc:	4a59      	ldr	r2, [pc, #356]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	6713      	str	r3, [r2, #112]	@ 0x70
 8005204:	4b57      	ldr	r3, [pc, #348]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005208:	4a56      	ldr	r2, [pc, #344]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 800520a:	f023 0304 	bic.w	r3, r3, #4
 800520e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d015      	beq.n	8005244 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005218:	f7fd f92e 	bl	8002478 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521e:	e00a      	b.n	8005236 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005220:	f7fd f92a 	bl	8002478 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e0d7      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005236:	4b4b      	ldr	r3, [pc, #300]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 8005238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0ee      	beq.n	8005220 <HAL_RCC_OscConfig+0x368>
 8005242:	e014      	b.n	800526e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005244:	f7fd f918 	bl	8002478 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800524a:	e00a      	b.n	8005262 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800524c:	f7fd f914 	bl	8002478 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e0c1      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005262:	4b40      	ldr	r3, [pc, #256]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1ee      	bne.n	800524c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800526e:	7dfb      	ldrb	r3, [r7, #23]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d105      	bne.n	8005280 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005274:	4b3b      	ldr	r3, [pc, #236]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	4a3a      	ldr	r2, [pc, #232]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 800527a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800527e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80ad 	beq.w	80053e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800528a:	4b36      	ldr	r3, [pc, #216]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 030c 	and.w	r3, r3, #12
 8005292:	2b08      	cmp	r3, #8
 8005294:	d060      	beq.n	8005358 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d145      	bne.n	800532a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529e:	4b33      	ldr	r3, [pc, #204]	@ (800536c <HAL_RCC_OscConfig+0x4b4>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fd f8e8 	bl	8002478 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fd f8e4 	bl	8002478 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e093      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052be:	4b29      	ldr	r3, [pc, #164]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69da      	ldr	r2, [r3, #28]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	019b      	lsls	r3, r3, #6
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	085b      	lsrs	r3, r3, #1
 80052e2:	3b01      	subs	r3, #1
 80052e4:	041b      	lsls	r3, r3, #16
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	061b      	lsls	r3, r3, #24
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f4:	071b      	lsls	r3, r3, #28
 80052f6:	491b      	ldr	r1, [pc, #108]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052fc:	4b1b      	ldr	r3, [pc, #108]	@ (800536c <HAL_RCC_OscConfig+0x4b4>)
 80052fe:	2201      	movs	r2, #1
 8005300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005302:	f7fd f8b9 	bl	8002478 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800530a:	f7fd f8b5 	bl	8002478 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e064      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800531c:	4b11      	ldr	r3, [pc, #68]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x452>
 8005328:	e05c      	b.n	80053e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800532a:	4b10      	ldr	r3, [pc, #64]	@ (800536c <HAL_RCC_OscConfig+0x4b4>)
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7fd f8a2 	bl	8002478 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005338:	f7fd f89e 	bl	8002478 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e04d      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534a:	4b06      	ldr	r3, [pc, #24]	@ (8005364 <HAL_RCC_OscConfig+0x4ac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0x480>
 8005356:	e045      	b.n	80053e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d107      	bne.n	8005370 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e040      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
 8005364:	40023800 	.word	0x40023800
 8005368:	40007000 	.word	0x40007000
 800536c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005370:	4b1f      	ldr	r3, [pc, #124]	@ (80053f0 <HAL_RCC_OscConfig+0x538>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d030      	beq.n	80053e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005388:	429a      	cmp	r2, r3
 800538a:	d129      	bne.n	80053e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005396:	429a      	cmp	r2, r3
 8005398:	d122      	bne.n	80053e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053a0:	4013      	ands	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d119      	bne.n	80053e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	3b01      	subs	r3, #1
 80053ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d10f      	bne.n	80053e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d107      	bne.n	80053e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053dc:	429a      	cmp	r2, r3
 80053de:	d001      	beq.n	80053e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e000      	b.n	80053e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800

080053f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e07b      	b.n	80054fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d108      	bne.n	8005420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005416:	d009      	beq.n	800542c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	61da      	str	r2, [r3, #28]
 800541e:	e005      	b.n	800542c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fc fdce 	bl	8001fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005462:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b0:	ea42 0103 	orr.w	r1, r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	f003 0104 	and.w	r1, r3, #4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	f003 0210 	and.w	r2, r3, #16
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b088      	sub	sp, #32
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_SPI_Transmit+0x22>
 8005524:	2302      	movs	r3, #2
 8005526:	e12d      	b.n	8005784 <HAL_SPI_Transmit+0x27e>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005530:	f7fc ffa2 	bl	8002478 <HAL_GetTick>
 8005534:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005536:	88fb      	ldrh	r3, [r7, #6]
 8005538:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b01      	cmp	r3, #1
 8005544:	d002      	beq.n	800554c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005546:	2302      	movs	r3, #2
 8005548:	77fb      	strb	r3, [r7, #31]
    goto error;
 800554a:	e116      	b.n	800577a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_SPI_Transmit+0x52>
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800555c:	e10d      	b.n	800577a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2203      	movs	r2, #3
 8005562:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	88fa      	ldrh	r2, [r7, #6]
 8005576:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	88fa      	ldrh	r2, [r7, #6]
 800557c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055a4:	d10f      	bne.n	80055c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d0:	2b40      	cmp	r3, #64	@ 0x40
 80055d2:	d007      	beq.n	80055e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055ec:	d14f      	bne.n	800568e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_SPI_Transmit+0xf6>
 80055f6:	8afb      	ldrh	r3, [r7, #22]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d142      	bne.n	8005682 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005600:	881a      	ldrh	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005620:	e02f      	b.n	8005682 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b02      	cmp	r3, #2
 800562e:	d112      	bne.n	8005656 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005634:	881a      	ldrh	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005640:	1c9a      	adds	r2, r3, #2
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005654:	e015      	b.n	8005682 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005656:	f7fc ff0f 	bl	8002478 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d803      	bhi.n	800566e <HAL_SPI_Transmit+0x168>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d102      	bne.n	8005674 <HAL_SPI_Transmit+0x16e>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d106      	bne.n	8005682 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005680:	e07b      	b.n	800577a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1ca      	bne.n	8005622 <HAL_SPI_Transmit+0x11c>
 800568c:	e050      	b.n	8005730 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_SPI_Transmit+0x196>
 8005696:	8afb      	ldrh	r3, [r7, #22]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d144      	bne.n	8005726 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	7812      	ldrb	r2, [r2, #0]
 80056a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056c2:	e030      	b.n	8005726 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d113      	bne.n	80056fa <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	7812      	ldrb	r2, [r2, #0]
 80056de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056f8:	e015      	b.n	8005726 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056fa:	f7fc febd 	bl	8002478 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d803      	bhi.n	8005712 <HAL_SPI_Transmit+0x20c>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d102      	bne.n	8005718 <HAL_SPI_Transmit+0x212>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005724:	e029      	b.n	800577a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1c9      	bne.n	80056c4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	6839      	ldr	r1, [r7, #0]
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 fbed 	bl	8005f14 <SPI_EndRxTxTransaction>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2220      	movs	r2, #32
 8005744:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800574e:	2300      	movs	r3, #0
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	613b      	str	r3, [r7, #16]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	77fb      	strb	r3, [r7, #31]
 8005770:	e003      	b.n	800577a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005782:	7ffb      	ldrb	r3, [r7, #31]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	4613      	mov	r3, r2
 800579a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80057ac:	2302      	movs	r3, #2
 80057ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057b0:	e0fb      	b.n	80059aa <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ba:	d112      	bne.n	80057e2 <HAL_SPI_Receive+0x56>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10e      	bne.n	80057e2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2204      	movs	r2, #4
 80057c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057cc:	88fa      	ldrh	r2, [r7, #6]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	4613      	mov	r3, r2
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f8ef 	bl	80059bc <HAL_SPI_TransmitReceive>
 80057de:	4603      	mov	r3, r0
 80057e0:	e0e8      	b.n	80059b4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_SPI_Receive+0x64>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e0e1      	b.n	80059b4 <HAL_SPI_Receive+0x228>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057f8:	f7fc fe3e 	bl	8002478 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_Receive+0x7e>
 8005804:	88fb      	ldrh	r3, [r7, #6]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800580e:	e0cc      	b.n	80059aa <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2204      	movs	r2, #4
 8005814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	88fa      	ldrh	r2, [r7, #6]
 8005828:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	88fa      	ldrh	r2, [r7, #6]
 800582e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005856:	d10f      	bne.n	8005878 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005866:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005876:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005882:	2b40      	cmp	r3, #64	@ 0x40
 8005884:	d007      	beq.n	8005896 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005894:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d16a      	bne.n	8005974 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800589e:	e032      	b.n	8005906 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d115      	bne.n	80058da <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f103 020c 	add.w	r2, r3, #12
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	7812      	ldrb	r2, [r2, #0]
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058d8:	e015      	b.n	8005906 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058da:	f7fc fdcd 	bl	8002478 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d803      	bhi.n	80058f2 <HAL_SPI_Receive+0x166>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d102      	bne.n	80058f8 <HAL_SPI_Receive+0x16c>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005904:	e051      	b.n	80059aa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1c7      	bne.n	80058a0 <HAL_SPI_Receive+0x114>
 8005910:	e035      	b.n	800597e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d113      	bne.n	8005948 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592a:	b292      	uxth	r2, r2
 800592c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005932:	1c9a      	adds	r2, r3, #2
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005946:	e015      	b.n	8005974 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005948:	f7fc fd96 	bl	8002478 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d803      	bhi.n	8005960 <HAL_SPI_Receive+0x1d4>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595e:	d102      	bne.n	8005966 <HAL_SPI_Receive+0x1da>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005972:	e01a      	b.n	80059aa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1c9      	bne.n	8005912 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fa60 	bl	8005e48 <SPI_EndRxTransaction>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	75fb      	strb	r3, [r7, #23]
 80059a0:	e003      	b.n	80059aa <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08c      	sub	sp, #48	@ 0x30
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059ca:	2301      	movs	r3, #1
 80059cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_SPI_TransmitReceive+0x26>
 80059de:	2302      	movs	r3, #2
 80059e0:	e198      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x358>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ea:	f7fc fd45 	bl	8002478 <HAL_GetTick>
 80059ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a00:	887b      	ldrh	r3, [r7, #2]
 8005a02:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d00f      	beq.n	8005a2c <HAL_SPI_TransmitReceive+0x70>
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a12:	d107      	bne.n	8005a24 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d103      	bne.n	8005a24 <HAL_SPI_TransmitReceive+0x68>
 8005a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d003      	beq.n	8005a2c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a24:	2302      	movs	r3, #2
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005a2a:	e16d      	b.n	8005d08 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_SPI_TransmitReceive+0x82>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_SPI_TransmitReceive+0x82>
 8005a38:	887b      	ldrh	r3, [r7, #2]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005a44:	e160      	b.n	8005d08 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d003      	beq.n	8005a5a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2205      	movs	r2, #5
 8005a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	887a      	ldrh	r2, [r7, #2]
 8005a6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	887a      	ldrh	r2, [r7, #2]
 8005a70:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	887a      	ldrh	r2, [r7, #2]
 8005a7c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	887a      	ldrh	r2, [r7, #2]
 8005a82:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9a:	2b40      	cmp	r3, #64	@ 0x40
 8005a9c:	d007      	beq.n	8005aae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab6:	d17c      	bne.n	8005bb2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_SPI_TransmitReceive+0x10a>
 8005ac0:	8b7b      	ldrh	r3, [r7, #26]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d16a      	bne.n	8005b9c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aca:	881a      	ldrh	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad6:	1c9a      	adds	r2, r3, #2
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aea:	e057      	b.n	8005b9c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d11b      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x176>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d016      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0x176>
 8005b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d113      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0e:	881a      	ldrh	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d119      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x1b8>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d014      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	b292      	uxth	r2, r2
 8005b56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b70:	2301      	movs	r3, #1
 8005b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b74:	f7fc fc80 	bl	8002478 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d80b      	bhi.n	8005b9c <HAL_SPI_TransmitReceive+0x1e0>
 8005b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d007      	beq.n	8005b9c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005b9a:	e0b5      	b.n	8005d08 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1a2      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x130>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d19d      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x130>
 8005bb0:	e080      	b.n	8005cb4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_SPI_TransmitReceive+0x204>
 8005bba:	8b7b      	ldrh	r3, [r7, #26]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d16f      	bne.n	8005ca0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	7812      	ldrb	r2, [r2, #0]
 8005bcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005be6:	e05b      	b.n	8005ca0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d11c      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x274>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d017      	beq.n	8005c30 <HAL_SPI_TransmitReceive+0x274>
 8005c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d114      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	7812      	ldrb	r2, [r2, #0]
 8005c12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d119      	bne.n	8005c72 <HAL_SPI_TransmitReceive+0x2b6>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d014      	beq.n	8005c72 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c72:	f7fc fc01 	bl	8002478 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d803      	bhi.n	8005c8a <HAL_SPI_TransmitReceive+0x2ce>
 8005c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d102      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x2d4>
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d107      	bne.n	8005ca0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005c9e:	e033      	b.n	8005d08 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d19e      	bne.n	8005be8 <HAL_SPI_TransmitReceive+0x22c>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d199      	bne.n	8005be8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f92b 	bl	8005f14 <SPI_EndRxTxTransaction>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d006      	beq.n	8005cd2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005cd0:	e01a      	b.n	8005d08 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cfe:	e003      	b.n	8005d08 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005d10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3730      	adds	r7, #48	@ 0x30
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d2a:	b2db      	uxtb	r3, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	4613      	mov	r3, r2
 8005d46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d48:	f7fc fb96 	bl	8002478 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4413      	add	r3, r2
 8005d56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d58:	f7fc fb8e 	bl	8002478 <HAL_GetTick>
 8005d5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d5e:	4b39      	ldr	r3, [pc, #228]	@ (8005e44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	015b      	lsls	r3, r3, #5
 8005d64:	0d1b      	lsrs	r3, r3, #20
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	fb02 f303 	mul.w	r3, r2, r3
 8005d6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d6e:	e054      	b.n	8005e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d76:	d050      	beq.n	8005e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d78:	f7fc fb7e 	bl	8002478 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d902      	bls.n	8005d8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d13d      	bne.n	8005e0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005da6:	d111      	bne.n	8005dcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db0:	d004      	beq.n	8005dbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dba:	d107      	bne.n	8005dcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dd4:	d10f      	bne.n	8005df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005df4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e017      	b.n	8005e3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4013      	ands	r3, r2
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	bf0c      	ite	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	2300      	movne	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d19b      	bne.n	8005d70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3720      	adds	r7, #32
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000004 	.word	0x20000004

08005e48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e5c:	d111      	bne.n	8005e82 <SPI_EndRxTransaction+0x3a>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e66:	d004      	beq.n	8005e72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e70:	d107      	bne.n	8005e82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e8a:	d12a      	bne.n	8005ee2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e94:	d012      	beq.n	8005ebc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2180      	movs	r1, #128	@ 0x80
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff ff49 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d02d      	beq.n	8005f08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb0:	f043 0220 	orr.w	r2, r3, #32
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e026      	b.n	8005f0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff ff36 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01a      	beq.n	8005f08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e013      	b.n	8005f0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2101      	movs	r1, #1
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff ff23 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e000      	b.n	8005f0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2201      	movs	r2, #1
 8005f28:	2102      	movs	r1, #2
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff ff04 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3a:	f043 0220 	orr.w	r2, r3, #32
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e032      	b.n	8005fac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f46:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb4 <SPI_EndRxTxTransaction+0xa0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005fb8 <SPI_EndRxTxTransaction+0xa4>)
 8005f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f50:	0d5b      	lsrs	r3, r3, #21
 8005f52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f64:	d112      	bne.n	8005f8c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2180      	movs	r1, #128	@ 0x80
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff fee1 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d016      	beq.n	8005faa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f80:	f043 0220 	orr.w	r2, r3, #32
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e00f      	b.n	8005fac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa2:	2b80      	cmp	r3, #128	@ 0x80
 8005fa4:	d0f2      	beq.n	8005f8c <SPI_EndRxTxTransaction+0x78>
 8005fa6:	e000      	b.n	8005faa <SPI_EndRxTxTransaction+0x96>
        break;
 8005fa8:	bf00      	nop
  }

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000004 	.word	0x20000004
 8005fb8:	165e9f81 	.word	0x165e9f81

08005fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e042      	b.n	8006054 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fc f848 	bl	8002078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2224      	movs	r2, #36	@ 0x24
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f973 	bl	80062ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	@ 0x28
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b20      	cmp	r3, #32
 800607a:	d175      	bne.n	8006168 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <HAL_UART_Transmit+0x2c>
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e06e      	b.n	800616a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2221      	movs	r2, #33	@ 0x21
 8006096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800609a:	f7fc f9ed 	bl	8002478 <HAL_GetTick>
 800609e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	88fa      	ldrh	r2, [r7, #6]
 80060a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	88fa      	ldrh	r2, [r7, #6]
 80060aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060b4:	d108      	bne.n	80060c8 <HAL_UART_Transmit+0x6c>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	e003      	b.n	80060d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060d0:	e02e      	b.n	8006130 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2200      	movs	r2, #0
 80060da:	2180      	movs	r1, #128	@ 0x80
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f848 	bl	8006172 <UART_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d005      	beq.n	80060f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e03a      	b.n	800616a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10b      	bne.n	8006112 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	3302      	adds	r3, #2
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	e007      	b.n	8006122 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	781a      	ldrb	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	3301      	adds	r3, #1
 8006120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1cb      	bne.n	80060d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2200      	movs	r2, #0
 8006142:	2140      	movs	r1, #64	@ 0x40
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f814 	bl	8006172 <UART_WaitOnFlagUntilTimeout>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e006      	b.n	800616a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006168:	2302      	movs	r3, #2
  }
}
 800616a:	4618      	mov	r0, r3
 800616c:	3720      	adds	r7, #32
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b086      	sub	sp, #24
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	603b      	str	r3, [r7, #0]
 800617e:	4613      	mov	r3, r2
 8006180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006182:	e03b      	b.n	80061fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618a:	d037      	beq.n	80061fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618c:	f7fc f974 	bl	8002478 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	6a3a      	ldr	r2, [r7, #32]
 8006198:	429a      	cmp	r2, r3
 800619a:	d302      	bcc.n	80061a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e03a      	b.n	800621c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d023      	beq.n	80061fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b80      	cmp	r3, #128	@ 0x80
 80061b8:	d020      	beq.n	80061fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b40      	cmp	r3, #64	@ 0x40
 80061be:	d01d      	beq.n	80061fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d116      	bne.n	80061fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f81d 	bl	8006224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2208      	movs	r2, #8
 80061ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e00f      	b.n	800621c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4013      	ands	r3, r2
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	429a      	cmp	r2, r3
 800620a:	bf0c      	ite	eq
 800620c:	2301      	moveq	r3, #1
 800620e:	2300      	movne	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	429a      	cmp	r2, r3
 8006218:	d0b4      	beq.n	8006184 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006224:	b480      	push	{r7}
 8006226:	b095      	sub	sp, #84	@ 0x54
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	330c      	adds	r3, #12
 8006232:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	330c      	adds	r3, #12
 800624a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800624c:	643a      	str	r2, [r7, #64]	@ 0x40
 800624e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006252:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800625a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e5      	bne.n	800622c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3314      	adds	r3, #20
 8006266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3314      	adds	r3, #20
 800627e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006280:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e5      	bne.n	8006260 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006298:	2b01      	cmp	r3, #1
 800629a:	d119      	bne.n	80062d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f023 0310 	bic.w	r3, r3, #16
 80062b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062bc:	61ba      	str	r2, [r7, #24]
 80062be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6979      	ldr	r1, [r7, #20]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e5      	bne.n	800629c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062de:	bf00      	nop
 80062e0:	3754      	adds	r7, #84	@ 0x54
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f0:	b0c0      	sub	sp, #256	@ 0x100
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006308:	68d9      	ldr	r1, [r3, #12]
 800630a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	ea40 0301 	orr.w	r3, r0, r1
 8006314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	431a      	orrs	r2, r3
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	431a      	orrs	r2, r3
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006344:	f021 010c 	bic.w	r1, r1, #12
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006352:	430b      	orrs	r3, r1
 8006354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006366:	6999      	ldr	r1, [r3, #24]
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	ea40 0301 	orr.w	r3, r0, r1
 8006372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b8f      	ldr	r3, [pc, #572]	@ (80065b8 <UART_SetConfig+0x2cc>)
 800637c:	429a      	cmp	r2, r3
 800637e:	d005      	beq.n	800638c <UART_SetConfig+0xa0>
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b8d      	ldr	r3, [pc, #564]	@ (80065bc <UART_SetConfig+0x2d0>)
 8006388:	429a      	cmp	r2, r3
 800638a:	d104      	bne.n	8006396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800638c:	f7fe fb50 	bl	8004a30 <HAL_RCC_GetPCLK2Freq>
 8006390:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006394:	e003      	b.n	800639e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006396:	f7fe fb37 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 800639a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800639e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063a8:	f040 810c 	bne.w	80065c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063be:	4622      	mov	r2, r4
 80063c0:	462b      	mov	r3, r5
 80063c2:	1891      	adds	r1, r2, r2
 80063c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063c6:	415b      	adcs	r3, r3
 80063c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063ce:	4621      	mov	r1, r4
 80063d0:	eb12 0801 	adds.w	r8, r2, r1
 80063d4:	4629      	mov	r1, r5
 80063d6:	eb43 0901 	adc.w	r9, r3, r1
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ee:	4690      	mov	r8, r2
 80063f0:	4699      	mov	r9, r3
 80063f2:	4623      	mov	r3, r4
 80063f4:	eb18 0303 	adds.w	r3, r8, r3
 80063f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063fc:	462b      	mov	r3, r5
 80063fe:	eb49 0303 	adc.w	r3, r9, r3
 8006402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006412:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800641a:	460b      	mov	r3, r1
 800641c:	18db      	adds	r3, r3, r3
 800641e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006420:	4613      	mov	r3, r2
 8006422:	eb42 0303 	adc.w	r3, r2, r3
 8006426:	657b      	str	r3, [r7, #84]	@ 0x54
 8006428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800642c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006430:	f7fa fbda 	bl	8000be8 <__aeabi_uldivmod>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4b61      	ldr	r3, [pc, #388]	@ (80065c0 <UART_SetConfig+0x2d4>)
 800643a:	fba3 2302 	umull	r2, r3, r3, r2
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	011c      	lsls	r4, r3, #4
 8006442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006446:	2200      	movs	r2, #0
 8006448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800644c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	1891      	adds	r1, r2, r2
 800645a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800645c:	415b      	adcs	r3, r3
 800645e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006464:	4641      	mov	r1, r8
 8006466:	eb12 0a01 	adds.w	sl, r2, r1
 800646a:	4649      	mov	r1, r9
 800646c:	eb43 0b01 	adc.w	fp, r3, r1
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800647c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006484:	4692      	mov	sl, r2
 8006486:	469b      	mov	fp, r3
 8006488:	4643      	mov	r3, r8
 800648a:	eb1a 0303 	adds.w	r3, sl, r3
 800648e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006492:	464b      	mov	r3, r9
 8006494:	eb4b 0303 	adc.w	r3, fp, r3
 8006498:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80064ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064b0:	460b      	mov	r3, r1
 80064b2:	18db      	adds	r3, r3, r3
 80064b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80064b6:	4613      	mov	r3, r2
 80064b8:	eb42 0303 	adc.w	r3, r2, r3
 80064bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80064be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064c6:	f7fa fb8f 	bl	8000be8 <__aeabi_uldivmod>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	4b3b      	ldr	r3, [pc, #236]	@ (80065c0 <UART_SetConfig+0x2d4>)
 80064d2:	fba3 2301 	umull	r2, r3, r3, r1
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	2264      	movs	r2, #100	@ 0x64
 80064da:	fb02 f303 	mul.w	r3, r2, r3
 80064de:	1acb      	subs	r3, r1, r3
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064e6:	4b36      	ldr	r3, [pc, #216]	@ (80065c0 <UART_SetConfig+0x2d4>)
 80064e8:	fba3 2302 	umull	r2, r3, r3, r2
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064f4:	441c      	add	r4, r3
 80064f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006500:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006508:	4642      	mov	r2, r8
 800650a:	464b      	mov	r3, r9
 800650c:	1891      	adds	r1, r2, r2
 800650e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006510:	415b      	adcs	r3, r3
 8006512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006518:	4641      	mov	r1, r8
 800651a:	1851      	adds	r1, r2, r1
 800651c:	6339      	str	r1, [r7, #48]	@ 0x30
 800651e:	4649      	mov	r1, r9
 8006520:	414b      	adcs	r3, r1
 8006522:	637b      	str	r3, [r7, #52]	@ 0x34
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006530:	4659      	mov	r1, fp
 8006532:	00cb      	lsls	r3, r1, #3
 8006534:	4651      	mov	r1, sl
 8006536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800653a:	4651      	mov	r1, sl
 800653c:	00ca      	lsls	r2, r1, #3
 800653e:	4610      	mov	r0, r2
 8006540:	4619      	mov	r1, r3
 8006542:	4603      	mov	r3, r0
 8006544:	4642      	mov	r2, r8
 8006546:	189b      	adds	r3, r3, r2
 8006548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800654c:	464b      	mov	r3, r9
 800654e:	460a      	mov	r2, r1
 8006550:	eb42 0303 	adc.w	r3, r2, r3
 8006554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006564:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800656c:	460b      	mov	r3, r1
 800656e:	18db      	adds	r3, r3, r3
 8006570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006572:	4613      	mov	r3, r2
 8006574:	eb42 0303 	adc.w	r3, r2, r3
 8006578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800657a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800657e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006582:	f7fa fb31 	bl	8000be8 <__aeabi_uldivmod>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4b0d      	ldr	r3, [pc, #52]	@ (80065c0 <UART_SetConfig+0x2d4>)
 800658c:	fba3 1302 	umull	r1, r3, r3, r2
 8006590:	095b      	lsrs	r3, r3, #5
 8006592:	2164      	movs	r1, #100	@ 0x64
 8006594:	fb01 f303 	mul.w	r3, r1, r3
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	3332      	adds	r3, #50	@ 0x32
 800659e:	4a08      	ldr	r2, [pc, #32]	@ (80065c0 <UART_SetConfig+0x2d4>)
 80065a0:	fba2 2303 	umull	r2, r3, r2, r3
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	f003 0207 	and.w	r2, r3, #7
 80065aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4422      	add	r2, r4
 80065b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065b4:	e106      	b.n	80067c4 <UART_SetConfig+0x4d8>
 80065b6:	bf00      	nop
 80065b8:	40011000 	.word	0x40011000
 80065bc:	40011400 	.word	0x40011400
 80065c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80065d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065d6:	4642      	mov	r2, r8
 80065d8:	464b      	mov	r3, r9
 80065da:	1891      	adds	r1, r2, r2
 80065dc:	6239      	str	r1, [r7, #32]
 80065de:	415b      	adcs	r3, r3
 80065e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065e6:	4641      	mov	r1, r8
 80065e8:	1854      	adds	r4, r2, r1
 80065ea:	4649      	mov	r1, r9
 80065ec:	eb43 0501 	adc.w	r5, r3, r1
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	00eb      	lsls	r3, r5, #3
 80065fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065fe:	00e2      	lsls	r2, r4, #3
 8006600:	4614      	mov	r4, r2
 8006602:	461d      	mov	r5, r3
 8006604:	4643      	mov	r3, r8
 8006606:	18e3      	adds	r3, r4, r3
 8006608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800660c:	464b      	mov	r3, r9
 800660e:	eb45 0303 	adc.w	r3, r5, r3
 8006612:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006622:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006632:	4629      	mov	r1, r5
 8006634:	008b      	lsls	r3, r1, #2
 8006636:	4621      	mov	r1, r4
 8006638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800663c:	4621      	mov	r1, r4
 800663e:	008a      	lsls	r2, r1, #2
 8006640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006644:	f7fa fad0 	bl	8000be8 <__aeabi_uldivmod>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4b60      	ldr	r3, [pc, #384]	@ (80067d0 <UART_SetConfig+0x4e4>)
 800664e:	fba3 2302 	umull	r2, r3, r3, r2
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	011c      	lsls	r4, r3, #4
 8006656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800665a:	2200      	movs	r2, #0
 800665c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006660:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006668:	4642      	mov	r2, r8
 800666a:	464b      	mov	r3, r9
 800666c:	1891      	adds	r1, r2, r2
 800666e:	61b9      	str	r1, [r7, #24]
 8006670:	415b      	adcs	r3, r3
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006678:	4641      	mov	r1, r8
 800667a:	1851      	adds	r1, r2, r1
 800667c:	6139      	str	r1, [r7, #16]
 800667e:	4649      	mov	r1, r9
 8006680:	414b      	adcs	r3, r1
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006690:	4659      	mov	r1, fp
 8006692:	00cb      	lsls	r3, r1, #3
 8006694:	4651      	mov	r1, sl
 8006696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800669a:	4651      	mov	r1, sl
 800669c:	00ca      	lsls	r2, r1, #3
 800669e:	4610      	mov	r0, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	4642      	mov	r2, r8
 80066a6:	189b      	adds	r3, r3, r2
 80066a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066ac:	464b      	mov	r3, r9
 80066ae:	460a      	mov	r2, r1
 80066b0:	eb42 0303 	adc.w	r3, r2, r3
 80066b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066d0:	4649      	mov	r1, r9
 80066d2:	008b      	lsls	r3, r1, #2
 80066d4:	4641      	mov	r1, r8
 80066d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066da:	4641      	mov	r1, r8
 80066dc:	008a      	lsls	r2, r1, #2
 80066de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066e2:	f7fa fa81 	bl	8000be8 <__aeabi_uldivmod>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4611      	mov	r1, r2
 80066ec:	4b38      	ldr	r3, [pc, #224]	@ (80067d0 <UART_SetConfig+0x4e4>)
 80066ee:	fba3 2301 	umull	r2, r3, r3, r1
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	2264      	movs	r2, #100	@ 0x64
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	1acb      	subs	r3, r1, r3
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	3332      	adds	r3, #50	@ 0x32
 8006700:	4a33      	ldr	r2, [pc, #204]	@ (80067d0 <UART_SetConfig+0x4e4>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800670c:	441c      	add	r4, r3
 800670e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006712:	2200      	movs	r2, #0
 8006714:	673b      	str	r3, [r7, #112]	@ 0x70
 8006716:	677a      	str	r2, [r7, #116]	@ 0x74
 8006718:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800671c:	4642      	mov	r2, r8
 800671e:	464b      	mov	r3, r9
 8006720:	1891      	adds	r1, r2, r2
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	415b      	adcs	r3, r3
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800672c:	4641      	mov	r1, r8
 800672e:	1851      	adds	r1, r2, r1
 8006730:	6039      	str	r1, [r7, #0]
 8006732:	4649      	mov	r1, r9
 8006734:	414b      	adcs	r3, r1
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	f04f 0300 	mov.w	r3, #0
 8006740:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006744:	4659      	mov	r1, fp
 8006746:	00cb      	lsls	r3, r1, #3
 8006748:	4651      	mov	r1, sl
 800674a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800674e:	4651      	mov	r1, sl
 8006750:	00ca      	lsls	r2, r1, #3
 8006752:	4610      	mov	r0, r2
 8006754:	4619      	mov	r1, r3
 8006756:	4603      	mov	r3, r0
 8006758:	4642      	mov	r2, r8
 800675a:	189b      	adds	r3, r3, r2
 800675c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800675e:	464b      	mov	r3, r9
 8006760:	460a      	mov	r2, r1
 8006762:	eb42 0303 	adc.w	r3, r2, r3
 8006766:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	663b      	str	r3, [r7, #96]	@ 0x60
 8006772:	667a      	str	r2, [r7, #100]	@ 0x64
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006780:	4649      	mov	r1, r9
 8006782:	008b      	lsls	r3, r1, #2
 8006784:	4641      	mov	r1, r8
 8006786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800678a:	4641      	mov	r1, r8
 800678c:	008a      	lsls	r2, r1, #2
 800678e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006792:	f7fa fa29 	bl	8000be8 <__aeabi_uldivmod>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4b0d      	ldr	r3, [pc, #52]	@ (80067d0 <UART_SetConfig+0x4e4>)
 800679c:	fba3 1302 	umull	r1, r3, r3, r2
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	2164      	movs	r1, #100	@ 0x64
 80067a4:	fb01 f303 	mul.w	r3, r1, r3
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	3332      	adds	r3, #50	@ 0x32
 80067ae:	4a08      	ldr	r2, [pc, #32]	@ (80067d0 <UART_SetConfig+0x4e4>)
 80067b0:	fba2 2303 	umull	r2, r3, r2, r3
 80067b4:	095b      	lsrs	r3, r3, #5
 80067b6:	f003 020f 	and.w	r2, r3, #15
 80067ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4422      	add	r2, r4
 80067c2:	609a      	str	r2, [r3, #8]
}
 80067c4:	bf00      	nop
 80067c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067ca:	46bd      	mov	sp, r7
 80067cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067d0:	51eb851f 	.word	0x51eb851f

080067d4 <__cvt>:
 80067d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	ec57 6b10 	vmov	r6, r7, d0
 80067dc:	2f00      	cmp	r7, #0
 80067de:	460c      	mov	r4, r1
 80067e0:	4619      	mov	r1, r3
 80067e2:	463b      	mov	r3, r7
 80067e4:	bfbb      	ittet	lt
 80067e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80067ea:	461f      	movlt	r7, r3
 80067ec:	2300      	movge	r3, #0
 80067ee:	232d      	movlt	r3, #45	@ 0x2d
 80067f0:	700b      	strb	r3, [r1, #0]
 80067f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80067f8:	4691      	mov	r9, r2
 80067fa:	f023 0820 	bic.w	r8, r3, #32
 80067fe:	bfbc      	itt	lt
 8006800:	4632      	movlt	r2, r6
 8006802:	4616      	movlt	r6, r2
 8006804:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006808:	d005      	beq.n	8006816 <__cvt+0x42>
 800680a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800680e:	d100      	bne.n	8006812 <__cvt+0x3e>
 8006810:	3401      	adds	r4, #1
 8006812:	2102      	movs	r1, #2
 8006814:	e000      	b.n	8006818 <__cvt+0x44>
 8006816:	2103      	movs	r1, #3
 8006818:	ab03      	add	r3, sp, #12
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	ab02      	add	r3, sp, #8
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	ec47 6b10 	vmov	d0, r6, r7
 8006824:	4653      	mov	r3, sl
 8006826:	4622      	mov	r2, r4
 8006828:	f000 fe5a 	bl	80074e0 <_dtoa_r>
 800682c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006830:	4605      	mov	r5, r0
 8006832:	d119      	bne.n	8006868 <__cvt+0x94>
 8006834:	f019 0f01 	tst.w	r9, #1
 8006838:	d00e      	beq.n	8006858 <__cvt+0x84>
 800683a:	eb00 0904 	add.w	r9, r0, r4
 800683e:	2200      	movs	r2, #0
 8006840:	2300      	movs	r3, #0
 8006842:	4630      	mov	r0, r6
 8006844:	4639      	mov	r1, r7
 8006846:	f7fa f95f 	bl	8000b08 <__aeabi_dcmpeq>
 800684a:	b108      	cbz	r0, 8006850 <__cvt+0x7c>
 800684c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006850:	2230      	movs	r2, #48	@ 0x30
 8006852:	9b03      	ldr	r3, [sp, #12]
 8006854:	454b      	cmp	r3, r9
 8006856:	d31e      	bcc.n	8006896 <__cvt+0xc2>
 8006858:	9b03      	ldr	r3, [sp, #12]
 800685a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800685c:	1b5b      	subs	r3, r3, r5
 800685e:	4628      	mov	r0, r5
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	b004      	add	sp, #16
 8006864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006868:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800686c:	eb00 0904 	add.w	r9, r0, r4
 8006870:	d1e5      	bne.n	800683e <__cvt+0x6a>
 8006872:	7803      	ldrb	r3, [r0, #0]
 8006874:	2b30      	cmp	r3, #48	@ 0x30
 8006876:	d10a      	bne.n	800688e <__cvt+0xba>
 8006878:	2200      	movs	r2, #0
 800687a:	2300      	movs	r3, #0
 800687c:	4630      	mov	r0, r6
 800687e:	4639      	mov	r1, r7
 8006880:	f7fa f942 	bl	8000b08 <__aeabi_dcmpeq>
 8006884:	b918      	cbnz	r0, 800688e <__cvt+0xba>
 8006886:	f1c4 0401 	rsb	r4, r4, #1
 800688a:	f8ca 4000 	str.w	r4, [sl]
 800688e:	f8da 3000 	ldr.w	r3, [sl]
 8006892:	4499      	add	r9, r3
 8006894:	e7d3      	b.n	800683e <__cvt+0x6a>
 8006896:	1c59      	adds	r1, r3, #1
 8006898:	9103      	str	r1, [sp, #12]
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	e7d9      	b.n	8006852 <__cvt+0x7e>

0800689e <__exponent>:
 800689e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068a0:	2900      	cmp	r1, #0
 80068a2:	bfba      	itte	lt
 80068a4:	4249      	neglt	r1, r1
 80068a6:	232d      	movlt	r3, #45	@ 0x2d
 80068a8:	232b      	movge	r3, #43	@ 0x2b
 80068aa:	2909      	cmp	r1, #9
 80068ac:	7002      	strb	r2, [r0, #0]
 80068ae:	7043      	strb	r3, [r0, #1]
 80068b0:	dd29      	ble.n	8006906 <__exponent+0x68>
 80068b2:	f10d 0307 	add.w	r3, sp, #7
 80068b6:	461d      	mov	r5, r3
 80068b8:	270a      	movs	r7, #10
 80068ba:	461a      	mov	r2, r3
 80068bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80068c0:	fb07 1416 	mls	r4, r7, r6, r1
 80068c4:	3430      	adds	r4, #48	@ 0x30
 80068c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068ca:	460c      	mov	r4, r1
 80068cc:	2c63      	cmp	r4, #99	@ 0x63
 80068ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80068d2:	4631      	mov	r1, r6
 80068d4:	dcf1      	bgt.n	80068ba <__exponent+0x1c>
 80068d6:	3130      	adds	r1, #48	@ 0x30
 80068d8:	1e94      	subs	r4, r2, #2
 80068da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068de:	1c41      	adds	r1, r0, #1
 80068e0:	4623      	mov	r3, r4
 80068e2:	42ab      	cmp	r3, r5
 80068e4:	d30a      	bcc.n	80068fc <__exponent+0x5e>
 80068e6:	f10d 0309 	add.w	r3, sp, #9
 80068ea:	1a9b      	subs	r3, r3, r2
 80068ec:	42ac      	cmp	r4, r5
 80068ee:	bf88      	it	hi
 80068f0:	2300      	movhi	r3, #0
 80068f2:	3302      	adds	r3, #2
 80068f4:	4403      	add	r3, r0
 80068f6:	1a18      	subs	r0, r3, r0
 80068f8:	b003      	add	sp, #12
 80068fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006900:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006904:	e7ed      	b.n	80068e2 <__exponent+0x44>
 8006906:	2330      	movs	r3, #48	@ 0x30
 8006908:	3130      	adds	r1, #48	@ 0x30
 800690a:	7083      	strb	r3, [r0, #2]
 800690c:	70c1      	strb	r1, [r0, #3]
 800690e:	1d03      	adds	r3, r0, #4
 8006910:	e7f1      	b.n	80068f6 <__exponent+0x58>
	...

08006914 <_printf_float>:
 8006914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006918:	b08d      	sub	sp, #52	@ 0x34
 800691a:	460c      	mov	r4, r1
 800691c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006920:	4616      	mov	r6, r2
 8006922:	461f      	mov	r7, r3
 8006924:	4605      	mov	r5, r0
 8006926:	f000 fcdb 	bl	80072e0 <_localeconv_r>
 800692a:	6803      	ldr	r3, [r0, #0]
 800692c:	9304      	str	r3, [sp, #16]
 800692e:	4618      	mov	r0, r3
 8006930:	f7f9 fcbe 	bl	80002b0 <strlen>
 8006934:	2300      	movs	r3, #0
 8006936:	930a      	str	r3, [sp, #40]	@ 0x28
 8006938:	f8d8 3000 	ldr.w	r3, [r8]
 800693c:	9005      	str	r0, [sp, #20]
 800693e:	3307      	adds	r3, #7
 8006940:	f023 0307 	bic.w	r3, r3, #7
 8006944:	f103 0208 	add.w	r2, r3, #8
 8006948:	f894 a018 	ldrb.w	sl, [r4, #24]
 800694c:	f8d4 b000 	ldr.w	fp, [r4]
 8006950:	f8c8 2000 	str.w	r2, [r8]
 8006954:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006958:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800695c:	9307      	str	r3, [sp, #28]
 800695e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006962:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006966:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800696a:	4b9c      	ldr	r3, [pc, #624]	@ (8006bdc <_printf_float+0x2c8>)
 800696c:	f04f 32ff 	mov.w	r2, #4294967295
 8006970:	f7fa f8fc 	bl	8000b6c <__aeabi_dcmpun>
 8006974:	bb70      	cbnz	r0, 80069d4 <_printf_float+0xc0>
 8006976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800697a:	4b98      	ldr	r3, [pc, #608]	@ (8006bdc <_printf_float+0x2c8>)
 800697c:	f04f 32ff 	mov.w	r2, #4294967295
 8006980:	f7fa f8d6 	bl	8000b30 <__aeabi_dcmple>
 8006984:	bb30      	cbnz	r0, 80069d4 <_printf_float+0xc0>
 8006986:	2200      	movs	r2, #0
 8006988:	2300      	movs	r3, #0
 800698a:	4640      	mov	r0, r8
 800698c:	4649      	mov	r1, r9
 800698e:	f7fa f8c5 	bl	8000b1c <__aeabi_dcmplt>
 8006992:	b110      	cbz	r0, 800699a <_printf_float+0x86>
 8006994:	232d      	movs	r3, #45	@ 0x2d
 8006996:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800699a:	4a91      	ldr	r2, [pc, #580]	@ (8006be0 <_printf_float+0x2cc>)
 800699c:	4b91      	ldr	r3, [pc, #580]	@ (8006be4 <_printf_float+0x2d0>)
 800699e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80069a2:	bf94      	ite	ls
 80069a4:	4690      	movls	r8, r2
 80069a6:	4698      	movhi	r8, r3
 80069a8:	2303      	movs	r3, #3
 80069aa:	6123      	str	r3, [r4, #16]
 80069ac:	f02b 0304 	bic.w	r3, fp, #4
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	f04f 0900 	mov.w	r9, #0
 80069b6:	9700      	str	r7, [sp, #0]
 80069b8:	4633      	mov	r3, r6
 80069ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80069bc:	4621      	mov	r1, r4
 80069be:	4628      	mov	r0, r5
 80069c0:	f000 f9d2 	bl	8006d68 <_printf_common>
 80069c4:	3001      	adds	r0, #1
 80069c6:	f040 808d 	bne.w	8006ae4 <_printf_float+0x1d0>
 80069ca:	f04f 30ff 	mov.w	r0, #4294967295
 80069ce:	b00d      	add	sp, #52	@ 0x34
 80069d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d4:	4642      	mov	r2, r8
 80069d6:	464b      	mov	r3, r9
 80069d8:	4640      	mov	r0, r8
 80069da:	4649      	mov	r1, r9
 80069dc:	f7fa f8c6 	bl	8000b6c <__aeabi_dcmpun>
 80069e0:	b140      	cbz	r0, 80069f4 <_printf_float+0xe0>
 80069e2:	464b      	mov	r3, r9
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bfbc      	itt	lt
 80069e8:	232d      	movlt	r3, #45	@ 0x2d
 80069ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069ee:	4a7e      	ldr	r2, [pc, #504]	@ (8006be8 <_printf_float+0x2d4>)
 80069f0:	4b7e      	ldr	r3, [pc, #504]	@ (8006bec <_printf_float+0x2d8>)
 80069f2:	e7d4      	b.n	800699e <_printf_float+0x8a>
 80069f4:	6863      	ldr	r3, [r4, #4]
 80069f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80069fa:	9206      	str	r2, [sp, #24]
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	d13b      	bne.n	8006a78 <_printf_float+0x164>
 8006a00:	2306      	movs	r3, #6
 8006a02:	6063      	str	r3, [r4, #4]
 8006a04:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006a08:	2300      	movs	r3, #0
 8006a0a:	6022      	str	r2, [r4, #0]
 8006a0c:	9303      	str	r3, [sp, #12]
 8006a0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a10:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006a14:	ab09      	add	r3, sp, #36	@ 0x24
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	6861      	ldr	r1, [r4, #4]
 8006a1a:	ec49 8b10 	vmov	d0, r8, r9
 8006a1e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a22:	4628      	mov	r0, r5
 8006a24:	f7ff fed6 	bl	80067d4 <__cvt>
 8006a28:	9b06      	ldr	r3, [sp, #24]
 8006a2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a2c:	2b47      	cmp	r3, #71	@ 0x47
 8006a2e:	4680      	mov	r8, r0
 8006a30:	d129      	bne.n	8006a86 <_printf_float+0x172>
 8006a32:	1cc8      	adds	r0, r1, #3
 8006a34:	db02      	blt.n	8006a3c <_printf_float+0x128>
 8006a36:	6863      	ldr	r3, [r4, #4]
 8006a38:	4299      	cmp	r1, r3
 8006a3a:	dd41      	ble.n	8006ac0 <_printf_float+0x1ac>
 8006a3c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a40:	fa5f fa8a 	uxtb.w	sl, sl
 8006a44:	3901      	subs	r1, #1
 8006a46:	4652      	mov	r2, sl
 8006a48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a4e:	f7ff ff26 	bl	800689e <__exponent>
 8006a52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a54:	1813      	adds	r3, r2, r0
 8006a56:	2a01      	cmp	r2, #1
 8006a58:	4681      	mov	r9, r0
 8006a5a:	6123      	str	r3, [r4, #16]
 8006a5c:	dc02      	bgt.n	8006a64 <_printf_float+0x150>
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	07d2      	lsls	r2, r2, #31
 8006a62:	d501      	bpl.n	8006a68 <_printf_float+0x154>
 8006a64:	3301      	adds	r3, #1
 8006a66:	6123      	str	r3, [r4, #16]
 8006a68:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0a2      	beq.n	80069b6 <_printf_float+0xa2>
 8006a70:	232d      	movs	r3, #45	@ 0x2d
 8006a72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a76:	e79e      	b.n	80069b6 <_printf_float+0xa2>
 8006a78:	9a06      	ldr	r2, [sp, #24]
 8006a7a:	2a47      	cmp	r2, #71	@ 0x47
 8006a7c:	d1c2      	bne.n	8006a04 <_printf_float+0xf0>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1c0      	bne.n	8006a04 <_printf_float+0xf0>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e7bd      	b.n	8006a02 <_printf_float+0xee>
 8006a86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a8a:	d9db      	bls.n	8006a44 <_printf_float+0x130>
 8006a8c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a90:	d118      	bne.n	8006ac4 <_printf_float+0x1b0>
 8006a92:	2900      	cmp	r1, #0
 8006a94:	6863      	ldr	r3, [r4, #4]
 8006a96:	dd0b      	ble.n	8006ab0 <_printf_float+0x19c>
 8006a98:	6121      	str	r1, [r4, #16]
 8006a9a:	b913      	cbnz	r3, 8006aa2 <_printf_float+0x18e>
 8006a9c:	6822      	ldr	r2, [r4, #0]
 8006a9e:	07d0      	lsls	r0, r2, #31
 8006aa0:	d502      	bpl.n	8006aa8 <_printf_float+0x194>
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	440b      	add	r3, r1
 8006aa6:	6123      	str	r3, [r4, #16]
 8006aa8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006aaa:	f04f 0900 	mov.w	r9, #0
 8006aae:	e7db      	b.n	8006a68 <_printf_float+0x154>
 8006ab0:	b913      	cbnz	r3, 8006ab8 <_printf_float+0x1a4>
 8006ab2:	6822      	ldr	r2, [r4, #0]
 8006ab4:	07d2      	lsls	r2, r2, #31
 8006ab6:	d501      	bpl.n	8006abc <_printf_float+0x1a8>
 8006ab8:	3302      	adds	r3, #2
 8006aba:	e7f4      	b.n	8006aa6 <_printf_float+0x192>
 8006abc:	2301      	movs	r3, #1
 8006abe:	e7f2      	b.n	8006aa6 <_printf_float+0x192>
 8006ac0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ac6:	4299      	cmp	r1, r3
 8006ac8:	db05      	blt.n	8006ad6 <_printf_float+0x1c2>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	6121      	str	r1, [r4, #16]
 8006ace:	07d8      	lsls	r0, r3, #31
 8006ad0:	d5ea      	bpl.n	8006aa8 <_printf_float+0x194>
 8006ad2:	1c4b      	adds	r3, r1, #1
 8006ad4:	e7e7      	b.n	8006aa6 <_printf_float+0x192>
 8006ad6:	2900      	cmp	r1, #0
 8006ad8:	bfd4      	ite	le
 8006ada:	f1c1 0202 	rsble	r2, r1, #2
 8006ade:	2201      	movgt	r2, #1
 8006ae0:	4413      	add	r3, r2
 8006ae2:	e7e0      	b.n	8006aa6 <_printf_float+0x192>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	055a      	lsls	r2, r3, #21
 8006ae8:	d407      	bmi.n	8006afa <_printf_float+0x1e6>
 8006aea:	6923      	ldr	r3, [r4, #16]
 8006aec:	4642      	mov	r2, r8
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b8      	blx	r7
 8006af4:	3001      	adds	r0, #1
 8006af6:	d12b      	bne.n	8006b50 <_printf_float+0x23c>
 8006af8:	e767      	b.n	80069ca <_printf_float+0xb6>
 8006afa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006afe:	f240 80dd 	bls.w	8006cbc <_printf_float+0x3a8>
 8006b02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b06:	2200      	movs	r2, #0
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f7f9 fffd 	bl	8000b08 <__aeabi_dcmpeq>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d033      	beq.n	8006b7a <_printf_float+0x266>
 8006b12:	4a37      	ldr	r2, [pc, #220]	@ (8006bf0 <_printf_float+0x2dc>)
 8006b14:	2301      	movs	r3, #1
 8006b16:	4631      	mov	r1, r6
 8006b18:	4628      	mov	r0, r5
 8006b1a:	47b8      	blx	r7
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	f43f af54 	beq.w	80069ca <_printf_float+0xb6>
 8006b22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b26:	4543      	cmp	r3, r8
 8006b28:	db02      	blt.n	8006b30 <_printf_float+0x21c>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	07d8      	lsls	r0, r3, #31
 8006b2e:	d50f      	bpl.n	8006b50 <_printf_float+0x23c>
 8006b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f43f af45 	beq.w	80069ca <_printf_float+0xb6>
 8006b40:	f04f 0900 	mov.w	r9, #0
 8006b44:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b48:	f104 0a1a 	add.w	sl, r4, #26
 8006b4c:	45c8      	cmp	r8, r9
 8006b4e:	dc09      	bgt.n	8006b64 <_printf_float+0x250>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	079b      	lsls	r3, r3, #30
 8006b54:	f100 8103 	bmi.w	8006d5e <_printf_float+0x44a>
 8006b58:	68e0      	ldr	r0, [r4, #12]
 8006b5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b5c:	4298      	cmp	r0, r3
 8006b5e:	bfb8      	it	lt
 8006b60:	4618      	movlt	r0, r3
 8006b62:	e734      	b.n	80069ce <_printf_float+0xba>
 8006b64:	2301      	movs	r3, #1
 8006b66:	4652      	mov	r2, sl
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b8      	blx	r7
 8006b6e:	3001      	adds	r0, #1
 8006b70:	f43f af2b 	beq.w	80069ca <_printf_float+0xb6>
 8006b74:	f109 0901 	add.w	r9, r9, #1
 8006b78:	e7e8      	b.n	8006b4c <_printf_float+0x238>
 8006b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	dc39      	bgt.n	8006bf4 <_printf_float+0x2e0>
 8006b80:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf0 <_printf_float+0x2dc>)
 8006b82:	2301      	movs	r3, #1
 8006b84:	4631      	mov	r1, r6
 8006b86:	4628      	mov	r0, r5
 8006b88:	47b8      	blx	r7
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	f43f af1d 	beq.w	80069ca <_printf_float+0xb6>
 8006b90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b94:	ea59 0303 	orrs.w	r3, r9, r3
 8006b98:	d102      	bne.n	8006ba0 <_printf_float+0x28c>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	07d9      	lsls	r1, r3, #31
 8006b9e:	d5d7      	bpl.n	8006b50 <_printf_float+0x23c>
 8006ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	47b8      	blx	r7
 8006baa:	3001      	adds	r0, #1
 8006bac:	f43f af0d 	beq.w	80069ca <_printf_float+0xb6>
 8006bb0:	f04f 0a00 	mov.w	sl, #0
 8006bb4:	f104 0b1a 	add.w	fp, r4, #26
 8006bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bba:	425b      	negs	r3, r3
 8006bbc:	4553      	cmp	r3, sl
 8006bbe:	dc01      	bgt.n	8006bc4 <_printf_float+0x2b0>
 8006bc0:	464b      	mov	r3, r9
 8006bc2:	e793      	b.n	8006aec <_printf_float+0x1d8>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	465a      	mov	r2, fp
 8006bc8:	4631      	mov	r1, r6
 8006bca:	4628      	mov	r0, r5
 8006bcc:	47b8      	blx	r7
 8006bce:	3001      	adds	r0, #1
 8006bd0:	f43f aefb 	beq.w	80069ca <_printf_float+0xb6>
 8006bd4:	f10a 0a01 	add.w	sl, sl, #1
 8006bd8:	e7ee      	b.n	8006bb8 <_printf_float+0x2a4>
 8006bda:	bf00      	nop
 8006bdc:	7fefffff 	.word	0x7fefffff
 8006be0:	0800956c 	.word	0x0800956c
 8006be4:	08009570 	.word	0x08009570
 8006be8:	08009574 	.word	0x08009574
 8006bec:	08009578 	.word	0x08009578
 8006bf0:	0800957c 	.word	0x0800957c
 8006bf4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bf6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bfa:	4553      	cmp	r3, sl
 8006bfc:	bfa8      	it	ge
 8006bfe:	4653      	movge	r3, sl
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	4699      	mov	r9, r3
 8006c04:	dc36      	bgt.n	8006c74 <_printf_float+0x360>
 8006c06:	f04f 0b00 	mov.w	fp, #0
 8006c0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c0e:	f104 021a 	add.w	r2, r4, #26
 8006c12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c14:	9306      	str	r3, [sp, #24]
 8006c16:	eba3 0309 	sub.w	r3, r3, r9
 8006c1a:	455b      	cmp	r3, fp
 8006c1c:	dc31      	bgt.n	8006c82 <_printf_float+0x36e>
 8006c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c20:	459a      	cmp	sl, r3
 8006c22:	dc3a      	bgt.n	8006c9a <_printf_float+0x386>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	07da      	lsls	r2, r3, #31
 8006c28:	d437      	bmi.n	8006c9a <_printf_float+0x386>
 8006c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c2c:	ebaa 0903 	sub.w	r9, sl, r3
 8006c30:	9b06      	ldr	r3, [sp, #24]
 8006c32:	ebaa 0303 	sub.w	r3, sl, r3
 8006c36:	4599      	cmp	r9, r3
 8006c38:	bfa8      	it	ge
 8006c3a:	4699      	movge	r9, r3
 8006c3c:	f1b9 0f00 	cmp.w	r9, #0
 8006c40:	dc33      	bgt.n	8006caa <_printf_float+0x396>
 8006c42:	f04f 0800 	mov.w	r8, #0
 8006c46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c4a:	f104 0b1a 	add.w	fp, r4, #26
 8006c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c50:	ebaa 0303 	sub.w	r3, sl, r3
 8006c54:	eba3 0309 	sub.w	r3, r3, r9
 8006c58:	4543      	cmp	r3, r8
 8006c5a:	f77f af79 	ble.w	8006b50 <_printf_float+0x23c>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	465a      	mov	r2, fp
 8006c62:	4631      	mov	r1, r6
 8006c64:	4628      	mov	r0, r5
 8006c66:	47b8      	blx	r7
 8006c68:	3001      	adds	r0, #1
 8006c6a:	f43f aeae 	beq.w	80069ca <_printf_float+0xb6>
 8006c6e:	f108 0801 	add.w	r8, r8, #1
 8006c72:	e7ec      	b.n	8006c4e <_printf_float+0x33a>
 8006c74:	4642      	mov	r2, r8
 8006c76:	4631      	mov	r1, r6
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d1c2      	bne.n	8006c06 <_printf_float+0x2f2>
 8006c80:	e6a3      	b.n	80069ca <_printf_float+0xb6>
 8006c82:	2301      	movs	r3, #1
 8006c84:	4631      	mov	r1, r6
 8006c86:	4628      	mov	r0, r5
 8006c88:	9206      	str	r2, [sp, #24]
 8006c8a:	47b8      	blx	r7
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	f43f ae9c 	beq.w	80069ca <_printf_float+0xb6>
 8006c92:	9a06      	ldr	r2, [sp, #24]
 8006c94:	f10b 0b01 	add.w	fp, fp, #1
 8006c98:	e7bb      	b.n	8006c12 <_printf_float+0x2fe>
 8006c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b8      	blx	r7
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d1c0      	bne.n	8006c2a <_printf_float+0x316>
 8006ca8:	e68f      	b.n	80069ca <_printf_float+0xb6>
 8006caa:	9a06      	ldr	r2, [sp, #24]
 8006cac:	464b      	mov	r3, r9
 8006cae:	4442      	add	r2, r8
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	47b8      	blx	r7
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	d1c3      	bne.n	8006c42 <_printf_float+0x32e>
 8006cba:	e686      	b.n	80069ca <_printf_float+0xb6>
 8006cbc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006cc0:	f1ba 0f01 	cmp.w	sl, #1
 8006cc4:	dc01      	bgt.n	8006cca <_printf_float+0x3b6>
 8006cc6:	07db      	lsls	r3, r3, #31
 8006cc8:	d536      	bpl.n	8006d38 <_printf_float+0x424>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4642      	mov	r2, r8
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	47b8      	blx	r7
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	f43f ae78 	beq.w	80069ca <_printf_float+0xb6>
 8006cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b8      	blx	r7
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	f43f ae70 	beq.w	80069ca <_printf_float+0xb6>
 8006cea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cf6:	f7f9 ff07 	bl	8000b08 <__aeabi_dcmpeq>
 8006cfa:	b9c0      	cbnz	r0, 8006d2e <_printf_float+0x41a>
 8006cfc:	4653      	mov	r3, sl
 8006cfe:	f108 0201 	add.w	r2, r8, #1
 8006d02:	4631      	mov	r1, r6
 8006d04:	4628      	mov	r0, r5
 8006d06:	47b8      	blx	r7
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d10c      	bne.n	8006d26 <_printf_float+0x412>
 8006d0c:	e65d      	b.n	80069ca <_printf_float+0xb6>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	465a      	mov	r2, fp
 8006d12:	4631      	mov	r1, r6
 8006d14:	4628      	mov	r0, r5
 8006d16:	47b8      	blx	r7
 8006d18:	3001      	adds	r0, #1
 8006d1a:	f43f ae56 	beq.w	80069ca <_printf_float+0xb6>
 8006d1e:	f108 0801 	add.w	r8, r8, #1
 8006d22:	45d0      	cmp	r8, sl
 8006d24:	dbf3      	blt.n	8006d0e <_printf_float+0x3fa>
 8006d26:	464b      	mov	r3, r9
 8006d28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d2c:	e6df      	b.n	8006aee <_printf_float+0x1da>
 8006d2e:	f04f 0800 	mov.w	r8, #0
 8006d32:	f104 0b1a 	add.w	fp, r4, #26
 8006d36:	e7f4      	b.n	8006d22 <_printf_float+0x40e>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	4642      	mov	r2, r8
 8006d3c:	e7e1      	b.n	8006d02 <_printf_float+0x3ee>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	464a      	mov	r2, r9
 8006d42:	4631      	mov	r1, r6
 8006d44:	4628      	mov	r0, r5
 8006d46:	47b8      	blx	r7
 8006d48:	3001      	adds	r0, #1
 8006d4a:	f43f ae3e 	beq.w	80069ca <_printf_float+0xb6>
 8006d4e:	f108 0801 	add.w	r8, r8, #1
 8006d52:	68e3      	ldr	r3, [r4, #12]
 8006d54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d56:	1a5b      	subs	r3, r3, r1
 8006d58:	4543      	cmp	r3, r8
 8006d5a:	dcf0      	bgt.n	8006d3e <_printf_float+0x42a>
 8006d5c:	e6fc      	b.n	8006b58 <_printf_float+0x244>
 8006d5e:	f04f 0800 	mov.w	r8, #0
 8006d62:	f104 0919 	add.w	r9, r4, #25
 8006d66:	e7f4      	b.n	8006d52 <_printf_float+0x43e>

08006d68 <_printf_common>:
 8006d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	4616      	mov	r6, r2
 8006d6e:	4698      	mov	r8, r3
 8006d70:	688a      	ldr	r2, [r1, #8]
 8006d72:	690b      	ldr	r3, [r1, #16]
 8006d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	bfb8      	it	lt
 8006d7c:	4613      	movlt	r3, r2
 8006d7e:	6033      	str	r3, [r6, #0]
 8006d80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d84:	4607      	mov	r7, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	b10a      	cbz	r2, 8006d8e <_printf_common+0x26>
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	6033      	str	r3, [r6, #0]
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	0699      	lsls	r1, r3, #26
 8006d92:	bf42      	ittt	mi
 8006d94:	6833      	ldrmi	r3, [r6, #0]
 8006d96:	3302      	addmi	r3, #2
 8006d98:	6033      	strmi	r3, [r6, #0]
 8006d9a:	6825      	ldr	r5, [r4, #0]
 8006d9c:	f015 0506 	ands.w	r5, r5, #6
 8006da0:	d106      	bne.n	8006db0 <_printf_common+0x48>
 8006da2:	f104 0a19 	add.w	sl, r4, #25
 8006da6:	68e3      	ldr	r3, [r4, #12]
 8006da8:	6832      	ldr	r2, [r6, #0]
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	42ab      	cmp	r3, r5
 8006dae:	dc26      	bgt.n	8006dfe <_printf_common+0x96>
 8006db0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006db4:	6822      	ldr	r2, [r4, #0]
 8006db6:	3b00      	subs	r3, #0
 8006db8:	bf18      	it	ne
 8006dba:	2301      	movne	r3, #1
 8006dbc:	0692      	lsls	r2, r2, #26
 8006dbe:	d42b      	bmi.n	8006e18 <_printf_common+0xb0>
 8006dc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006dc4:	4641      	mov	r1, r8
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	47c8      	blx	r9
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d01e      	beq.n	8006e0c <_printf_common+0xa4>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	6922      	ldr	r2, [r4, #16]
 8006dd2:	f003 0306 	and.w	r3, r3, #6
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	bf02      	ittt	eq
 8006dda:	68e5      	ldreq	r5, [r4, #12]
 8006ddc:	6833      	ldreq	r3, [r6, #0]
 8006dde:	1aed      	subeq	r5, r5, r3
 8006de0:	68a3      	ldr	r3, [r4, #8]
 8006de2:	bf0c      	ite	eq
 8006de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006de8:	2500      	movne	r5, #0
 8006dea:	4293      	cmp	r3, r2
 8006dec:	bfc4      	itt	gt
 8006dee:	1a9b      	subgt	r3, r3, r2
 8006df0:	18ed      	addgt	r5, r5, r3
 8006df2:	2600      	movs	r6, #0
 8006df4:	341a      	adds	r4, #26
 8006df6:	42b5      	cmp	r5, r6
 8006df8:	d11a      	bne.n	8006e30 <_printf_common+0xc8>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e008      	b.n	8006e10 <_printf_common+0xa8>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4652      	mov	r2, sl
 8006e02:	4641      	mov	r1, r8
 8006e04:	4638      	mov	r0, r7
 8006e06:	47c8      	blx	r9
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d103      	bne.n	8006e14 <_printf_common+0xac>
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e14:	3501      	adds	r5, #1
 8006e16:	e7c6      	b.n	8006da6 <_printf_common+0x3e>
 8006e18:	18e1      	adds	r1, r4, r3
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	2030      	movs	r0, #48	@ 0x30
 8006e1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e22:	4422      	add	r2, r4
 8006e24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e2c:	3302      	adds	r3, #2
 8006e2e:	e7c7      	b.n	8006dc0 <_printf_common+0x58>
 8006e30:	2301      	movs	r3, #1
 8006e32:	4622      	mov	r2, r4
 8006e34:	4641      	mov	r1, r8
 8006e36:	4638      	mov	r0, r7
 8006e38:	47c8      	blx	r9
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d0e6      	beq.n	8006e0c <_printf_common+0xa4>
 8006e3e:	3601      	adds	r6, #1
 8006e40:	e7d9      	b.n	8006df6 <_printf_common+0x8e>
	...

08006e44 <_printf_i>:
 8006e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	7e0f      	ldrb	r7, [r1, #24]
 8006e4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e4c:	2f78      	cmp	r7, #120	@ 0x78
 8006e4e:	4691      	mov	r9, r2
 8006e50:	4680      	mov	r8, r0
 8006e52:	460c      	mov	r4, r1
 8006e54:	469a      	mov	sl, r3
 8006e56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e5a:	d807      	bhi.n	8006e6c <_printf_i+0x28>
 8006e5c:	2f62      	cmp	r7, #98	@ 0x62
 8006e5e:	d80a      	bhi.n	8006e76 <_printf_i+0x32>
 8006e60:	2f00      	cmp	r7, #0
 8006e62:	f000 80d2 	beq.w	800700a <_printf_i+0x1c6>
 8006e66:	2f58      	cmp	r7, #88	@ 0x58
 8006e68:	f000 80b9 	beq.w	8006fde <_printf_i+0x19a>
 8006e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e74:	e03a      	b.n	8006eec <_printf_i+0xa8>
 8006e76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e7a:	2b15      	cmp	r3, #21
 8006e7c:	d8f6      	bhi.n	8006e6c <_printf_i+0x28>
 8006e7e:	a101      	add	r1, pc, #4	@ (adr r1, 8006e84 <_printf_i+0x40>)
 8006e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e84:	08006edd 	.word	0x08006edd
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006e6d 	.word	0x08006e6d
 8006e90:	08006e6d 	.word	0x08006e6d
 8006e94:	08006e6d 	.word	0x08006e6d
 8006e98:	08006e6d 	.word	0x08006e6d
 8006e9c:	08006ef1 	.word	0x08006ef1
 8006ea0:	08006e6d 	.word	0x08006e6d
 8006ea4:	08006e6d 	.word	0x08006e6d
 8006ea8:	08006e6d 	.word	0x08006e6d
 8006eac:	08006e6d 	.word	0x08006e6d
 8006eb0:	08006ff1 	.word	0x08006ff1
 8006eb4:	08006f1b 	.word	0x08006f1b
 8006eb8:	08006fab 	.word	0x08006fab
 8006ebc:	08006e6d 	.word	0x08006e6d
 8006ec0:	08006e6d 	.word	0x08006e6d
 8006ec4:	08007013 	.word	0x08007013
 8006ec8:	08006e6d 	.word	0x08006e6d
 8006ecc:	08006f1b 	.word	0x08006f1b
 8006ed0:	08006e6d 	.word	0x08006e6d
 8006ed4:	08006e6d 	.word	0x08006e6d
 8006ed8:	08006fb3 	.word	0x08006fb3
 8006edc:	6833      	ldr	r3, [r6, #0]
 8006ede:	1d1a      	adds	r2, r3, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6032      	str	r2, [r6, #0]
 8006ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ee8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006eec:	2301      	movs	r3, #1
 8006eee:	e09d      	b.n	800702c <_printf_i+0x1e8>
 8006ef0:	6833      	ldr	r3, [r6, #0]
 8006ef2:	6820      	ldr	r0, [r4, #0]
 8006ef4:	1d19      	adds	r1, r3, #4
 8006ef6:	6031      	str	r1, [r6, #0]
 8006ef8:	0606      	lsls	r6, r0, #24
 8006efa:	d501      	bpl.n	8006f00 <_printf_i+0xbc>
 8006efc:	681d      	ldr	r5, [r3, #0]
 8006efe:	e003      	b.n	8006f08 <_printf_i+0xc4>
 8006f00:	0645      	lsls	r5, r0, #25
 8006f02:	d5fb      	bpl.n	8006efc <_printf_i+0xb8>
 8006f04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f08:	2d00      	cmp	r5, #0
 8006f0a:	da03      	bge.n	8006f14 <_printf_i+0xd0>
 8006f0c:	232d      	movs	r3, #45	@ 0x2d
 8006f0e:	426d      	negs	r5, r5
 8006f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f14:	4859      	ldr	r0, [pc, #356]	@ (800707c <_printf_i+0x238>)
 8006f16:	230a      	movs	r3, #10
 8006f18:	e011      	b.n	8006f3e <_printf_i+0xfa>
 8006f1a:	6821      	ldr	r1, [r4, #0]
 8006f1c:	6833      	ldr	r3, [r6, #0]
 8006f1e:	0608      	lsls	r0, r1, #24
 8006f20:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f24:	d402      	bmi.n	8006f2c <_printf_i+0xe8>
 8006f26:	0649      	lsls	r1, r1, #25
 8006f28:	bf48      	it	mi
 8006f2a:	b2ad      	uxthmi	r5, r5
 8006f2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f2e:	4853      	ldr	r0, [pc, #332]	@ (800707c <_printf_i+0x238>)
 8006f30:	6033      	str	r3, [r6, #0]
 8006f32:	bf14      	ite	ne
 8006f34:	230a      	movne	r3, #10
 8006f36:	2308      	moveq	r3, #8
 8006f38:	2100      	movs	r1, #0
 8006f3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f3e:	6866      	ldr	r6, [r4, #4]
 8006f40:	60a6      	str	r6, [r4, #8]
 8006f42:	2e00      	cmp	r6, #0
 8006f44:	bfa2      	ittt	ge
 8006f46:	6821      	ldrge	r1, [r4, #0]
 8006f48:	f021 0104 	bicge.w	r1, r1, #4
 8006f4c:	6021      	strge	r1, [r4, #0]
 8006f4e:	b90d      	cbnz	r5, 8006f54 <_printf_i+0x110>
 8006f50:	2e00      	cmp	r6, #0
 8006f52:	d04b      	beq.n	8006fec <_printf_i+0x1a8>
 8006f54:	4616      	mov	r6, r2
 8006f56:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f5a:	fb03 5711 	mls	r7, r3, r1, r5
 8006f5e:	5dc7      	ldrb	r7, [r0, r7]
 8006f60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f64:	462f      	mov	r7, r5
 8006f66:	42bb      	cmp	r3, r7
 8006f68:	460d      	mov	r5, r1
 8006f6a:	d9f4      	bls.n	8006f56 <_printf_i+0x112>
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d10b      	bne.n	8006f88 <_printf_i+0x144>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	07df      	lsls	r7, r3, #31
 8006f74:	d508      	bpl.n	8006f88 <_printf_i+0x144>
 8006f76:	6923      	ldr	r3, [r4, #16]
 8006f78:	6861      	ldr	r1, [r4, #4]
 8006f7a:	4299      	cmp	r1, r3
 8006f7c:	bfde      	ittt	le
 8006f7e:	2330      	movle	r3, #48	@ 0x30
 8006f80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f88:	1b92      	subs	r2, r2, r6
 8006f8a:	6122      	str	r2, [r4, #16]
 8006f8c:	f8cd a000 	str.w	sl, [sp]
 8006f90:	464b      	mov	r3, r9
 8006f92:	aa03      	add	r2, sp, #12
 8006f94:	4621      	mov	r1, r4
 8006f96:	4640      	mov	r0, r8
 8006f98:	f7ff fee6 	bl	8006d68 <_printf_common>
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d14a      	bne.n	8007036 <_printf_i+0x1f2>
 8006fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa4:	b004      	add	sp, #16
 8006fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	f043 0320 	orr.w	r3, r3, #32
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	4833      	ldr	r0, [pc, #204]	@ (8007080 <_printf_i+0x23c>)
 8006fb4:	2778      	movs	r7, #120	@ 0x78
 8006fb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	6831      	ldr	r1, [r6, #0]
 8006fbe:	061f      	lsls	r7, r3, #24
 8006fc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fc4:	d402      	bmi.n	8006fcc <_printf_i+0x188>
 8006fc6:	065f      	lsls	r7, r3, #25
 8006fc8:	bf48      	it	mi
 8006fca:	b2ad      	uxthmi	r5, r5
 8006fcc:	6031      	str	r1, [r6, #0]
 8006fce:	07d9      	lsls	r1, r3, #31
 8006fd0:	bf44      	itt	mi
 8006fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8006fd6:	6023      	strmi	r3, [r4, #0]
 8006fd8:	b11d      	cbz	r5, 8006fe2 <_printf_i+0x19e>
 8006fda:	2310      	movs	r3, #16
 8006fdc:	e7ac      	b.n	8006f38 <_printf_i+0xf4>
 8006fde:	4827      	ldr	r0, [pc, #156]	@ (800707c <_printf_i+0x238>)
 8006fe0:	e7e9      	b.n	8006fb6 <_printf_i+0x172>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	f023 0320 	bic.w	r3, r3, #32
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	e7f6      	b.n	8006fda <_printf_i+0x196>
 8006fec:	4616      	mov	r6, r2
 8006fee:	e7bd      	b.n	8006f6c <_printf_i+0x128>
 8006ff0:	6833      	ldr	r3, [r6, #0]
 8006ff2:	6825      	ldr	r5, [r4, #0]
 8006ff4:	6961      	ldr	r1, [r4, #20]
 8006ff6:	1d18      	adds	r0, r3, #4
 8006ff8:	6030      	str	r0, [r6, #0]
 8006ffa:	062e      	lsls	r6, r5, #24
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	d501      	bpl.n	8007004 <_printf_i+0x1c0>
 8007000:	6019      	str	r1, [r3, #0]
 8007002:	e002      	b.n	800700a <_printf_i+0x1c6>
 8007004:	0668      	lsls	r0, r5, #25
 8007006:	d5fb      	bpl.n	8007000 <_printf_i+0x1bc>
 8007008:	8019      	strh	r1, [r3, #0]
 800700a:	2300      	movs	r3, #0
 800700c:	6123      	str	r3, [r4, #16]
 800700e:	4616      	mov	r6, r2
 8007010:	e7bc      	b.n	8006f8c <_printf_i+0x148>
 8007012:	6833      	ldr	r3, [r6, #0]
 8007014:	1d1a      	adds	r2, r3, #4
 8007016:	6032      	str	r2, [r6, #0]
 8007018:	681e      	ldr	r6, [r3, #0]
 800701a:	6862      	ldr	r2, [r4, #4]
 800701c:	2100      	movs	r1, #0
 800701e:	4630      	mov	r0, r6
 8007020:	f7f9 f8f6 	bl	8000210 <memchr>
 8007024:	b108      	cbz	r0, 800702a <_printf_i+0x1e6>
 8007026:	1b80      	subs	r0, r0, r6
 8007028:	6060      	str	r0, [r4, #4]
 800702a:	6863      	ldr	r3, [r4, #4]
 800702c:	6123      	str	r3, [r4, #16]
 800702e:	2300      	movs	r3, #0
 8007030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007034:	e7aa      	b.n	8006f8c <_printf_i+0x148>
 8007036:	6923      	ldr	r3, [r4, #16]
 8007038:	4632      	mov	r2, r6
 800703a:	4649      	mov	r1, r9
 800703c:	4640      	mov	r0, r8
 800703e:	47d0      	blx	sl
 8007040:	3001      	adds	r0, #1
 8007042:	d0ad      	beq.n	8006fa0 <_printf_i+0x15c>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	079b      	lsls	r3, r3, #30
 8007048:	d413      	bmi.n	8007072 <_printf_i+0x22e>
 800704a:	68e0      	ldr	r0, [r4, #12]
 800704c:	9b03      	ldr	r3, [sp, #12]
 800704e:	4298      	cmp	r0, r3
 8007050:	bfb8      	it	lt
 8007052:	4618      	movlt	r0, r3
 8007054:	e7a6      	b.n	8006fa4 <_printf_i+0x160>
 8007056:	2301      	movs	r3, #1
 8007058:	4632      	mov	r2, r6
 800705a:	4649      	mov	r1, r9
 800705c:	4640      	mov	r0, r8
 800705e:	47d0      	blx	sl
 8007060:	3001      	adds	r0, #1
 8007062:	d09d      	beq.n	8006fa0 <_printf_i+0x15c>
 8007064:	3501      	adds	r5, #1
 8007066:	68e3      	ldr	r3, [r4, #12]
 8007068:	9903      	ldr	r1, [sp, #12]
 800706a:	1a5b      	subs	r3, r3, r1
 800706c:	42ab      	cmp	r3, r5
 800706e:	dcf2      	bgt.n	8007056 <_printf_i+0x212>
 8007070:	e7eb      	b.n	800704a <_printf_i+0x206>
 8007072:	2500      	movs	r5, #0
 8007074:	f104 0619 	add.w	r6, r4, #25
 8007078:	e7f5      	b.n	8007066 <_printf_i+0x222>
 800707a:	bf00      	nop
 800707c:	0800957e 	.word	0x0800957e
 8007080:	0800958f 	.word	0x0800958f

08007084 <std>:
 8007084:	2300      	movs	r3, #0
 8007086:	b510      	push	{r4, lr}
 8007088:	4604      	mov	r4, r0
 800708a:	e9c0 3300 	strd	r3, r3, [r0]
 800708e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007092:	6083      	str	r3, [r0, #8]
 8007094:	8181      	strh	r1, [r0, #12]
 8007096:	6643      	str	r3, [r0, #100]	@ 0x64
 8007098:	81c2      	strh	r2, [r0, #14]
 800709a:	6183      	str	r3, [r0, #24]
 800709c:	4619      	mov	r1, r3
 800709e:	2208      	movs	r2, #8
 80070a0:	305c      	adds	r0, #92	@ 0x5c
 80070a2:	f000 f914 	bl	80072ce <memset>
 80070a6:	4b0d      	ldr	r3, [pc, #52]	@ (80070dc <std+0x58>)
 80070a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80070aa:	4b0d      	ldr	r3, [pc, #52]	@ (80070e0 <std+0x5c>)
 80070ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070ae:	4b0d      	ldr	r3, [pc, #52]	@ (80070e4 <std+0x60>)
 80070b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070b2:	4b0d      	ldr	r3, [pc, #52]	@ (80070e8 <std+0x64>)
 80070b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80070b6:	4b0d      	ldr	r3, [pc, #52]	@ (80070ec <std+0x68>)
 80070b8:	6224      	str	r4, [r4, #32]
 80070ba:	429c      	cmp	r4, r3
 80070bc:	d006      	beq.n	80070cc <std+0x48>
 80070be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070c2:	4294      	cmp	r4, r2
 80070c4:	d002      	beq.n	80070cc <std+0x48>
 80070c6:	33d0      	adds	r3, #208	@ 0xd0
 80070c8:	429c      	cmp	r4, r3
 80070ca:	d105      	bne.n	80070d8 <std+0x54>
 80070cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d4:	f000 b978 	b.w	80073c8 <__retarget_lock_init_recursive>
 80070d8:	bd10      	pop	{r4, pc}
 80070da:	bf00      	nop
 80070dc:	08007249 	.word	0x08007249
 80070e0:	0800726b 	.word	0x0800726b
 80070e4:	080072a3 	.word	0x080072a3
 80070e8:	080072c7 	.word	0x080072c7
 80070ec:	200003ac 	.word	0x200003ac

080070f0 <stdio_exit_handler>:
 80070f0:	4a02      	ldr	r2, [pc, #8]	@ (80070fc <stdio_exit_handler+0xc>)
 80070f2:	4903      	ldr	r1, [pc, #12]	@ (8007100 <stdio_exit_handler+0x10>)
 80070f4:	4803      	ldr	r0, [pc, #12]	@ (8007104 <stdio_exit_handler+0x14>)
 80070f6:	f000 b869 	b.w	80071cc <_fwalk_sglue>
 80070fa:	bf00      	nop
 80070fc:	20000010 	.word	0x20000010
 8007100:	08008d25 	.word	0x08008d25
 8007104:	20000020 	.word	0x20000020

08007108 <cleanup_stdio>:
 8007108:	6841      	ldr	r1, [r0, #4]
 800710a:	4b0c      	ldr	r3, [pc, #48]	@ (800713c <cleanup_stdio+0x34>)
 800710c:	4299      	cmp	r1, r3
 800710e:	b510      	push	{r4, lr}
 8007110:	4604      	mov	r4, r0
 8007112:	d001      	beq.n	8007118 <cleanup_stdio+0x10>
 8007114:	f001 fe06 	bl	8008d24 <_fflush_r>
 8007118:	68a1      	ldr	r1, [r4, #8]
 800711a:	4b09      	ldr	r3, [pc, #36]	@ (8007140 <cleanup_stdio+0x38>)
 800711c:	4299      	cmp	r1, r3
 800711e:	d002      	beq.n	8007126 <cleanup_stdio+0x1e>
 8007120:	4620      	mov	r0, r4
 8007122:	f001 fdff 	bl	8008d24 <_fflush_r>
 8007126:	68e1      	ldr	r1, [r4, #12]
 8007128:	4b06      	ldr	r3, [pc, #24]	@ (8007144 <cleanup_stdio+0x3c>)
 800712a:	4299      	cmp	r1, r3
 800712c:	d004      	beq.n	8007138 <cleanup_stdio+0x30>
 800712e:	4620      	mov	r0, r4
 8007130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007134:	f001 bdf6 	b.w	8008d24 <_fflush_r>
 8007138:	bd10      	pop	{r4, pc}
 800713a:	bf00      	nop
 800713c:	200003ac 	.word	0x200003ac
 8007140:	20000414 	.word	0x20000414
 8007144:	2000047c 	.word	0x2000047c

08007148 <global_stdio_init.part.0>:
 8007148:	b510      	push	{r4, lr}
 800714a:	4b0b      	ldr	r3, [pc, #44]	@ (8007178 <global_stdio_init.part.0+0x30>)
 800714c:	4c0b      	ldr	r4, [pc, #44]	@ (800717c <global_stdio_init.part.0+0x34>)
 800714e:	4a0c      	ldr	r2, [pc, #48]	@ (8007180 <global_stdio_init.part.0+0x38>)
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	4620      	mov	r0, r4
 8007154:	2200      	movs	r2, #0
 8007156:	2104      	movs	r1, #4
 8007158:	f7ff ff94 	bl	8007084 <std>
 800715c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007160:	2201      	movs	r2, #1
 8007162:	2109      	movs	r1, #9
 8007164:	f7ff ff8e 	bl	8007084 <std>
 8007168:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800716c:	2202      	movs	r2, #2
 800716e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007172:	2112      	movs	r1, #18
 8007174:	f7ff bf86 	b.w	8007084 <std>
 8007178:	200004e4 	.word	0x200004e4
 800717c:	200003ac 	.word	0x200003ac
 8007180:	080070f1 	.word	0x080070f1

08007184 <__sfp_lock_acquire>:
 8007184:	4801      	ldr	r0, [pc, #4]	@ (800718c <__sfp_lock_acquire+0x8>)
 8007186:	f000 b920 	b.w	80073ca <__retarget_lock_acquire_recursive>
 800718a:	bf00      	nop
 800718c:	200004ed 	.word	0x200004ed

08007190 <__sfp_lock_release>:
 8007190:	4801      	ldr	r0, [pc, #4]	@ (8007198 <__sfp_lock_release+0x8>)
 8007192:	f000 b91b 	b.w	80073cc <__retarget_lock_release_recursive>
 8007196:	bf00      	nop
 8007198:	200004ed 	.word	0x200004ed

0800719c <__sinit>:
 800719c:	b510      	push	{r4, lr}
 800719e:	4604      	mov	r4, r0
 80071a0:	f7ff fff0 	bl	8007184 <__sfp_lock_acquire>
 80071a4:	6a23      	ldr	r3, [r4, #32]
 80071a6:	b11b      	cbz	r3, 80071b0 <__sinit+0x14>
 80071a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ac:	f7ff bff0 	b.w	8007190 <__sfp_lock_release>
 80071b0:	4b04      	ldr	r3, [pc, #16]	@ (80071c4 <__sinit+0x28>)
 80071b2:	6223      	str	r3, [r4, #32]
 80071b4:	4b04      	ldr	r3, [pc, #16]	@ (80071c8 <__sinit+0x2c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1f5      	bne.n	80071a8 <__sinit+0xc>
 80071bc:	f7ff ffc4 	bl	8007148 <global_stdio_init.part.0>
 80071c0:	e7f2      	b.n	80071a8 <__sinit+0xc>
 80071c2:	bf00      	nop
 80071c4:	08007109 	.word	0x08007109
 80071c8:	200004e4 	.word	0x200004e4

080071cc <_fwalk_sglue>:
 80071cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d0:	4607      	mov	r7, r0
 80071d2:	4688      	mov	r8, r1
 80071d4:	4614      	mov	r4, r2
 80071d6:	2600      	movs	r6, #0
 80071d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071dc:	f1b9 0901 	subs.w	r9, r9, #1
 80071e0:	d505      	bpl.n	80071ee <_fwalk_sglue+0x22>
 80071e2:	6824      	ldr	r4, [r4, #0]
 80071e4:	2c00      	cmp	r4, #0
 80071e6:	d1f7      	bne.n	80071d8 <_fwalk_sglue+0xc>
 80071e8:	4630      	mov	r0, r6
 80071ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ee:	89ab      	ldrh	r3, [r5, #12]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d907      	bls.n	8007204 <_fwalk_sglue+0x38>
 80071f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071f8:	3301      	adds	r3, #1
 80071fa:	d003      	beq.n	8007204 <_fwalk_sglue+0x38>
 80071fc:	4629      	mov	r1, r5
 80071fe:	4638      	mov	r0, r7
 8007200:	47c0      	blx	r8
 8007202:	4306      	orrs	r6, r0
 8007204:	3568      	adds	r5, #104	@ 0x68
 8007206:	e7e9      	b.n	80071dc <_fwalk_sglue+0x10>

08007208 <siprintf>:
 8007208:	b40e      	push	{r1, r2, r3}
 800720a:	b500      	push	{lr}
 800720c:	b09c      	sub	sp, #112	@ 0x70
 800720e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007210:	9002      	str	r0, [sp, #8]
 8007212:	9006      	str	r0, [sp, #24]
 8007214:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007218:	4809      	ldr	r0, [pc, #36]	@ (8007240 <siprintf+0x38>)
 800721a:	9107      	str	r1, [sp, #28]
 800721c:	9104      	str	r1, [sp, #16]
 800721e:	4909      	ldr	r1, [pc, #36]	@ (8007244 <siprintf+0x3c>)
 8007220:	f853 2b04 	ldr.w	r2, [r3], #4
 8007224:	9105      	str	r1, [sp, #20]
 8007226:	6800      	ldr	r0, [r0, #0]
 8007228:	9301      	str	r3, [sp, #4]
 800722a:	a902      	add	r1, sp, #8
 800722c:	f001 fbfa 	bl	8008a24 <_svfiprintf_r>
 8007230:	9b02      	ldr	r3, [sp, #8]
 8007232:	2200      	movs	r2, #0
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	b01c      	add	sp, #112	@ 0x70
 8007238:	f85d eb04 	ldr.w	lr, [sp], #4
 800723c:	b003      	add	sp, #12
 800723e:	4770      	bx	lr
 8007240:	2000001c 	.word	0x2000001c
 8007244:	ffff0208 	.word	0xffff0208

08007248 <__sread>:
 8007248:	b510      	push	{r4, lr}
 800724a:	460c      	mov	r4, r1
 800724c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007250:	f000 f86c 	bl	800732c <_read_r>
 8007254:	2800      	cmp	r0, #0
 8007256:	bfab      	itete	ge
 8007258:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800725a:	89a3      	ldrhlt	r3, [r4, #12]
 800725c:	181b      	addge	r3, r3, r0
 800725e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007262:	bfac      	ite	ge
 8007264:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007266:	81a3      	strhlt	r3, [r4, #12]
 8007268:	bd10      	pop	{r4, pc}

0800726a <__swrite>:
 800726a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800726e:	461f      	mov	r7, r3
 8007270:	898b      	ldrh	r3, [r1, #12]
 8007272:	05db      	lsls	r3, r3, #23
 8007274:	4605      	mov	r5, r0
 8007276:	460c      	mov	r4, r1
 8007278:	4616      	mov	r6, r2
 800727a:	d505      	bpl.n	8007288 <__swrite+0x1e>
 800727c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007280:	2302      	movs	r3, #2
 8007282:	2200      	movs	r2, #0
 8007284:	f000 f840 	bl	8007308 <_lseek_r>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800728e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007292:	81a3      	strh	r3, [r4, #12]
 8007294:	4632      	mov	r2, r6
 8007296:	463b      	mov	r3, r7
 8007298:	4628      	mov	r0, r5
 800729a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800729e:	f000 b857 	b.w	8007350 <_write_r>

080072a2 <__sseek>:
 80072a2:	b510      	push	{r4, lr}
 80072a4:	460c      	mov	r4, r1
 80072a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072aa:	f000 f82d 	bl	8007308 <_lseek_r>
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	bf15      	itete	ne
 80072b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072be:	81a3      	strheq	r3, [r4, #12]
 80072c0:	bf18      	it	ne
 80072c2:	81a3      	strhne	r3, [r4, #12]
 80072c4:	bd10      	pop	{r4, pc}

080072c6 <__sclose>:
 80072c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ca:	f000 b80d 	b.w	80072e8 <_close_r>

080072ce <memset>:
 80072ce:	4402      	add	r2, r0
 80072d0:	4603      	mov	r3, r0
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d100      	bne.n	80072d8 <memset+0xa>
 80072d6:	4770      	bx	lr
 80072d8:	f803 1b01 	strb.w	r1, [r3], #1
 80072dc:	e7f9      	b.n	80072d2 <memset+0x4>
	...

080072e0 <_localeconv_r>:
 80072e0:	4800      	ldr	r0, [pc, #0]	@ (80072e4 <_localeconv_r+0x4>)
 80072e2:	4770      	bx	lr
 80072e4:	2000015c 	.word	0x2000015c

080072e8 <_close_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	4d06      	ldr	r5, [pc, #24]	@ (8007304 <_close_r+0x1c>)
 80072ec:	2300      	movs	r3, #0
 80072ee:	4604      	mov	r4, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	602b      	str	r3, [r5, #0]
 80072f4:	f7fa ffb4 	bl	8002260 <_close>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	d102      	bne.n	8007302 <_close_r+0x1a>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	b103      	cbz	r3, 8007302 <_close_r+0x1a>
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	bd38      	pop	{r3, r4, r5, pc}
 8007304:	200004e8 	.word	0x200004e8

08007308 <_lseek_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4d07      	ldr	r5, [pc, #28]	@ (8007328 <_lseek_r+0x20>)
 800730c:	4604      	mov	r4, r0
 800730e:	4608      	mov	r0, r1
 8007310:	4611      	mov	r1, r2
 8007312:	2200      	movs	r2, #0
 8007314:	602a      	str	r2, [r5, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	f7fa ffc9 	bl	80022ae <_lseek>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d102      	bne.n	8007326 <_lseek_r+0x1e>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b103      	cbz	r3, 8007326 <_lseek_r+0x1e>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	200004e8 	.word	0x200004e8

0800732c <_read_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4d07      	ldr	r5, [pc, #28]	@ (800734c <_read_r+0x20>)
 8007330:	4604      	mov	r4, r0
 8007332:	4608      	mov	r0, r1
 8007334:	4611      	mov	r1, r2
 8007336:	2200      	movs	r2, #0
 8007338:	602a      	str	r2, [r5, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	f7fa ff57 	bl	80021ee <_read>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	d102      	bne.n	800734a <_read_r+0x1e>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	b103      	cbz	r3, 800734a <_read_r+0x1e>
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	200004e8 	.word	0x200004e8

08007350 <_write_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4d07      	ldr	r5, [pc, #28]	@ (8007370 <_write_r+0x20>)
 8007354:	4604      	mov	r4, r0
 8007356:	4608      	mov	r0, r1
 8007358:	4611      	mov	r1, r2
 800735a:	2200      	movs	r2, #0
 800735c:	602a      	str	r2, [r5, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	f7fa ff62 	bl	8002228 <_write>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_write_r+0x1e>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_write_r+0x1e>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	200004e8 	.word	0x200004e8

08007374 <__errno>:
 8007374:	4b01      	ldr	r3, [pc, #4]	@ (800737c <__errno+0x8>)
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	2000001c 	.word	0x2000001c

08007380 <__libc_init_array>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	4d0d      	ldr	r5, [pc, #52]	@ (80073b8 <__libc_init_array+0x38>)
 8007384:	4c0d      	ldr	r4, [pc, #52]	@ (80073bc <__libc_init_array+0x3c>)
 8007386:	1b64      	subs	r4, r4, r5
 8007388:	10a4      	asrs	r4, r4, #2
 800738a:	2600      	movs	r6, #0
 800738c:	42a6      	cmp	r6, r4
 800738e:	d109      	bne.n	80073a4 <__libc_init_array+0x24>
 8007390:	4d0b      	ldr	r5, [pc, #44]	@ (80073c0 <__libc_init_array+0x40>)
 8007392:	4c0c      	ldr	r4, [pc, #48]	@ (80073c4 <__libc_init_array+0x44>)
 8007394:	f002 f864 	bl	8009460 <_init>
 8007398:	1b64      	subs	r4, r4, r5
 800739a:	10a4      	asrs	r4, r4, #2
 800739c:	2600      	movs	r6, #0
 800739e:	42a6      	cmp	r6, r4
 80073a0:	d105      	bne.n	80073ae <__libc_init_array+0x2e>
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a8:	4798      	blx	r3
 80073aa:	3601      	adds	r6, #1
 80073ac:	e7ee      	b.n	800738c <__libc_init_array+0xc>
 80073ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b2:	4798      	blx	r3
 80073b4:	3601      	adds	r6, #1
 80073b6:	e7f2      	b.n	800739e <__libc_init_array+0x1e>
 80073b8:	080098e8 	.word	0x080098e8
 80073bc:	080098e8 	.word	0x080098e8
 80073c0:	080098e8 	.word	0x080098e8
 80073c4:	080098ec 	.word	0x080098ec

080073c8 <__retarget_lock_init_recursive>:
 80073c8:	4770      	bx	lr

080073ca <__retarget_lock_acquire_recursive>:
 80073ca:	4770      	bx	lr

080073cc <__retarget_lock_release_recursive>:
 80073cc:	4770      	bx	lr

080073ce <quorem>:
 80073ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d2:	6903      	ldr	r3, [r0, #16]
 80073d4:	690c      	ldr	r4, [r1, #16]
 80073d6:	42a3      	cmp	r3, r4
 80073d8:	4607      	mov	r7, r0
 80073da:	db7e      	blt.n	80074da <quorem+0x10c>
 80073dc:	3c01      	subs	r4, #1
 80073de:	f101 0814 	add.w	r8, r1, #20
 80073e2:	00a3      	lsls	r3, r4, #2
 80073e4:	f100 0514 	add.w	r5, r0, #20
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073f8:	3301      	adds	r3, #1
 80073fa:	429a      	cmp	r2, r3
 80073fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007400:	fbb2 f6f3 	udiv	r6, r2, r3
 8007404:	d32e      	bcc.n	8007464 <quorem+0x96>
 8007406:	f04f 0a00 	mov.w	sl, #0
 800740a:	46c4      	mov	ip, r8
 800740c:	46ae      	mov	lr, r5
 800740e:	46d3      	mov	fp, sl
 8007410:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007414:	b298      	uxth	r0, r3
 8007416:	fb06 a000 	mla	r0, r6, r0, sl
 800741a:	0c02      	lsrs	r2, r0, #16
 800741c:	0c1b      	lsrs	r3, r3, #16
 800741e:	fb06 2303 	mla	r3, r6, r3, r2
 8007422:	f8de 2000 	ldr.w	r2, [lr]
 8007426:	b280      	uxth	r0, r0
 8007428:	b292      	uxth	r2, r2
 800742a:	1a12      	subs	r2, r2, r0
 800742c:	445a      	add	r2, fp
 800742e:	f8de 0000 	ldr.w	r0, [lr]
 8007432:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007436:	b29b      	uxth	r3, r3
 8007438:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800743c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007440:	b292      	uxth	r2, r2
 8007442:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007446:	45e1      	cmp	r9, ip
 8007448:	f84e 2b04 	str.w	r2, [lr], #4
 800744c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007450:	d2de      	bcs.n	8007410 <quorem+0x42>
 8007452:	9b00      	ldr	r3, [sp, #0]
 8007454:	58eb      	ldr	r3, [r5, r3]
 8007456:	b92b      	cbnz	r3, 8007464 <quorem+0x96>
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	3b04      	subs	r3, #4
 800745c:	429d      	cmp	r5, r3
 800745e:	461a      	mov	r2, r3
 8007460:	d32f      	bcc.n	80074c2 <quorem+0xf4>
 8007462:	613c      	str	r4, [r7, #16]
 8007464:	4638      	mov	r0, r7
 8007466:	f001 f979 	bl	800875c <__mcmp>
 800746a:	2800      	cmp	r0, #0
 800746c:	db25      	blt.n	80074ba <quorem+0xec>
 800746e:	4629      	mov	r1, r5
 8007470:	2000      	movs	r0, #0
 8007472:	f858 2b04 	ldr.w	r2, [r8], #4
 8007476:	f8d1 c000 	ldr.w	ip, [r1]
 800747a:	fa1f fe82 	uxth.w	lr, r2
 800747e:	fa1f f38c 	uxth.w	r3, ip
 8007482:	eba3 030e 	sub.w	r3, r3, lr
 8007486:	4403      	add	r3, r0
 8007488:	0c12      	lsrs	r2, r2, #16
 800748a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800748e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007492:	b29b      	uxth	r3, r3
 8007494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007498:	45c1      	cmp	r9, r8
 800749a:	f841 3b04 	str.w	r3, [r1], #4
 800749e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80074a2:	d2e6      	bcs.n	8007472 <quorem+0xa4>
 80074a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074ac:	b922      	cbnz	r2, 80074b8 <quorem+0xea>
 80074ae:	3b04      	subs	r3, #4
 80074b0:	429d      	cmp	r5, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	d30b      	bcc.n	80074ce <quorem+0x100>
 80074b6:	613c      	str	r4, [r7, #16]
 80074b8:	3601      	adds	r6, #1
 80074ba:	4630      	mov	r0, r6
 80074bc:	b003      	add	sp, #12
 80074be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c2:	6812      	ldr	r2, [r2, #0]
 80074c4:	3b04      	subs	r3, #4
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	d1cb      	bne.n	8007462 <quorem+0x94>
 80074ca:	3c01      	subs	r4, #1
 80074cc:	e7c6      	b.n	800745c <quorem+0x8e>
 80074ce:	6812      	ldr	r2, [r2, #0]
 80074d0:	3b04      	subs	r3, #4
 80074d2:	2a00      	cmp	r2, #0
 80074d4:	d1ef      	bne.n	80074b6 <quorem+0xe8>
 80074d6:	3c01      	subs	r4, #1
 80074d8:	e7ea      	b.n	80074b0 <quorem+0xe2>
 80074da:	2000      	movs	r0, #0
 80074dc:	e7ee      	b.n	80074bc <quorem+0xee>
	...

080074e0 <_dtoa_r>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	69c7      	ldr	r7, [r0, #28]
 80074e6:	b099      	sub	sp, #100	@ 0x64
 80074e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80074ec:	ec55 4b10 	vmov	r4, r5, d0
 80074f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80074f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80074f4:	4683      	mov	fp, r0
 80074f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80074f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80074fa:	b97f      	cbnz	r7, 800751c <_dtoa_r+0x3c>
 80074fc:	2010      	movs	r0, #16
 80074fe:	f000 fdfd 	bl	80080fc <malloc>
 8007502:	4602      	mov	r2, r0
 8007504:	f8cb 001c 	str.w	r0, [fp, #28]
 8007508:	b920      	cbnz	r0, 8007514 <_dtoa_r+0x34>
 800750a:	4ba7      	ldr	r3, [pc, #668]	@ (80077a8 <_dtoa_r+0x2c8>)
 800750c:	21ef      	movs	r1, #239	@ 0xef
 800750e:	48a7      	ldr	r0, [pc, #668]	@ (80077ac <_dtoa_r+0x2cc>)
 8007510:	f001 fc68 	bl	8008de4 <__assert_func>
 8007514:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007518:	6007      	str	r7, [r0, #0]
 800751a:	60c7      	str	r7, [r0, #12]
 800751c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007520:	6819      	ldr	r1, [r3, #0]
 8007522:	b159      	cbz	r1, 800753c <_dtoa_r+0x5c>
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	604a      	str	r2, [r1, #4]
 8007528:	2301      	movs	r3, #1
 800752a:	4093      	lsls	r3, r2
 800752c:	608b      	str	r3, [r1, #8]
 800752e:	4658      	mov	r0, fp
 8007530:	f000 feda 	bl	80082e8 <_Bfree>
 8007534:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	1e2b      	subs	r3, r5, #0
 800753e:	bfb9      	ittee	lt
 8007540:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007544:	9303      	strlt	r3, [sp, #12]
 8007546:	2300      	movge	r3, #0
 8007548:	6033      	strge	r3, [r6, #0]
 800754a:	9f03      	ldr	r7, [sp, #12]
 800754c:	4b98      	ldr	r3, [pc, #608]	@ (80077b0 <_dtoa_r+0x2d0>)
 800754e:	bfbc      	itt	lt
 8007550:	2201      	movlt	r2, #1
 8007552:	6032      	strlt	r2, [r6, #0]
 8007554:	43bb      	bics	r3, r7
 8007556:	d112      	bne.n	800757e <_dtoa_r+0x9e>
 8007558:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800755a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800755e:	6013      	str	r3, [r2, #0]
 8007560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007564:	4323      	orrs	r3, r4
 8007566:	f000 854d 	beq.w	8008004 <_dtoa_r+0xb24>
 800756a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800756c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80077c4 <_dtoa_r+0x2e4>
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 854f 	beq.w	8008014 <_dtoa_r+0xb34>
 8007576:	f10a 0303 	add.w	r3, sl, #3
 800757a:	f000 bd49 	b.w	8008010 <_dtoa_r+0xb30>
 800757e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007582:	2200      	movs	r2, #0
 8007584:	ec51 0b17 	vmov	r0, r1, d7
 8007588:	2300      	movs	r3, #0
 800758a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800758e:	f7f9 fabb 	bl	8000b08 <__aeabi_dcmpeq>
 8007592:	4680      	mov	r8, r0
 8007594:	b158      	cbz	r0, 80075ae <_dtoa_r+0xce>
 8007596:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007598:	2301      	movs	r3, #1
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800759e:	b113      	cbz	r3, 80075a6 <_dtoa_r+0xc6>
 80075a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80075a2:	4b84      	ldr	r3, [pc, #528]	@ (80077b4 <_dtoa_r+0x2d4>)
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80077c8 <_dtoa_r+0x2e8>
 80075aa:	f000 bd33 	b.w	8008014 <_dtoa_r+0xb34>
 80075ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80075b2:	aa16      	add	r2, sp, #88	@ 0x58
 80075b4:	a917      	add	r1, sp, #92	@ 0x5c
 80075b6:	4658      	mov	r0, fp
 80075b8:	f001 f980 	bl	80088bc <__d2b>
 80075bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80075c0:	4681      	mov	r9, r0
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	d077      	beq.n	80076b6 <_dtoa_r+0x1d6>
 80075c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80075cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80075d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80075dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80075e0:	4619      	mov	r1, r3
 80075e2:	2200      	movs	r2, #0
 80075e4:	4b74      	ldr	r3, [pc, #464]	@ (80077b8 <_dtoa_r+0x2d8>)
 80075e6:	f7f8 fe6f 	bl	80002c8 <__aeabi_dsub>
 80075ea:	a369      	add	r3, pc, #420	@ (adr r3, 8007790 <_dtoa_r+0x2b0>)
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f7f9 f822 	bl	8000638 <__aeabi_dmul>
 80075f4:	a368      	add	r3, pc, #416	@ (adr r3, 8007798 <_dtoa_r+0x2b8>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f8 fe67 	bl	80002cc <__adddf3>
 80075fe:	4604      	mov	r4, r0
 8007600:	4630      	mov	r0, r6
 8007602:	460d      	mov	r5, r1
 8007604:	f7f8 ffae 	bl	8000564 <__aeabi_i2d>
 8007608:	a365      	add	r3, pc, #404	@ (adr r3, 80077a0 <_dtoa_r+0x2c0>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f7f9 f813 	bl	8000638 <__aeabi_dmul>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f8 fe57 	bl	80002cc <__adddf3>
 800761e:	4604      	mov	r4, r0
 8007620:	460d      	mov	r5, r1
 8007622:	f7f9 fab9 	bl	8000b98 <__aeabi_d2iz>
 8007626:	2200      	movs	r2, #0
 8007628:	4607      	mov	r7, r0
 800762a:	2300      	movs	r3, #0
 800762c:	4620      	mov	r0, r4
 800762e:	4629      	mov	r1, r5
 8007630:	f7f9 fa74 	bl	8000b1c <__aeabi_dcmplt>
 8007634:	b140      	cbz	r0, 8007648 <_dtoa_r+0x168>
 8007636:	4638      	mov	r0, r7
 8007638:	f7f8 ff94 	bl	8000564 <__aeabi_i2d>
 800763c:	4622      	mov	r2, r4
 800763e:	462b      	mov	r3, r5
 8007640:	f7f9 fa62 	bl	8000b08 <__aeabi_dcmpeq>
 8007644:	b900      	cbnz	r0, 8007648 <_dtoa_r+0x168>
 8007646:	3f01      	subs	r7, #1
 8007648:	2f16      	cmp	r7, #22
 800764a:	d851      	bhi.n	80076f0 <_dtoa_r+0x210>
 800764c:	4b5b      	ldr	r3, [pc, #364]	@ (80077bc <_dtoa_r+0x2dc>)
 800764e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800765a:	f7f9 fa5f 	bl	8000b1c <__aeabi_dcmplt>
 800765e:	2800      	cmp	r0, #0
 8007660:	d048      	beq.n	80076f4 <_dtoa_r+0x214>
 8007662:	3f01      	subs	r7, #1
 8007664:	2300      	movs	r3, #0
 8007666:	9312      	str	r3, [sp, #72]	@ 0x48
 8007668:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800766a:	1b9b      	subs	r3, r3, r6
 800766c:	1e5a      	subs	r2, r3, #1
 800766e:	bf44      	itt	mi
 8007670:	f1c3 0801 	rsbmi	r8, r3, #1
 8007674:	2300      	movmi	r3, #0
 8007676:	9208      	str	r2, [sp, #32]
 8007678:	bf54      	ite	pl
 800767a:	f04f 0800 	movpl.w	r8, #0
 800767e:	9308      	strmi	r3, [sp, #32]
 8007680:	2f00      	cmp	r7, #0
 8007682:	db39      	blt.n	80076f8 <_dtoa_r+0x218>
 8007684:	9b08      	ldr	r3, [sp, #32]
 8007686:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007688:	443b      	add	r3, r7
 800768a:	9308      	str	r3, [sp, #32]
 800768c:	2300      	movs	r3, #0
 800768e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007692:	2b09      	cmp	r3, #9
 8007694:	d864      	bhi.n	8007760 <_dtoa_r+0x280>
 8007696:	2b05      	cmp	r3, #5
 8007698:	bfc4      	itt	gt
 800769a:	3b04      	subgt	r3, #4
 800769c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800769e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a0:	f1a3 0302 	sub.w	r3, r3, #2
 80076a4:	bfcc      	ite	gt
 80076a6:	2400      	movgt	r4, #0
 80076a8:	2401      	movle	r4, #1
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d863      	bhi.n	8007776 <_dtoa_r+0x296>
 80076ae:	e8df f003 	tbb	[pc, r3]
 80076b2:	372a      	.short	0x372a
 80076b4:	5535      	.short	0x5535
 80076b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80076ba:	441e      	add	r6, r3
 80076bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	bfc1      	itttt	gt
 80076c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80076c8:	409f      	lslgt	r7, r3
 80076ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80076ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80076d2:	bfd6      	itet	le
 80076d4:	f1c3 0320 	rsble	r3, r3, #32
 80076d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80076dc:	fa04 f003 	lslle.w	r0, r4, r3
 80076e0:	f7f8 ff30 	bl	8000544 <__aeabi_ui2d>
 80076e4:	2201      	movs	r2, #1
 80076e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80076ea:	3e01      	subs	r6, #1
 80076ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80076ee:	e777      	b.n	80075e0 <_dtoa_r+0x100>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e7b8      	b.n	8007666 <_dtoa_r+0x186>
 80076f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80076f6:	e7b7      	b.n	8007668 <_dtoa_r+0x188>
 80076f8:	427b      	negs	r3, r7
 80076fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80076fc:	2300      	movs	r3, #0
 80076fe:	eba8 0807 	sub.w	r8, r8, r7
 8007702:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007704:	e7c4      	b.n	8007690 <_dtoa_r+0x1b0>
 8007706:	2300      	movs	r3, #0
 8007708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800770a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800770c:	2b00      	cmp	r3, #0
 800770e:	dc35      	bgt.n	800777c <_dtoa_r+0x29c>
 8007710:	2301      	movs	r3, #1
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	9307      	str	r3, [sp, #28]
 8007716:	461a      	mov	r2, r3
 8007718:	920e      	str	r2, [sp, #56]	@ 0x38
 800771a:	e00b      	b.n	8007734 <_dtoa_r+0x254>
 800771c:	2301      	movs	r3, #1
 800771e:	e7f3      	b.n	8007708 <_dtoa_r+0x228>
 8007720:	2300      	movs	r3, #0
 8007722:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007726:	18fb      	adds	r3, r7, r3
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	3301      	adds	r3, #1
 800772c:	2b01      	cmp	r3, #1
 800772e:	9307      	str	r3, [sp, #28]
 8007730:	bfb8      	it	lt
 8007732:	2301      	movlt	r3, #1
 8007734:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007738:	2100      	movs	r1, #0
 800773a:	2204      	movs	r2, #4
 800773c:	f102 0514 	add.w	r5, r2, #20
 8007740:	429d      	cmp	r5, r3
 8007742:	d91f      	bls.n	8007784 <_dtoa_r+0x2a4>
 8007744:	6041      	str	r1, [r0, #4]
 8007746:	4658      	mov	r0, fp
 8007748:	f000 fd8e 	bl	8008268 <_Balloc>
 800774c:	4682      	mov	sl, r0
 800774e:	2800      	cmp	r0, #0
 8007750:	d13c      	bne.n	80077cc <_dtoa_r+0x2ec>
 8007752:	4b1b      	ldr	r3, [pc, #108]	@ (80077c0 <_dtoa_r+0x2e0>)
 8007754:	4602      	mov	r2, r0
 8007756:	f240 11af 	movw	r1, #431	@ 0x1af
 800775a:	e6d8      	b.n	800750e <_dtoa_r+0x2e>
 800775c:	2301      	movs	r3, #1
 800775e:	e7e0      	b.n	8007722 <_dtoa_r+0x242>
 8007760:	2401      	movs	r4, #1
 8007762:	2300      	movs	r3, #0
 8007764:	9309      	str	r3, [sp, #36]	@ 0x24
 8007766:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007768:	f04f 33ff 	mov.w	r3, #4294967295
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	9307      	str	r3, [sp, #28]
 8007770:	2200      	movs	r2, #0
 8007772:	2312      	movs	r3, #18
 8007774:	e7d0      	b.n	8007718 <_dtoa_r+0x238>
 8007776:	2301      	movs	r3, #1
 8007778:	930b      	str	r3, [sp, #44]	@ 0x2c
 800777a:	e7f5      	b.n	8007768 <_dtoa_r+0x288>
 800777c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	9307      	str	r3, [sp, #28]
 8007782:	e7d7      	b.n	8007734 <_dtoa_r+0x254>
 8007784:	3101      	adds	r1, #1
 8007786:	0052      	lsls	r2, r2, #1
 8007788:	e7d8      	b.n	800773c <_dtoa_r+0x25c>
 800778a:	bf00      	nop
 800778c:	f3af 8000 	nop.w
 8007790:	636f4361 	.word	0x636f4361
 8007794:	3fd287a7 	.word	0x3fd287a7
 8007798:	8b60c8b3 	.word	0x8b60c8b3
 800779c:	3fc68a28 	.word	0x3fc68a28
 80077a0:	509f79fb 	.word	0x509f79fb
 80077a4:	3fd34413 	.word	0x3fd34413
 80077a8:	080095ad 	.word	0x080095ad
 80077ac:	080095c4 	.word	0x080095c4
 80077b0:	7ff00000 	.word	0x7ff00000
 80077b4:	0800957d 	.word	0x0800957d
 80077b8:	3ff80000 	.word	0x3ff80000
 80077bc:	080096c0 	.word	0x080096c0
 80077c0:	0800961c 	.word	0x0800961c
 80077c4:	080095a9 	.word	0x080095a9
 80077c8:	0800957c 	.word	0x0800957c
 80077cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077d0:	6018      	str	r0, [r3, #0]
 80077d2:	9b07      	ldr	r3, [sp, #28]
 80077d4:	2b0e      	cmp	r3, #14
 80077d6:	f200 80a4 	bhi.w	8007922 <_dtoa_r+0x442>
 80077da:	2c00      	cmp	r4, #0
 80077dc:	f000 80a1 	beq.w	8007922 <_dtoa_r+0x442>
 80077e0:	2f00      	cmp	r7, #0
 80077e2:	dd33      	ble.n	800784c <_dtoa_r+0x36c>
 80077e4:	4bad      	ldr	r3, [pc, #692]	@ (8007a9c <_dtoa_r+0x5bc>)
 80077e6:	f007 020f 	and.w	r2, r7, #15
 80077ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ee:	ed93 7b00 	vldr	d7, [r3]
 80077f2:	05f8      	lsls	r0, r7, #23
 80077f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80077f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80077fc:	d516      	bpl.n	800782c <_dtoa_r+0x34c>
 80077fe:	4ba8      	ldr	r3, [pc, #672]	@ (8007aa0 <_dtoa_r+0x5c0>)
 8007800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007804:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007808:	f7f9 f840 	bl	800088c <__aeabi_ddiv>
 800780c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007810:	f004 040f 	and.w	r4, r4, #15
 8007814:	2603      	movs	r6, #3
 8007816:	4da2      	ldr	r5, [pc, #648]	@ (8007aa0 <_dtoa_r+0x5c0>)
 8007818:	b954      	cbnz	r4, 8007830 <_dtoa_r+0x350>
 800781a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800781e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007822:	f7f9 f833 	bl	800088c <__aeabi_ddiv>
 8007826:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800782a:	e028      	b.n	800787e <_dtoa_r+0x39e>
 800782c:	2602      	movs	r6, #2
 800782e:	e7f2      	b.n	8007816 <_dtoa_r+0x336>
 8007830:	07e1      	lsls	r1, r4, #31
 8007832:	d508      	bpl.n	8007846 <_dtoa_r+0x366>
 8007834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007838:	e9d5 2300 	ldrd	r2, r3, [r5]
 800783c:	f7f8 fefc 	bl	8000638 <__aeabi_dmul>
 8007840:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007844:	3601      	adds	r6, #1
 8007846:	1064      	asrs	r4, r4, #1
 8007848:	3508      	adds	r5, #8
 800784a:	e7e5      	b.n	8007818 <_dtoa_r+0x338>
 800784c:	f000 80d2 	beq.w	80079f4 <_dtoa_r+0x514>
 8007850:	427c      	negs	r4, r7
 8007852:	4b92      	ldr	r3, [pc, #584]	@ (8007a9c <_dtoa_r+0x5bc>)
 8007854:	4d92      	ldr	r5, [pc, #584]	@ (8007aa0 <_dtoa_r+0x5c0>)
 8007856:	f004 020f 	and.w	r2, r4, #15
 800785a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007866:	f7f8 fee7 	bl	8000638 <__aeabi_dmul>
 800786a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800786e:	1124      	asrs	r4, r4, #4
 8007870:	2300      	movs	r3, #0
 8007872:	2602      	movs	r6, #2
 8007874:	2c00      	cmp	r4, #0
 8007876:	f040 80b2 	bne.w	80079de <_dtoa_r+0x4fe>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1d3      	bne.n	8007826 <_dtoa_r+0x346>
 800787e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007880:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 80b7 	beq.w	80079f8 <_dtoa_r+0x518>
 800788a:	4b86      	ldr	r3, [pc, #536]	@ (8007aa4 <_dtoa_r+0x5c4>)
 800788c:	2200      	movs	r2, #0
 800788e:	4620      	mov	r0, r4
 8007890:	4629      	mov	r1, r5
 8007892:	f7f9 f943 	bl	8000b1c <__aeabi_dcmplt>
 8007896:	2800      	cmp	r0, #0
 8007898:	f000 80ae 	beq.w	80079f8 <_dtoa_r+0x518>
 800789c:	9b07      	ldr	r3, [sp, #28]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 80aa 	beq.w	80079f8 <_dtoa_r+0x518>
 80078a4:	9b00      	ldr	r3, [sp, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	dd37      	ble.n	800791a <_dtoa_r+0x43a>
 80078aa:	1e7b      	subs	r3, r7, #1
 80078ac:	9304      	str	r3, [sp, #16]
 80078ae:	4620      	mov	r0, r4
 80078b0:	4b7d      	ldr	r3, [pc, #500]	@ (8007aa8 <_dtoa_r+0x5c8>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	4629      	mov	r1, r5
 80078b6:	f7f8 febf 	bl	8000638 <__aeabi_dmul>
 80078ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078be:	9c00      	ldr	r4, [sp, #0]
 80078c0:	3601      	adds	r6, #1
 80078c2:	4630      	mov	r0, r6
 80078c4:	f7f8 fe4e 	bl	8000564 <__aeabi_i2d>
 80078c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078cc:	f7f8 feb4 	bl	8000638 <__aeabi_dmul>
 80078d0:	4b76      	ldr	r3, [pc, #472]	@ (8007aac <_dtoa_r+0x5cc>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	f7f8 fcfa 	bl	80002cc <__adddf3>
 80078d8:	4605      	mov	r5, r0
 80078da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80078de:	2c00      	cmp	r4, #0
 80078e0:	f040 808d 	bne.w	80079fe <_dtoa_r+0x51e>
 80078e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e8:	4b71      	ldr	r3, [pc, #452]	@ (8007ab0 <_dtoa_r+0x5d0>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	f7f8 fcec 	bl	80002c8 <__aeabi_dsub>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078f8:	462a      	mov	r2, r5
 80078fa:	4633      	mov	r3, r6
 80078fc:	f7f9 f92c 	bl	8000b58 <__aeabi_dcmpgt>
 8007900:	2800      	cmp	r0, #0
 8007902:	f040 828b 	bne.w	8007e1c <_dtoa_r+0x93c>
 8007906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800790a:	462a      	mov	r2, r5
 800790c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007910:	f7f9 f904 	bl	8000b1c <__aeabi_dcmplt>
 8007914:	2800      	cmp	r0, #0
 8007916:	f040 8128 	bne.w	8007b6a <_dtoa_r+0x68a>
 800791a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800791e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007922:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007924:	2b00      	cmp	r3, #0
 8007926:	f2c0 815a 	blt.w	8007bde <_dtoa_r+0x6fe>
 800792a:	2f0e      	cmp	r7, #14
 800792c:	f300 8157 	bgt.w	8007bde <_dtoa_r+0x6fe>
 8007930:	4b5a      	ldr	r3, [pc, #360]	@ (8007a9c <_dtoa_r+0x5bc>)
 8007932:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007936:	ed93 7b00 	vldr	d7, [r3]
 800793a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800793c:	2b00      	cmp	r3, #0
 800793e:	ed8d 7b00 	vstr	d7, [sp]
 8007942:	da03      	bge.n	800794c <_dtoa_r+0x46c>
 8007944:	9b07      	ldr	r3, [sp, #28]
 8007946:	2b00      	cmp	r3, #0
 8007948:	f340 8101 	ble.w	8007b4e <_dtoa_r+0x66e>
 800794c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007950:	4656      	mov	r6, sl
 8007952:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007956:	4620      	mov	r0, r4
 8007958:	4629      	mov	r1, r5
 800795a:	f7f8 ff97 	bl	800088c <__aeabi_ddiv>
 800795e:	f7f9 f91b 	bl	8000b98 <__aeabi_d2iz>
 8007962:	4680      	mov	r8, r0
 8007964:	f7f8 fdfe 	bl	8000564 <__aeabi_i2d>
 8007968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800796c:	f7f8 fe64 	bl	8000638 <__aeabi_dmul>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4620      	mov	r0, r4
 8007976:	4629      	mov	r1, r5
 8007978:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800797c:	f7f8 fca4 	bl	80002c8 <__aeabi_dsub>
 8007980:	f806 4b01 	strb.w	r4, [r6], #1
 8007984:	9d07      	ldr	r5, [sp, #28]
 8007986:	eba6 040a 	sub.w	r4, r6, sl
 800798a:	42a5      	cmp	r5, r4
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	f040 8117 	bne.w	8007bc2 <_dtoa_r+0x6e2>
 8007994:	f7f8 fc9a 	bl	80002cc <__adddf3>
 8007998:	e9dd 2300 	ldrd	r2, r3, [sp]
 800799c:	4604      	mov	r4, r0
 800799e:	460d      	mov	r5, r1
 80079a0:	f7f9 f8da 	bl	8000b58 <__aeabi_dcmpgt>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	f040 80f9 	bne.w	8007b9c <_dtoa_r+0x6bc>
 80079aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079ae:	4620      	mov	r0, r4
 80079b0:	4629      	mov	r1, r5
 80079b2:	f7f9 f8a9 	bl	8000b08 <__aeabi_dcmpeq>
 80079b6:	b118      	cbz	r0, 80079c0 <_dtoa_r+0x4e0>
 80079b8:	f018 0f01 	tst.w	r8, #1
 80079bc:	f040 80ee 	bne.w	8007b9c <_dtoa_r+0x6bc>
 80079c0:	4649      	mov	r1, r9
 80079c2:	4658      	mov	r0, fp
 80079c4:	f000 fc90 	bl	80082e8 <_Bfree>
 80079c8:	2300      	movs	r3, #0
 80079ca:	7033      	strb	r3, [r6, #0]
 80079cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80079ce:	3701      	adds	r7, #1
 80079d0:	601f      	str	r7, [r3, #0]
 80079d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 831d 	beq.w	8008014 <_dtoa_r+0xb34>
 80079da:	601e      	str	r6, [r3, #0]
 80079dc:	e31a      	b.n	8008014 <_dtoa_r+0xb34>
 80079de:	07e2      	lsls	r2, r4, #31
 80079e0:	d505      	bpl.n	80079ee <_dtoa_r+0x50e>
 80079e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079e6:	f7f8 fe27 	bl	8000638 <__aeabi_dmul>
 80079ea:	3601      	adds	r6, #1
 80079ec:	2301      	movs	r3, #1
 80079ee:	1064      	asrs	r4, r4, #1
 80079f0:	3508      	adds	r5, #8
 80079f2:	e73f      	b.n	8007874 <_dtoa_r+0x394>
 80079f4:	2602      	movs	r6, #2
 80079f6:	e742      	b.n	800787e <_dtoa_r+0x39e>
 80079f8:	9c07      	ldr	r4, [sp, #28]
 80079fa:	9704      	str	r7, [sp, #16]
 80079fc:	e761      	b.n	80078c2 <_dtoa_r+0x3e2>
 80079fe:	4b27      	ldr	r3, [pc, #156]	@ (8007a9c <_dtoa_r+0x5bc>)
 8007a00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a0a:	4454      	add	r4, sl
 8007a0c:	2900      	cmp	r1, #0
 8007a0e:	d053      	beq.n	8007ab8 <_dtoa_r+0x5d8>
 8007a10:	4928      	ldr	r1, [pc, #160]	@ (8007ab4 <_dtoa_r+0x5d4>)
 8007a12:	2000      	movs	r0, #0
 8007a14:	f7f8 ff3a 	bl	800088c <__aeabi_ddiv>
 8007a18:	4633      	mov	r3, r6
 8007a1a:	462a      	mov	r2, r5
 8007a1c:	f7f8 fc54 	bl	80002c8 <__aeabi_dsub>
 8007a20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a24:	4656      	mov	r6, sl
 8007a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a2a:	f7f9 f8b5 	bl	8000b98 <__aeabi_d2iz>
 8007a2e:	4605      	mov	r5, r0
 8007a30:	f7f8 fd98 	bl	8000564 <__aeabi_i2d>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a3c:	f7f8 fc44 	bl	80002c8 <__aeabi_dsub>
 8007a40:	3530      	adds	r5, #48	@ 0x30
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a4a:	f806 5b01 	strb.w	r5, [r6], #1
 8007a4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a52:	f7f9 f863 	bl	8000b1c <__aeabi_dcmplt>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d171      	bne.n	8007b3e <_dtoa_r+0x65e>
 8007a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a5e:	4911      	ldr	r1, [pc, #68]	@ (8007aa4 <_dtoa_r+0x5c4>)
 8007a60:	2000      	movs	r0, #0
 8007a62:	f7f8 fc31 	bl	80002c8 <__aeabi_dsub>
 8007a66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a6a:	f7f9 f857 	bl	8000b1c <__aeabi_dcmplt>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	f040 8095 	bne.w	8007b9e <_dtoa_r+0x6be>
 8007a74:	42a6      	cmp	r6, r4
 8007a76:	f43f af50 	beq.w	800791a <_dtoa_r+0x43a>
 8007a7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa8 <_dtoa_r+0x5c8>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	f7f8 fdd9 	bl	8000638 <__aeabi_dmul>
 8007a86:	4b08      	ldr	r3, [pc, #32]	@ (8007aa8 <_dtoa_r+0x5c8>)
 8007a88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a92:	f7f8 fdd1 	bl	8000638 <__aeabi_dmul>
 8007a96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a9a:	e7c4      	b.n	8007a26 <_dtoa_r+0x546>
 8007a9c:	080096c0 	.word	0x080096c0
 8007aa0:	08009698 	.word	0x08009698
 8007aa4:	3ff00000 	.word	0x3ff00000
 8007aa8:	40240000 	.word	0x40240000
 8007aac:	401c0000 	.word	0x401c0000
 8007ab0:	40140000 	.word	0x40140000
 8007ab4:	3fe00000 	.word	0x3fe00000
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	f7f8 fdbc 	bl	8000638 <__aeabi_dmul>
 8007ac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ac4:	9415      	str	r4, [sp, #84]	@ 0x54
 8007ac6:	4656      	mov	r6, sl
 8007ac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007acc:	f7f9 f864 	bl	8000b98 <__aeabi_d2iz>
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	f7f8 fd47 	bl	8000564 <__aeabi_i2d>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ade:	f7f8 fbf3 	bl	80002c8 <__aeabi_dsub>
 8007ae2:	3530      	adds	r5, #48	@ 0x30
 8007ae4:	f806 5b01 	strb.w	r5, [r6], #1
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	42a6      	cmp	r6, r4
 8007aee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007af2:	f04f 0200 	mov.w	r2, #0
 8007af6:	d124      	bne.n	8007b42 <_dtoa_r+0x662>
 8007af8:	4bac      	ldr	r3, [pc, #688]	@ (8007dac <_dtoa_r+0x8cc>)
 8007afa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007afe:	f7f8 fbe5 	bl	80002cc <__adddf3>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b0a:	f7f9 f825 	bl	8000b58 <__aeabi_dcmpgt>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d145      	bne.n	8007b9e <_dtoa_r+0x6be>
 8007b12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b16:	49a5      	ldr	r1, [pc, #660]	@ (8007dac <_dtoa_r+0x8cc>)
 8007b18:	2000      	movs	r0, #0
 8007b1a:	f7f8 fbd5 	bl	80002c8 <__aeabi_dsub>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b26:	f7f8 fff9 	bl	8000b1c <__aeabi_dcmplt>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	f43f aef5 	beq.w	800791a <_dtoa_r+0x43a>
 8007b30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007b32:	1e73      	subs	r3, r6, #1
 8007b34:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b3a:	2b30      	cmp	r3, #48	@ 0x30
 8007b3c:	d0f8      	beq.n	8007b30 <_dtoa_r+0x650>
 8007b3e:	9f04      	ldr	r7, [sp, #16]
 8007b40:	e73e      	b.n	80079c0 <_dtoa_r+0x4e0>
 8007b42:	4b9b      	ldr	r3, [pc, #620]	@ (8007db0 <_dtoa_r+0x8d0>)
 8007b44:	f7f8 fd78 	bl	8000638 <__aeabi_dmul>
 8007b48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b4c:	e7bc      	b.n	8007ac8 <_dtoa_r+0x5e8>
 8007b4e:	d10c      	bne.n	8007b6a <_dtoa_r+0x68a>
 8007b50:	4b98      	ldr	r3, [pc, #608]	@ (8007db4 <_dtoa_r+0x8d4>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b58:	f7f8 fd6e 	bl	8000638 <__aeabi_dmul>
 8007b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b60:	f7f8 fff0 	bl	8000b44 <__aeabi_dcmpge>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	f000 8157 	beq.w	8007e18 <_dtoa_r+0x938>
 8007b6a:	2400      	movs	r4, #0
 8007b6c:	4625      	mov	r5, r4
 8007b6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b70:	43db      	mvns	r3, r3
 8007b72:	9304      	str	r3, [sp, #16]
 8007b74:	4656      	mov	r6, sl
 8007b76:	2700      	movs	r7, #0
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4658      	mov	r0, fp
 8007b7c:	f000 fbb4 	bl	80082e8 <_Bfree>
 8007b80:	2d00      	cmp	r5, #0
 8007b82:	d0dc      	beq.n	8007b3e <_dtoa_r+0x65e>
 8007b84:	b12f      	cbz	r7, 8007b92 <_dtoa_r+0x6b2>
 8007b86:	42af      	cmp	r7, r5
 8007b88:	d003      	beq.n	8007b92 <_dtoa_r+0x6b2>
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	4658      	mov	r0, fp
 8007b8e:	f000 fbab 	bl	80082e8 <_Bfree>
 8007b92:	4629      	mov	r1, r5
 8007b94:	4658      	mov	r0, fp
 8007b96:	f000 fba7 	bl	80082e8 <_Bfree>
 8007b9a:	e7d0      	b.n	8007b3e <_dtoa_r+0x65e>
 8007b9c:	9704      	str	r7, [sp, #16]
 8007b9e:	4633      	mov	r3, r6
 8007ba0:	461e      	mov	r6, r3
 8007ba2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ba6:	2a39      	cmp	r2, #57	@ 0x39
 8007ba8:	d107      	bne.n	8007bba <_dtoa_r+0x6da>
 8007baa:	459a      	cmp	sl, r3
 8007bac:	d1f8      	bne.n	8007ba0 <_dtoa_r+0x6c0>
 8007bae:	9a04      	ldr	r2, [sp, #16]
 8007bb0:	3201      	adds	r2, #1
 8007bb2:	9204      	str	r2, [sp, #16]
 8007bb4:	2230      	movs	r2, #48	@ 0x30
 8007bb6:	f88a 2000 	strb.w	r2, [sl]
 8007bba:	781a      	ldrb	r2, [r3, #0]
 8007bbc:	3201      	adds	r2, #1
 8007bbe:	701a      	strb	r2, [r3, #0]
 8007bc0:	e7bd      	b.n	8007b3e <_dtoa_r+0x65e>
 8007bc2:	4b7b      	ldr	r3, [pc, #492]	@ (8007db0 <_dtoa_r+0x8d0>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f7f8 fd37 	bl	8000638 <__aeabi_dmul>
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4604      	mov	r4, r0
 8007bd0:	460d      	mov	r5, r1
 8007bd2:	f7f8 ff99 	bl	8000b08 <__aeabi_dcmpeq>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f43f aebb 	beq.w	8007952 <_dtoa_r+0x472>
 8007bdc:	e6f0      	b.n	80079c0 <_dtoa_r+0x4e0>
 8007bde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007be0:	2a00      	cmp	r2, #0
 8007be2:	f000 80db 	beq.w	8007d9c <_dtoa_r+0x8bc>
 8007be6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007be8:	2a01      	cmp	r2, #1
 8007bea:	f300 80bf 	bgt.w	8007d6c <_dtoa_r+0x88c>
 8007bee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007bf0:	2a00      	cmp	r2, #0
 8007bf2:	f000 80b7 	beq.w	8007d64 <_dtoa_r+0x884>
 8007bf6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007bfa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007bfc:	4646      	mov	r6, r8
 8007bfe:	9a08      	ldr	r2, [sp, #32]
 8007c00:	2101      	movs	r1, #1
 8007c02:	441a      	add	r2, r3
 8007c04:	4658      	mov	r0, fp
 8007c06:	4498      	add	r8, r3
 8007c08:	9208      	str	r2, [sp, #32]
 8007c0a:	f000 fc21 	bl	8008450 <__i2b>
 8007c0e:	4605      	mov	r5, r0
 8007c10:	b15e      	cbz	r6, 8007c2a <_dtoa_r+0x74a>
 8007c12:	9b08      	ldr	r3, [sp, #32]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dd08      	ble.n	8007c2a <_dtoa_r+0x74a>
 8007c18:	42b3      	cmp	r3, r6
 8007c1a:	9a08      	ldr	r2, [sp, #32]
 8007c1c:	bfa8      	it	ge
 8007c1e:	4633      	movge	r3, r6
 8007c20:	eba8 0803 	sub.w	r8, r8, r3
 8007c24:	1af6      	subs	r6, r6, r3
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	9308      	str	r3, [sp, #32]
 8007c2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c2c:	b1f3      	cbz	r3, 8007c6c <_dtoa_r+0x78c>
 8007c2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 80b7 	beq.w	8007da4 <_dtoa_r+0x8c4>
 8007c36:	b18c      	cbz	r4, 8007c5c <_dtoa_r+0x77c>
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	4658      	mov	r0, fp
 8007c3e:	f000 fcc7 	bl	80085d0 <__pow5mult>
 8007c42:	464a      	mov	r2, r9
 8007c44:	4601      	mov	r1, r0
 8007c46:	4605      	mov	r5, r0
 8007c48:	4658      	mov	r0, fp
 8007c4a:	f000 fc17 	bl	800847c <__multiply>
 8007c4e:	4649      	mov	r1, r9
 8007c50:	9004      	str	r0, [sp, #16]
 8007c52:	4658      	mov	r0, fp
 8007c54:	f000 fb48 	bl	80082e8 <_Bfree>
 8007c58:	9b04      	ldr	r3, [sp, #16]
 8007c5a:	4699      	mov	r9, r3
 8007c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c5e:	1b1a      	subs	r2, r3, r4
 8007c60:	d004      	beq.n	8007c6c <_dtoa_r+0x78c>
 8007c62:	4649      	mov	r1, r9
 8007c64:	4658      	mov	r0, fp
 8007c66:	f000 fcb3 	bl	80085d0 <__pow5mult>
 8007c6a:	4681      	mov	r9, r0
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	4658      	mov	r0, fp
 8007c70:	f000 fbee 	bl	8008450 <__i2b>
 8007c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c76:	4604      	mov	r4, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 81cf 	beq.w	800801c <_dtoa_r+0xb3c>
 8007c7e:	461a      	mov	r2, r3
 8007c80:	4601      	mov	r1, r0
 8007c82:	4658      	mov	r0, fp
 8007c84:	f000 fca4 	bl	80085d0 <__pow5mult>
 8007c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	f300 8095 	bgt.w	8007dbc <_dtoa_r+0x8dc>
 8007c92:	9b02      	ldr	r3, [sp, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f040 8087 	bne.w	8007da8 <_dtoa_r+0x8c8>
 8007c9a:	9b03      	ldr	r3, [sp, #12]
 8007c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f040 8089 	bne.w	8007db8 <_dtoa_r+0x8d8>
 8007ca6:	9b03      	ldr	r3, [sp, #12]
 8007ca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007cac:	0d1b      	lsrs	r3, r3, #20
 8007cae:	051b      	lsls	r3, r3, #20
 8007cb0:	b12b      	cbz	r3, 8007cbe <_dtoa_r+0x7de>
 8007cb2:	9b08      	ldr	r3, [sp, #32]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	9308      	str	r3, [sp, #32]
 8007cb8:	f108 0801 	add.w	r8, r8, #1
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 81b0 	beq.w	8008028 <_dtoa_r+0xb48>
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007cce:	6918      	ldr	r0, [r3, #16]
 8007cd0:	f000 fb72 	bl	80083b8 <__hi0bits>
 8007cd4:	f1c0 0020 	rsb	r0, r0, #32
 8007cd8:	9b08      	ldr	r3, [sp, #32]
 8007cda:	4418      	add	r0, r3
 8007cdc:	f010 001f 	ands.w	r0, r0, #31
 8007ce0:	d077      	beq.n	8007dd2 <_dtoa_r+0x8f2>
 8007ce2:	f1c0 0320 	rsb	r3, r0, #32
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	dd6b      	ble.n	8007dc2 <_dtoa_r+0x8e2>
 8007cea:	9b08      	ldr	r3, [sp, #32]
 8007cec:	f1c0 001c 	rsb	r0, r0, #28
 8007cf0:	4403      	add	r3, r0
 8007cf2:	4480      	add	r8, r0
 8007cf4:	4406      	add	r6, r0
 8007cf6:	9308      	str	r3, [sp, #32]
 8007cf8:	f1b8 0f00 	cmp.w	r8, #0
 8007cfc:	dd05      	ble.n	8007d0a <_dtoa_r+0x82a>
 8007cfe:	4649      	mov	r1, r9
 8007d00:	4642      	mov	r2, r8
 8007d02:	4658      	mov	r0, fp
 8007d04:	f000 fcbe 	bl	8008684 <__lshift>
 8007d08:	4681      	mov	r9, r0
 8007d0a:	9b08      	ldr	r3, [sp, #32]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dd05      	ble.n	8007d1c <_dtoa_r+0x83c>
 8007d10:	4621      	mov	r1, r4
 8007d12:	461a      	mov	r2, r3
 8007d14:	4658      	mov	r0, fp
 8007d16:	f000 fcb5 	bl	8008684 <__lshift>
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d059      	beq.n	8007dd6 <_dtoa_r+0x8f6>
 8007d22:	4621      	mov	r1, r4
 8007d24:	4648      	mov	r0, r9
 8007d26:	f000 fd19 	bl	800875c <__mcmp>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	da53      	bge.n	8007dd6 <_dtoa_r+0x8f6>
 8007d2e:	1e7b      	subs	r3, r7, #1
 8007d30:	9304      	str	r3, [sp, #16]
 8007d32:	4649      	mov	r1, r9
 8007d34:	2300      	movs	r3, #0
 8007d36:	220a      	movs	r2, #10
 8007d38:	4658      	mov	r0, fp
 8007d3a:	f000 faf7 	bl	800832c <__multadd>
 8007d3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d40:	4681      	mov	r9, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 8172 	beq.w	800802c <_dtoa_r+0xb4c>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	220a      	movs	r2, #10
 8007d4e:	4658      	mov	r0, fp
 8007d50:	f000 faec 	bl	800832c <__multadd>
 8007d54:	9b00      	ldr	r3, [sp, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	4605      	mov	r5, r0
 8007d5a:	dc67      	bgt.n	8007e2c <_dtoa_r+0x94c>
 8007d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	dc41      	bgt.n	8007de6 <_dtoa_r+0x906>
 8007d62:	e063      	b.n	8007e2c <_dtoa_r+0x94c>
 8007d64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007d6a:	e746      	b.n	8007bfa <_dtoa_r+0x71a>
 8007d6c:	9b07      	ldr	r3, [sp, #28]
 8007d6e:	1e5c      	subs	r4, r3, #1
 8007d70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d72:	42a3      	cmp	r3, r4
 8007d74:	bfbf      	itttt	lt
 8007d76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007d78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007d7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007d7c:	1ae3      	sublt	r3, r4, r3
 8007d7e:	bfb4      	ite	lt
 8007d80:	18d2      	addlt	r2, r2, r3
 8007d82:	1b1c      	subge	r4, r3, r4
 8007d84:	9b07      	ldr	r3, [sp, #28]
 8007d86:	bfbc      	itt	lt
 8007d88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007d8a:	2400      	movlt	r4, #0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	bfb5      	itete	lt
 8007d90:	eba8 0603 	sublt.w	r6, r8, r3
 8007d94:	9b07      	ldrge	r3, [sp, #28]
 8007d96:	2300      	movlt	r3, #0
 8007d98:	4646      	movge	r6, r8
 8007d9a:	e730      	b.n	8007bfe <_dtoa_r+0x71e>
 8007d9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007da0:	4646      	mov	r6, r8
 8007da2:	e735      	b.n	8007c10 <_dtoa_r+0x730>
 8007da4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007da6:	e75c      	b.n	8007c62 <_dtoa_r+0x782>
 8007da8:	2300      	movs	r3, #0
 8007daa:	e788      	b.n	8007cbe <_dtoa_r+0x7de>
 8007dac:	3fe00000 	.word	0x3fe00000
 8007db0:	40240000 	.word	0x40240000
 8007db4:	40140000 	.word	0x40140000
 8007db8:	9b02      	ldr	r3, [sp, #8]
 8007dba:	e780      	b.n	8007cbe <_dtoa_r+0x7de>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dc0:	e782      	b.n	8007cc8 <_dtoa_r+0x7e8>
 8007dc2:	d099      	beq.n	8007cf8 <_dtoa_r+0x818>
 8007dc4:	9a08      	ldr	r2, [sp, #32]
 8007dc6:	331c      	adds	r3, #28
 8007dc8:	441a      	add	r2, r3
 8007dca:	4498      	add	r8, r3
 8007dcc:	441e      	add	r6, r3
 8007dce:	9208      	str	r2, [sp, #32]
 8007dd0:	e792      	b.n	8007cf8 <_dtoa_r+0x818>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	e7f6      	b.n	8007dc4 <_dtoa_r+0x8e4>
 8007dd6:	9b07      	ldr	r3, [sp, #28]
 8007dd8:	9704      	str	r7, [sp, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	dc20      	bgt.n	8007e20 <_dtoa_r+0x940>
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	dd1e      	ble.n	8007e24 <_dtoa_r+0x944>
 8007de6:	9b00      	ldr	r3, [sp, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f47f aec0 	bne.w	8007b6e <_dtoa_r+0x68e>
 8007dee:	4621      	mov	r1, r4
 8007df0:	2205      	movs	r2, #5
 8007df2:	4658      	mov	r0, fp
 8007df4:	f000 fa9a 	bl	800832c <__multadd>
 8007df8:	4601      	mov	r1, r0
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4648      	mov	r0, r9
 8007dfe:	f000 fcad 	bl	800875c <__mcmp>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	f77f aeb3 	ble.w	8007b6e <_dtoa_r+0x68e>
 8007e08:	4656      	mov	r6, sl
 8007e0a:	2331      	movs	r3, #49	@ 0x31
 8007e0c:	f806 3b01 	strb.w	r3, [r6], #1
 8007e10:	9b04      	ldr	r3, [sp, #16]
 8007e12:	3301      	adds	r3, #1
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	e6ae      	b.n	8007b76 <_dtoa_r+0x696>
 8007e18:	9c07      	ldr	r4, [sp, #28]
 8007e1a:	9704      	str	r7, [sp, #16]
 8007e1c:	4625      	mov	r5, r4
 8007e1e:	e7f3      	b.n	8007e08 <_dtoa_r+0x928>
 8007e20:	9b07      	ldr	r3, [sp, #28]
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 8104 	beq.w	8008034 <_dtoa_r+0xb54>
 8007e2c:	2e00      	cmp	r6, #0
 8007e2e:	dd05      	ble.n	8007e3c <_dtoa_r+0x95c>
 8007e30:	4629      	mov	r1, r5
 8007e32:	4632      	mov	r2, r6
 8007e34:	4658      	mov	r0, fp
 8007e36:	f000 fc25 	bl	8008684 <__lshift>
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d05a      	beq.n	8007ef8 <_dtoa_r+0xa18>
 8007e42:	6869      	ldr	r1, [r5, #4]
 8007e44:	4658      	mov	r0, fp
 8007e46:	f000 fa0f 	bl	8008268 <_Balloc>
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	b928      	cbnz	r0, 8007e5a <_dtoa_r+0x97a>
 8007e4e:	4b84      	ldr	r3, [pc, #528]	@ (8008060 <_dtoa_r+0xb80>)
 8007e50:	4602      	mov	r2, r0
 8007e52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007e56:	f7ff bb5a 	b.w	800750e <_dtoa_r+0x2e>
 8007e5a:	692a      	ldr	r2, [r5, #16]
 8007e5c:	3202      	adds	r2, #2
 8007e5e:	0092      	lsls	r2, r2, #2
 8007e60:	f105 010c 	add.w	r1, r5, #12
 8007e64:	300c      	adds	r0, #12
 8007e66:	f000 ffaf 	bl	8008dc8 <memcpy>
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4658      	mov	r0, fp
 8007e70:	f000 fc08 	bl	8008684 <__lshift>
 8007e74:	f10a 0301 	add.w	r3, sl, #1
 8007e78:	9307      	str	r3, [sp, #28]
 8007e7a:	9b00      	ldr	r3, [sp, #0]
 8007e7c:	4453      	add	r3, sl
 8007e7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e80:	9b02      	ldr	r3, [sp, #8]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	462f      	mov	r7, r5
 8007e88:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	9b07      	ldr	r3, [sp, #28]
 8007e8e:	4621      	mov	r1, r4
 8007e90:	3b01      	subs	r3, #1
 8007e92:	4648      	mov	r0, r9
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	f7ff fa9a 	bl	80073ce <quorem>
 8007e9a:	4639      	mov	r1, r7
 8007e9c:	9002      	str	r0, [sp, #8]
 8007e9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ea2:	4648      	mov	r0, r9
 8007ea4:	f000 fc5a 	bl	800875c <__mcmp>
 8007ea8:	462a      	mov	r2, r5
 8007eaa:	9008      	str	r0, [sp, #32]
 8007eac:	4621      	mov	r1, r4
 8007eae:	4658      	mov	r0, fp
 8007eb0:	f000 fc70 	bl	8008794 <__mdiff>
 8007eb4:	68c2      	ldr	r2, [r0, #12]
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	bb02      	cbnz	r2, 8007efc <_dtoa_r+0xa1c>
 8007eba:	4601      	mov	r1, r0
 8007ebc:	4648      	mov	r0, r9
 8007ebe:	f000 fc4d 	bl	800875c <__mcmp>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eca:	f000 fa0d 	bl	80082e8 <_Bfree>
 8007ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ed2:	9e07      	ldr	r6, [sp, #28]
 8007ed4:	ea43 0102 	orr.w	r1, r3, r2
 8007ed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eda:	4319      	orrs	r1, r3
 8007edc:	d110      	bne.n	8007f00 <_dtoa_r+0xa20>
 8007ede:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ee2:	d029      	beq.n	8007f38 <_dtoa_r+0xa58>
 8007ee4:	9b08      	ldr	r3, [sp, #32]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dd02      	ble.n	8007ef0 <_dtoa_r+0xa10>
 8007eea:	9b02      	ldr	r3, [sp, #8]
 8007eec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ef0:	9b00      	ldr	r3, [sp, #0]
 8007ef2:	f883 8000 	strb.w	r8, [r3]
 8007ef6:	e63f      	b.n	8007b78 <_dtoa_r+0x698>
 8007ef8:	4628      	mov	r0, r5
 8007efa:	e7bb      	b.n	8007e74 <_dtoa_r+0x994>
 8007efc:	2201      	movs	r2, #1
 8007efe:	e7e1      	b.n	8007ec4 <_dtoa_r+0x9e4>
 8007f00:	9b08      	ldr	r3, [sp, #32]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	db04      	blt.n	8007f10 <_dtoa_r+0xa30>
 8007f06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f0c:	430b      	orrs	r3, r1
 8007f0e:	d120      	bne.n	8007f52 <_dtoa_r+0xa72>
 8007f10:	2a00      	cmp	r2, #0
 8007f12:	dded      	ble.n	8007ef0 <_dtoa_r+0xa10>
 8007f14:	4649      	mov	r1, r9
 8007f16:	2201      	movs	r2, #1
 8007f18:	4658      	mov	r0, fp
 8007f1a:	f000 fbb3 	bl	8008684 <__lshift>
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4681      	mov	r9, r0
 8007f22:	f000 fc1b 	bl	800875c <__mcmp>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	dc03      	bgt.n	8007f32 <_dtoa_r+0xa52>
 8007f2a:	d1e1      	bne.n	8007ef0 <_dtoa_r+0xa10>
 8007f2c:	f018 0f01 	tst.w	r8, #1
 8007f30:	d0de      	beq.n	8007ef0 <_dtoa_r+0xa10>
 8007f32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f36:	d1d8      	bne.n	8007eea <_dtoa_r+0xa0a>
 8007f38:	9a00      	ldr	r2, [sp, #0]
 8007f3a:	2339      	movs	r3, #57	@ 0x39
 8007f3c:	7013      	strb	r3, [r2, #0]
 8007f3e:	4633      	mov	r3, r6
 8007f40:	461e      	mov	r6, r3
 8007f42:	3b01      	subs	r3, #1
 8007f44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007f48:	2a39      	cmp	r2, #57	@ 0x39
 8007f4a:	d052      	beq.n	8007ff2 <_dtoa_r+0xb12>
 8007f4c:	3201      	adds	r2, #1
 8007f4e:	701a      	strb	r2, [r3, #0]
 8007f50:	e612      	b.n	8007b78 <_dtoa_r+0x698>
 8007f52:	2a00      	cmp	r2, #0
 8007f54:	dd07      	ble.n	8007f66 <_dtoa_r+0xa86>
 8007f56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f5a:	d0ed      	beq.n	8007f38 <_dtoa_r+0xa58>
 8007f5c:	9a00      	ldr	r2, [sp, #0]
 8007f5e:	f108 0301 	add.w	r3, r8, #1
 8007f62:	7013      	strb	r3, [r2, #0]
 8007f64:	e608      	b.n	8007b78 <_dtoa_r+0x698>
 8007f66:	9b07      	ldr	r3, [sp, #28]
 8007f68:	9a07      	ldr	r2, [sp, #28]
 8007f6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d028      	beq.n	8007fc6 <_dtoa_r+0xae6>
 8007f74:	4649      	mov	r1, r9
 8007f76:	2300      	movs	r3, #0
 8007f78:	220a      	movs	r2, #10
 8007f7a:	4658      	mov	r0, fp
 8007f7c:	f000 f9d6 	bl	800832c <__multadd>
 8007f80:	42af      	cmp	r7, r5
 8007f82:	4681      	mov	r9, r0
 8007f84:	f04f 0300 	mov.w	r3, #0
 8007f88:	f04f 020a 	mov.w	r2, #10
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	4658      	mov	r0, fp
 8007f90:	d107      	bne.n	8007fa2 <_dtoa_r+0xac2>
 8007f92:	f000 f9cb 	bl	800832c <__multadd>
 8007f96:	4607      	mov	r7, r0
 8007f98:	4605      	mov	r5, r0
 8007f9a:	9b07      	ldr	r3, [sp, #28]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	9307      	str	r3, [sp, #28]
 8007fa0:	e774      	b.n	8007e8c <_dtoa_r+0x9ac>
 8007fa2:	f000 f9c3 	bl	800832c <__multadd>
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4607      	mov	r7, r0
 8007faa:	2300      	movs	r3, #0
 8007fac:	220a      	movs	r2, #10
 8007fae:	4658      	mov	r0, fp
 8007fb0:	f000 f9bc 	bl	800832c <__multadd>
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	e7f0      	b.n	8007f9a <_dtoa_r+0xaba>
 8007fb8:	9b00      	ldr	r3, [sp, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	bfcc      	ite	gt
 8007fbe:	461e      	movgt	r6, r3
 8007fc0:	2601      	movle	r6, #1
 8007fc2:	4456      	add	r6, sl
 8007fc4:	2700      	movs	r7, #0
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	2201      	movs	r2, #1
 8007fca:	4658      	mov	r0, fp
 8007fcc:	f000 fb5a 	bl	8008684 <__lshift>
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	4681      	mov	r9, r0
 8007fd4:	f000 fbc2 	bl	800875c <__mcmp>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	dcb0      	bgt.n	8007f3e <_dtoa_r+0xa5e>
 8007fdc:	d102      	bne.n	8007fe4 <_dtoa_r+0xb04>
 8007fde:	f018 0f01 	tst.w	r8, #1
 8007fe2:	d1ac      	bne.n	8007f3e <_dtoa_r+0xa5e>
 8007fe4:	4633      	mov	r3, r6
 8007fe6:	461e      	mov	r6, r3
 8007fe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fec:	2a30      	cmp	r2, #48	@ 0x30
 8007fee:	d0fa      	beq.n	8007fe6 <_dtoa_r+0xb06>
 8007ff0:	e5c2      	b.n	8007b78 <_dtoa_r+0x698>
 8007ff2:	459a      	cmp	sl, r3
 8007ff4:	d1a4      	bne.n	8007f40 <_dtoa_r+0xa60>
 8007ff6:	9b04      	ldr	r3, [sp, #16]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	9304      	str	r3, [sp, #16]
 8007ffc:	2331      	movs	r3, #49	@ 0x31
 8007ffe:	f88a 3000 	strb.w	r3, [sl]
 8008002:	e5b9      	b.n	8007b78 <_dtoa_r+0x698>
 8008004:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008006:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008064 <_dtoa_r+0xb84>
 800800a:	b11b      	cbz	r3, 8008014 <_dtoa_r+0xb34>
 800800c:	f10a 0308 	add.w	r3, sl, #8
 8008010:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008012:	6013      	str	r3, [r2, #0]
 8008014:	4650      	mov	r0, sl
 8008016:	b019      	add	sp, #100	@ 0x64
 8008018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800801e:	2b01      	cmp	r3, #1
 8008020:	f77f ae37 	ble.w	8007c92 <_dtoa_r+0x7b2>
 8008024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008026:	930a      	str	r3, [sp, #40]	@ 0x28
 8008028:	2001      	movs	r0, #1
 800802a:	e655      	b.n	8007cd8 <_dtoa_r+0x7f8>
 800802c:	9b00      	ldr	r3, [sp, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f77f aed6 	ble.w	8007de0 <_dtoa_r+0x900>
 8008034:	4656      	mov	r6, sl
 8008036:	4621      	mov	r1, r4
 8008038:	4648      	mov	r0, r9
 800803a:	f7ff f9c8 	bl	80073ce <quorem>
 800803e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008042:	f806 8b01 	strb.w	r8, [r6], #1
 8008046:	9b00      	ldr	r3, [sp, #0]
 8008048:	eba6 020a 	sub.w	r2, r6, sl
 800804c:	4293      	cmp	r3, r2
 800804e:	ddb3      	ble.n	8007fb8 <_dtoa_r+0xad8>
 8008050:	4649      	mov	r1, r9
 8008052:	2300      	movs	r3, #0
 8008054:	220a      	movs	r2, #10
 8008056:	4658      	mov	r0, fp
 8008058:	f000 f968 	bl	800832c <__multadd>
 800805c:	4681      	mov	r9, r0
 800805e:	e7ea      	b.n	8008036 <_dtoa_r+0xb56>
 8008060:	0800961c 	.word	0x0800961c
 8008064:	080095a0 	.word	0x080095a0

08008068 <_free_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4605      	mov	r5, r0
 800806c:	2900      	cmp	r1, #0
 800806e:	d041      	beq.n	80080f4 <_free_r+0x8c>
 8008070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008074:	1f0c      	subs	r4, r1, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	bfb8      	it	lt
 800807a:	18e4      	addlt	r4, r4, r3
 800807c:	f000 f8e8 	bl	8008250 <__malloc_lock>
 8008080:	4a1d      	ldr	r2, [pc, #116]	@ (80080f8 <_free_r+0x90>)
 8008082:	6813      	ldr	r3, [r2, #0]
 8008084:	b933      	cbnz	r3, 8008094 <_free_r+0x2c>
 8008086:	6063      	str	r3, [r4, #4]
 8008088:	6014      	str	r4, [r2, #0]
 800808a:	4628      	mov	r0, r5
 800808c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008090:	f000 b8e4 	b.w	800825c <__malloc_unlock>
 8008094:	42a3      	cmp	r3, r4
 8008096:	d908      	bls.n	80080aa <_free_r+0x42>
 8008098:	6820      	ldr	r0, [r4, #0]
 800809a:	1821      	adds	r1, r4, r0
 800809c:	428b      	cmp	r3, r1
 800809e:	bf01      	itttt	eq
 80080a0:	6819      	ldreq	r1, [r3, #0]
 80080a2:	685b      	ldreq	r3, [r3, #4]
 80080a4:	1809      	addeq	r1, r1, r0
 80080a6:	6021      	streq	r1, [r4, #0]
 80080a8:	e7ed      	b.n	8008086 <_free_r+0x1e>
 80080aa:	461a      	mov	r2, r3
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	b10b      	cbz	r3, 80080b4 <_free_r+0x4c>
 80080b0:	42a3      	cmp	r3, r4
 80080b2:	d9fa      	bls.n	80080aa <_free_r+0x42>
 80080b4:	6811      	ldr	r1, [r2, #0]
 80080b6:	1850      	adds	r0, r2, r1
 80080b8:	42a0      	cmp	r0, r4
 80080ba:	d10b      	bne.n	80080d4 <_free_r+0x6c>
 80080bc:	6820      	ldr	r0, [r4, #0]
 80080be:	4401      	add	r1, r0
 80080c0:	1850      	adds	r0, r2, r1
 80080c2:	4283      	cmp	r3, r0
 80080c4:	6011      	str	r1, [r2, #0]
 80080c6:	d1e0      	bne.n	800808a <_free_r+0x22>
 80080c8:	6818      	ldr	r0, [r3, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	6053      	str	r3, [r2, #4]
 80080ce:	4408      	add	r0, r1
 80080d0:	6010      	str	r0, [r2, #0]
 80080d2:	e7da      	b.n	800808a <_free_r+0x22>
 80080d4:	d902      	bls.n	80080dc <_free_r+0x74>
 80080d6:	230c      	movs	r3, #12
 80080d8:	602b      	str	r3, [r5, #0]
 80080da:	e7d6      	b.n	800808a <_free_r+0x22>
 80080dc:	6820      	ldr	r0, [r4, #0]
 80080de:	1821      	adds	r1, r4, r0
 80080e0:	428b      	cmp	r3, r1
 80080e2:	bf04      	itt	eq
 80080e4:	6819      	ldreq	r1, [r3, #0]
 80080e6:	685b      	ldreq	r3, [r3, #4]
 80080e8:	6063      	str	r3, [r4, #4]
 80080ea:	bf04      	itt	eq
 80080ec:	1809      	addeq	r1, r1, r0
 80080ee:	6021      	streq	r1, [r4, #0]
 80080f0:	6054      	str	r4, [r2, #4]
 80080f2:	e7ca      	b.n	800808a <_free_r+0x22>
 80080f4:	bd38      	pop	{r3, r4, r5, pc}
 80080f6:	bf00      	nop
 80080f8:	200004f4 	.word	0x200004f4

080080fc <malloc>:
 80080fc:	4b02      	ldr	r3, [pc, #8]	@ (8008108 <malloc+0xc>)
 80080fe:	4601      	mov	r1, r0
 8008100:	6818      	ldr	r0, [r3, #0]
 8008102:	f000 b825 	b.w	8008150 <_malloc_r>
 8008106:	bf00      	nop
 8008108:	2000001c 	.word	0x2000001c

0800810c <sbrk_aligned>:
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	4e0f      	ldr	r6, [pc, #60]	@ (800814c <sbrk_aligned+0x40>)
 8008110:	460c      	mov	r4, r1
 8008112:	6831      	ldr	r1, [r6, #0]
 8008114:	4605      	mov	r5, r0
 8008116:	b911      	cbnz	r1, 800811e <sbrk_aligned+0x12>
 8008118:	f000 fe46 	bl	8008da8 <_sbrk_r>
 800811c:	6030      	str	r0, [r6, #0]
 800811e:	4621      	mov	r1, r4
 8008120:	4628      	mov	r0, r5
 8008122:	f000 fe41 	bl	8008da8 <_sbrk_r>
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	d103      	bne.n	8008132 <sbrk_aligned+0x26>
 800812a:	f04f 34ff 	mov.w	r4, #4294967295
 800812e:	4620      	mov	r0, r4
 8008130:	bd70      	pop	{r4, r5, r6, pc}
 8008132:	1cc4      	adds	r4, r0, #3
 8008134:	f024 0403 	bic.w	r4, r4, #3
 8008138:	42a0      	cmp	r0, r4
 800813a:	d0f8      	beq.n	800812e <sbrk_aligned+0x22>
 800813c:	1a21      	subs	r1, r4, r0
 800813e:	4628      	mov	r0, r5
 8008140:	f000 fe32 	bl	8008da8 <_sbrk_r>
 8008144:	3001      	adds	r0, #1
 8008146:	d1f2      	bne.n	800812e <sbrk_aligned+0x22>
 8008148:	e7ef      	b.n	800812a <sbrk_aligned+0x1e>
 800814a:	bf00      	nop
 800814c:	200004f0 	.word	0x200004f0

08008150 <_malloc_r>:
 8008150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008154:	1ccd      	adds	r5, r1, #3
 8008156:	f025 0503 	bic.w	r5, r5, #3
 800815a:	3508      	adds	r5, #8
 800815c:	2d0c      	cmp	r5, #12
 800815e:	bf38      	it	cc
 8008160:	250c      	movcc	r5, #12
 8008162:	2d00      	cmp	r5, #0
 8008164:	4606      	mov	r6, r0
 8008166:	db01      	blt.n	800816c <_malloc_r+0x1c>
 8008168:	42a9      	cmp	r1, r5
 800816a:	d904      	bls.n	8008176 <_malloc_r+0x26>
 800816c:	230c      	movs	r3, #12
 800816e:	6033      	str	r3, [r6, #0]
 8008170:	2000      	movs	r0, #0
 8008172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800824c <_malloc_r+0xfc>
 800817a:	f000 f869 	bl	8008250 <__malloc_lock>
 800817e:	f8d8 3000 	ldr.w	r3, [r8]
 8008182:	461c      	mov	r4, r3
 8008184:	bb44      	cbnz	r4, 80081d8 <_malloc_r+0x88>
 8008186:	4629      	mov	r1, r5
 8008188:	4630      	mov	r0, r6
 800818a:	f7ff ffbf 	bl	800810c <sbrk_aligned>
 800818e:	1c43      	adds	r3, r0, #1
 8008190:	4604      	mov	r4, r0
 8008192:	d158      	bne.n	8008246 <_malloc_r+0xf6>
 8008194:	f8d8 4000 	ldr.w	r4, [r8]
 8008198:	4627      	mov	r7, r4
 800819a:	2f00      	cmp	r7, #0
 800819c:	d143      	bne.n	8008226 <_malloc_r+0xd6>
 800819e:	2c00      	cmp	r4, #0
 80081a0:	d04b      	beq.n	800823a <_malloc_r+0xea>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	4639      	mov	r1, r7
 80081a6:	4630      	mov	r0, r6
 80081a8:	eb04 0903 	add.w	r9, r4, r3
 80081ac:	f000 fdfc 	bl	8008da8 <_sbrk_r>
 80081b0:	4581      	cmp	r9, r0
 80081b2:	d142      	bne.n	800823a <_malloc_r+0xea>
 80081b4:	6821      	ldr	r1, [r4, #0]
 80081b6:	1a6d      	subs	r5, r5, r1
 80081b8:	4629      	mov	r1, r5
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7ff ffa6 	bl	800810c <sbrk_aligned>
 80081c0:	3001      	adds	r0, #1
 80081c2:	d03a      	beq.n	800823a <_malloc_r+0xea>
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	442b      	add	r3, r5
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	f8d8 3000 	ldr.w	r3, [r8]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	bb62      	cbnz	r2, 800822c <_malloc_r+0xdc>
 80081d2:	f8c8 7000 	str.w	r7, [r8]
 80081d6:	e00f      	b.n	80081f8 <_malloc_r+0xa8>
 80081d8:	6822      	ldr	r2, [r4, #0]
 80081da:	1b52      	subs	r2, r2, r5
 80081dc:	d420      	bmi.n	8008220 <_malloc_r+0xd0>
 80081de:	2a0b      	cmp	r2, #11
 80081e0:	d917      	bls.n	8008212 <_malloc_r+0xc2>
 80081e2:	1961      	adds	r1, r4, r5
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	6025      	str	r5, [r4, #0]
 80081e8:	bf18      	it	ne
 80081ea:	6059      	strne	r1, [r3, #4]
 80081ec:	6863      	ldr	r3, [r4, #4]
 80081ee:	bf08      	it	eq
 80081f0:	f8c8 1000 	streq.w	r1, [r8]
 80081f4:	5162      	str	r2, [r4, r5]
 80081f6:	604b      	str	r3, [r1, #4]
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 f82f 	bl	800825c <__malloc_unlock>
 80081fe:	f104 000b 	add.w	r0, r4, #11
 8008202:	1d23      	adds	r3, r4, #4
 8008204:	f020 0007 	bic.w	r0, r0, #7
 8008208:	1ac2      	subs	r2, r0, r3
 800820a:	bf1c      	itt	ne
 800820c:	1a1b      	subne	r3, r3, r0
 800820e:	50a3      	strne	r3, [r4, r2]
 8008210:	e7af      	b.n	8008172 <_malloc_r+0x22>
 8008212:	6862      	ldr	r2, [r4, #4]
 8008214:	42a3      	cmp	r3, r4
 8008216:	bf0c      	ite	eq
 8008218:	f8c8 2000 	streq.w	r2, [r8]
 800821c:	605a      	strne	r2, [r3, #4]
 800821e:	e7eb      	b.n	80081f8 <_malloc_r+0xa8>
 8008220:	4623      	mov	r3, r4
 8008222:	6864      	ldr	r4, [r4, #4]
 8008224:	e7ae      	b.n	8008184 <_malloc_r+0x34>
 8008226:	463c      	mov	r4, r7
 8008228:	687f      	ldr	r7, [r7, #4]
 800822a:	e7b6      	b.n	800819a <_malloc_r+0x4a>
 800822c:	461a      	mov	r2, r3
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	42a3      	cmp	r3, r4
 8008232:	d1fb      	bne.n	800822c <_malloc_r+0xdc>
 8008234:	2300      	movs	r3, #0
 8008236:	6053      	str	r3, [r2, #4]
 8008238:	e7de      	b.n	80081f8 <_malloc_r+0xa8>
 800823a:	230c      	movs	r3, #12
 800823c:	6033      	str	r3, [r6, #0]
 800823e:	4630      	mov	r0, r6
 8008240:	f000 f80c 	bl	800825c <__malloc_unlock>
 8008244:	e794      	b.n	8008170 <_malloc_r+0x20>
 8008246:	6005      	str	r5, [r0, #0]
 8008248:	e7d6      	b.n	80081f8 <_malloc_r+0xa8>
 800824a:	bf00      	nop
 800824c:	200004f4 	.word	0x200004f4

08008250 <__malloc_lock>:
 8008250:	4801      	ldr	r0, [pc, #4]	@ (8008258 <__malloc_lock+0x8>)
 8008252:	f7ff b8ba 	b.w	80073ca <__retarget_lock_acquire_recursive>
 8008256:	bf00      	nop
 8008258:	200004ec 	.word	0x200004ec

0800825c <__malloc_unlock>:
 800825c:	4801      	ldr	r0, [pc, #4]	@ (8008264 <__malloc_unlock+0x8>)
 800825e:	f7ff b8b5 	b.w	80073cc <__retarget_lock_release_recursive>
 8008262:	bf00      	nop
 8008264:	200004ec 	.word	0x200004ec

08008268 <_Balloc>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	69c6      	ldr	r6, [r0, #28]
 800826c:	4604      	mov	r4, r0
 800826e:	460d      	mov	r5, r1
 8008270:	b976      	cbnz	r6, 8008290 <_Balloc+0x28>
 8008272:	2010      	movs	r0, #16
 8008274:	f7ff ff42 	bl	80080fc <malloc>
 8008278:	4602      	mov	r2, r0
 800827a:	61e0      	str	r0, [r4, #28]
 800827c:	b920      	cbnz	r0, 8008288 <_Balloc+0x20>
 800827e:	4b18      	ldr	r3, [pc, #96]	@ (80082e0 <_Balloc+0x78>)
 8008280:	4818      	ldr	r0, [pc, #96]	@ (80082e4 <_Balloc+0x7c>)
 8008282:	216b      	movs	r1, #107	@ 0x6b
 8008284:	f000 fdae 	bl	8008de4 <__assert_func>
 8008288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800828c:	6006      	str	r6, [r0, #0]
 800828e:	60c6      	str	r6, [r0, #12]
 8008290:	69e6      	ldr	r6, [r4, #28]
 8008292:	68f3      	ldr	r3, [r6, #12]
 8008294:	b183      	cbz	r3, 80082b8 <_Balloc+0x50>
 8008296:	69e3      	ldr	r3, [r4, #28]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800829e:	b9b8      	cbnz	r0, 80082d0 <_Balloc+0x68>
 80082a0:	2101      	movs	r1, #1
 80082a2:	fa01 f605 	lsl.w	r6, r1, r5
 80082a6:	1d72      	adds	r2, r6, #5
 80082a8:	0092      	lsls	r2, r2, #2
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 fdb8 	bl	8008e20 <_calloc_r>
 80082b0:	b160      	cbz	r0, 80082cc <_Balloc+0x64>
 80082b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082b6:	e00e      	b.n	80082d6 <_Balloc+0x6e>
 80082b8:	2221      	movs	r2, #33	@ 0x21
 80082ba:	2104      	movs	r1, #4
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fdaf 	bl	8008e20 <_calloc_r>
 80082c2:	69e3      	ldr	r3, [r4, #28]
 80082c4:	60f0      	str	r0, [r6, #12]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e4      	bne.n	8008296 <_Balloc+0x2e>
 80082cc:	2000      	movs	r0, #0
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	6802      	ldr	r2, [r0, #0]
 80082d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082d6:	2300      	movs	r3, #0
 80082d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082dc:	e7f7      	b.n	80082ce <_Balloc+0x66>
 80082de:	bf00      	nop
 80082e0:	080095ad 	.word	0x080095ad
 80082e4:	0800962d 	.word	0x0800962d

080082e8 <_Bfree>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	69c6      	ldr	r6, [r0, #28]
 80082ec:	4605      	mov	r5, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	b976      	cbnz	r6, 8008310 <_Bfree+0x28>
 80082f2:	2010      	movs	r0, #16
 80082f4:	f7ff ff02 	bl	80080fc <malloc>
 80082f8:	4602      	mov	r2, r0
 80082fa:	61e8      	str	r0, [r5, #28]
 80082fc:	b920      	cbnz	r0, 8008308 <_Bfree+0x20>
 80082fe:	4b09      	ldr	r3, [pc, #36]	@ (8008324 <_Bfree+0x3c>)
 8008300:	4809      	ldr	r0, [pc, #36]	@ (8008328 <_Bfree+0x40>)
 8008302:	218f      	movs	r1, #143	@ 0x8f
 8008304:	f000 fd6e 	bl	8008de4 <__assert_func>
 8008308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800830c:	6006      	str	r6, [r0, #0]
 800830e:	60c6      	str	r6, [r0, #12]
 8008310:	b13c      	cbz	r4, 8008322 <_Bfree+0x3a>
 8008312:	69eb      	ldr	r3, [r5, #28]
 8008314:	6862      	ldr	r2, [r4, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800831c:	6021      	str	r1, [r4, #0]
 800831e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	080095ad 	.word	0x080095ad
 8008328:	0800962d 	.word	0x0800962d

0800832c <__multadd>:
 800832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008330:	690d      	ldr	r5, [r1, #16]
 8008332:	4607      	mov	r7, r0
 8008334:	460c      	mov	r4, r1
 8008336:	461e      	mov	r6, r3
 8008338:	f101 0c14 	add.w	ip, r1, #20
 800833c:	2000      	movs	r0, #0
 800833e:	f8dc 3000 	ldr.w	r3, [ip]
 8008342:	b299      	uxth	r1, r3
 8008344:	fb02 6101 	mla	r1, r2, r1, r6
 8008348:	0c1e      	lsrs	r6, r3, #16
 800834a:	0c0b      	lsrs	r3, r1, #16
 800834c:	fb02 3306 	mla	r3, r2, r6, r3
 8008350:	b289      	uxth	r1, r1
 8008352:	3001      	adds	r0, #1
 8008354:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008358:	4285      	cmp	r5, r0
 800835a:	f84c 1b04 	str.w	r1, [ip], #4
 800835e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008362:	dcec      	bgt.n	800833e <__multadd+0x12>
 8008364:	b30e      	cbz	r6, 80083aa <__multadd+0x7e>
 8008366:	68a3      	ldr	r3, [r4, #8]
 8008368:	42ab      	cmp	r3, r5
 800836a:	dc19      	bgt.n	80083a0 <__multadd+0x74>
 800836c:	6861      	ldr	r1, [r4, #4]
 800836e:	4638      	mov	r0, r7
 8008370:	3101      	adds	r1, #1
 8008372:	f7ff ff79 	bl	8008268 <_Balloc>
 8008376:	4680      	mov	r8, r0
 8008378:	b928      	cbnz	r0, 8008386 <__multadd+0x5a>
 800837a:	4602      	mov	r2, r0
 800837c:	4b0c      	ldr	r3, [pc, #48]	@ (80083b0 <__multadd+0x84>)
 800837e:	480d      	ldr	r0, [pc, #52]	@ (80083b4 <__multadd+0x88>)
 8008380:	21ba      	movs	r1, #186	@ 0xba
 8008382:	f000 fd2f 	bl	8008de4 <__assert_func>
 8008386:	6922      	ldr	r2, [r4, #16]
 8008388:	3202      	adds	r2, #2
 800838a:	f104 010c 	add.w	r1, r4, #12
 800838e:	0092      	lsls	r2, r2, #2
 8008390:	300c      	adds	r0, #12
 8008392:	f000 fd19 	bl	8008dc8 <memcpy>
 8008396:	4621      	mov	r1, r4
 8008398:	4638      	mov	r0, r7
 800839a:	f7ff ffa5 	bl	80082e8 <_Bfree>
 800839e:	4644      	mov	r4, r8
 80083a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083a4:	3501      	adds	r5, #1
 80083a6:	615e      	str	r6, [r3, #20]
 80083a8:	6125      	str	r5, [r4, #16]
 80083aa:	4620      	mov	r0, r4
 80083ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b0:	0800961c 	.word	0x0800961c
 80083b4:	0800962d 	.word	0x0800962d

080083b8 <__hi0bits>:
 80083b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80083bc:	4603      	mov	r3, r0
 80083be:	bf36      	itet	cc
 80083c0:	0403      	lslcc	r3, r0, #16
 80083c2:	2000      	movcs	r0, #0
 80083c4:	2010      	movcc	r0, #16
 80083c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083ca:	bf3c      	itt	cc
 80083cc:	021b      	lslcc	r3, r3, #8
 80083ce:	3008      	addcc	r0, #8
 80083d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083d4:	bf3c      	itt	cc
 80083d6:	011b      	lslcc	r3, r3, #4
 80083d8:	3004      	addcc	r0, #4
 80083da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083de:	bf3c      	itt	cc
 80083e0:	009b      	lslcc	r3, r3, #2
 80083e2:	3002      	addcc	r0, #2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	db05      	blt.n	80083f4 <__hi0bits+0x3c>
 80083e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80083ec:	f100 0001 	add.w	r0, r0, #1
 80083f0:	bf08      	it	eq
 80083f2:	2020      	moveq	r0, #32
 80083f4:	4770      	bx	lr

080083f6 <__lo0bits>:
 80083f6:	6803      	ldr	r3, [r0, #0]
 80083f8:	4602      	mov	r2, r0
 80083fa:	f013 0007 	ands.w	r0, r3, #7
 80083fe:	d00b      	beq.n	8008418 <__lo0bits+0x22>
 8008400:	07d9      	lsls	r1, r3, #31
 8008402:	d421      	bmi.n	8008448 <__lo0bits+0x52>
 8008404:	0798      	lsls	r0, r3, #30
 8008406:	bf49      	itett	mi
 8008408:	085b      	lsrmi	r3, r3, #1
 800840a:	089b      	lsrpl	r3, r3, #2
 800840c:	2001      	movmi	r0, #1
 800840e:	6013      	strmi	r3, [r2, #0]
 8008410:	bf5c      	itt	pl
 8008412:	6013      	strpl	r3, [r2, #0]
 8008414:	2002      	movpl	r0, #2
 8008416:	4770      	bx	lr
 8008418:	b299      	uxth	r1, r3
 800841a:	b909      	cbnz	r1, 8008420 <__lo0bits+0x2a>
 800841c:	0c1b      	lsrs	r3, r3, #16
 800841e:	2010      	movs	r0, #16
 8008420:	b2d9      	uxtb	r1, r3
 8008422:	b909      	cbnz	r1, 8008428 <__lo0bits+0x32>
 8008424:	3008      	adds	r0, #8
 8008426:	0a1b      	lsrs	r3, r3, #8
 8008428:	0719      	lsls	r1, r3, #28
 800842a:	bf04      	itt	eq
 800842c:	091b      	lsreq	r3, r3, #4
 800842e:	3004      	addeq	r0, #4
 8008430:	0799      	lsls	r1, r3, #30
 8008432:	bf04      	itt	eq
 8008434:	089b      	lsreq	r3, r3, #2
 8008436:	3002      	addeq	r0, #2
 8008438:	07d9      	lsls	r1, r3, #31
 800843a:	d403      	bmi.n	8008444 <__lo0bits+0x4e>
 800843c:	085b      	lsrs	r3, r3, #1
 800843e:	f100 0001 	add.w	r0, r0, #1
 8008442:	d003      	beq.n	800844c <__lo0bits+0x56>
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	4770      	bx	lr
 8008448:	2000      	movs	r0, #0
 800844a:	4770      	bx	lr
 800844c:	2020      	movs	r0, #32
 800844e:	4770      	bx	lr

08008450 <__i2b>:
 8008450:	b510      	push	{r4, lr}
 8008452:	460c      	mov	r4, r1
 8008454:	2101      	movs	r1, #1
 8008456:	f7ff ff07 	bl	8008268 <_Balloc>
 800845a:	4602      	mov	r2, r0
 800845c:	b928      	cbnz	r0, 800846a <__i2b+0x1a>
 800845e:	4b05      	ldr	r3, [pc, #20]	@ (8008474 <__i2b+0x24>)
 8008460:	4805      	ldr	r0, [pc, #20]	@ (8008478 <__i2b+0x28>)
 8008462:	f240 1145 	movw	r1, #325	@ 0x145
 8008466:	f000 fcbd 	bl	8008de4 <__assert_func>
 800846a:	2301      	movs	r3, #1
 800846c:	6144      	str	r4, [r0, #20]
 800846e:	6103      	str	r3, [r0, #16]
 8008470:	bd10      	pop	{r4, pc}
 8008472:	bf00      	nop
 8008474:	0800961c 	.word	0x0800961c
 8008478:	0800962d 	.word	0x0800962d

0800847c <__multiply>:
 800847c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008480:	4614      	mov	r4, r2
 8008482:	690a      	ldr	r2, [r1, #16]
 8008484:	6923      	ldr	r3, [r4, #16]
 8008486:	429a      	cmp	r2, r3
 8008488:	bfa8      	it	ge
 800848a:	4623      	movge	r3, r4
 800848c:	460f      	mov	r7, r1
 800848e:	bfa4      	itt	ge
 8008490:	460c      	movge	r4, r1
 8008492:	461f      	movge	r7, r3
 8008494:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008498:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800849c:	68a3      	ldr	r3, [r4, #8]
 800849e:	6861      	ldr	r1, [r4, #4]
 80084a0:	eb0a 0609 	add.w	r6, sl, r9
 80084a4:	42b3      	cmp	r3, r6
 80084a6:	b085      	sub	sp, #20
 80084a8:	bfb8      	it	lt
 80084aa:	3101      	addlt	r1, #1
 80084ac:	f7ff fedc 	bl	8008268 <_Balloc>
 80084b0:	b930      	cbnz	r0, 80084c0 <__multiply+0x44>
 80084b2:	4602      	mov	r2, r0
 80084b4:	4b44      	ldr	r3, [pc, #272]	@ (80085c8 <__multiply+0x14c>)
 80084b6:	4845      	ldr	r0, [pc, #276]	@ (80085cc <__multiply+0x150>)
 80084b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80084bc:	f000 fc92 	bl	8008de4 <__assert_func>
 80084c0:	f100 0514 	add.w	r5, r0, #20
 80084c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084c8:	462b      	mov	r3, r5
 80084ca:	2200      	movs	r2, #0
 80084cc:	4543      	cmp	r3, r8
 80084ce:	d321      	bcc.n	8008514 <__multiply+0x98>
 80084d0:	f107 0114 	add.w	r1, r7, #20
 80084d4:	f104 0214 	add.w	r2, r4, #20
 80084d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80084dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80084e0:	9302      	str	r3, [sp, #8]
 80084e2:	1b13      	subs	r3, r2, r4
 80084e4:	3b15      	subs	r3, #21
 80084e6:	f023 0303 	bic.w	r3, r3, #3
 80084ea:	3304      	adds	r3, #4
 80084ec:	f104 0715 	add.w	r7, r4, #21
 80084f0:	42ba      	cmp	r2, r7
 80084f2:	bf38      	it	cc
 80084f4:	2304      	movcc	r3, #4
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	9b02      	ldr	r3, [sp, #8]
 80084fa:	9103      	str	r1, [sp, #12]
 80084fc:	428b      	cmp	r3, r1
 80084fe:	d80c      	bhi.n	800851a <__multiply+0x9e>
 8008500:	2e00      	cmp	r6, #0
 8008502:	dd03      	ble.n	800850c <__multiply+0x90>
 8008504:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008508:	2b00      	cmp	r3, #0
 800850a:	d05b      	beq.n	80085c4 <__multiply+0x148>
 800850c:	6106      	str	r6, [r0, #16]
 800850e:	b005      	add	sp, #20
 8008510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008514:	f843 2b04 	str.w	r2, [r3], #4
 8008518:	e7d8      	b.n	80084cc <__multiply+0x50>
 800851a:	f8b1 a000 	ldrh.w	sl, [r1]
 800851e:	f1ba 0f00 	cmp.w	sl, #0
 8008522:	d024      	beq.n	800856e <__multiply+0xf2>
 8008524:	f104 0e14 	add.w	lr, r4, #20
 8008528:	46a9      	mov	r9, r5
 800852a:	f04f 0c00 	mov.w	ip, #0
 800852e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008532:	f8d9 3000 	ldr.w	r3, [r9]
 8008536:	fa1f fb87 	uxth.w	fp, r7
 800853a:	b29b      	uxth	r3, r3
 800853c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008540:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008544:	f8d9 7000 	ldr.w	r7, [r9]
 8008548:	4463      	add	r3, ip
 800854a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800854e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008552:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008556:	b29b      	uxth	r3, r3
 8008558:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800855c:	4572      	cmp	r2, lr
 800855e:	f849 3b04 	str.w	r3, [r9], #4
 8008562:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008566:	d8e2      	bhi.n	800852e <__multiply+0xb2>
 8008568:	9b01      	ldr	r3, [sp, #4]
 800856a:	f845 c003 	str.w	ip, [r5, r3]
 800856e:	9b03      	ldr	r3, [sp, #12]
 8008570:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008574:	3104      	adds	r1, #4
 8008576:	f1b9 0f00 	cmp.w	r9, #0
 800857a:	d021      	beq.n	80085c0 <__multiply+0x144>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	f104 0c14 	add.w	ip, r4, #20
 8008582:	46ae      	mov	lr, r5
 8008584:	f04f 0a00 	mov.w	sl, #0
 8008588:	f8bc b000 	ldrh.w	fp, [ip]
 800858c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008590:	fb09 770b 	mla	r7, r9, fp, r7
 8008594:	4457      	add	r7, sl
 8008596:	b29b      	uxth	r3, r3
 8008598:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800859c:	f84e 3b04 	str.w	r3, [lr], #4
 80085a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085a8:	f8be 3000 	ldrh.w	r3, [lr]
 80085ac:	fb09 330a 	mla	r3, r9, sl, r3
 80085b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80085b4:	4562      	cmp	r2, ip
 80085b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085ba:	d8e5      	bhi.n	8008588 <__multiply+0x10c>
 80085bc:	9f01      	ldr	r7, [sp, #4]
 80085be:	51eb      	str	r3, [r5, r7]
 80085c0:	3504      	adds	r5, #4
 80085c2:	e799      	b.n	80084f8 <__multiply+0x7c>
 80085c4:	3e01      	subs	r6, #1
 80085c6:	e79b      	b.n	8008500 <__multiply+0x84>
 80085c8:	0800961c 	.word	0x0800961c
 80085cc:	0800962d 	.word	0x0800962d

080085d0 <__pow5mult>:
 80085d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d4:	4615      	mov	r5, r2
 80085d6:	f012 0203 	ands.w	r2, r2, #3
 80085da:	4607      	mov	r7, r0
 80085dc:	460e      	mov	r6, r1
 80085de:	d007      	beq.n	80085f0 <__pow5mult+0x20>
 80085e0:	4c25      	ldr	r4, [pc, #148]	@ (8008678 <__pow5mult+0xa8>)
 80085e2:	3a01      	subs	r2, #1
 80085e4:	2300      	movs	r3, #0
 80085e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085ea:	f7ff fe9f 	bl	800832c <__multadd>
 80085ee:	4606      	mov	r6, r0
 80085f0:	10ad      	asrs	r5, r5, #2
 80085f2:	d03d      	beq.n	8008670 <__pow5mult+0xa0>
 80085f4:	69fc      	ldr	r4, [r7, #28]
 80085f6:	b97c      	cbnz	r4, 8008618 <__pow5mult+0x48>
 80085f8:	2010      	movs	r0, #16
 80085fa:	f7ff fd7f 	bl	80080fc <malloc>
 80085fe:	4602      	mov	r2, r0
 8008600:	61f8      	str	r0, [r7, #28]
 8008602:	b928      	cbnz	r0, 8008610 <__pow5mult+0x40>
 8008604:	4b1d      	ldr	r3, [pc, #116]	@ (800867c <__pow5mult+0xac>)
 8008606:	481e      	ldr	r0, [pc, #120]	@ (8008680 <__pow5mult+0xb0>)
 8008608:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800860c:	f000 fbea 	bl	8008de4 <__assert_func>
 8008610:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008614:	6004      	str	r4, [r0, #0]
 8008616:	60c4      	str	r4, [r0, #12]
 8008618:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800861c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008620:	b94c      	cbnz	r4, 8008636 <__pow5mult+0x66>
 8008622:	f240 2171 	movw	r1, #625	@ 0x271
 8008626:	4638      	mov	r0, r7
 8008628:	f7ff ff12 	bl	8008450 <__i2b>
 800862c:	2300      	movs	r3, #0
 800862e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008632:	4604      	mov	r4, r0
 8008634:	6003      	str	r3, [r0, #0]
 8008636:	f04f 0900 	mov.w	r9, #0
 800863a:	07eb      	lsls	r3, r5, #31
 800863c:	d50a      	bpl.n	8008654 <__pow5mult+0x84>
 800863e:	4631      	mov	r1, r6
 8008640:	4622      	mov	r2, r4
 8008642:	4638      	mov	r0, r7
 8008644:	f7ff ff1a 	bl	800847c <__multiply>
 8008648:	4631      	mov	r1, r6
 800864a:	4680      	mov	r8, r0
 800864c:	4638      	mov	r0, r7
 800864e:	f7ff fe4b 	bl	80082e8 <_Bfree>
 8008652:	4646      	mov	r6, r8
 8008654:	106d      	asrs	r5, r5, #1
 8008656:	d00b      	beq.n	8008670 <__pow5mult+0xa0>
 8008658:	6820      	ldr	r0, [r4, #0]
 800865a:	b938      	cbnz	r0, 800866c <__pow5mult+0x9c>
 800865c:	4622      	mov	r2, r4
 800865e:	4621      	mov	r1, r4
 8008660:	4638      	mov	r0, r7
 8008662:	f7ff ff0b 	bl	800847c <__multiply>
 8008666:	6020      	str	r0, [r4, #0]
 8008668:	f8c0 9000 	str.w	r9, [r0]
 800866c:	4604      	mov	r4, r0
 800866e:	e7e4      	b.n	800863a <__pow5mult+0x6a>
 8008670:	4630      	mov	r0, r6
 8008672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008676:	bf00      	nop
 8008678:	08009688 	.word	0x08009688
 800867c:	080095ad 	.word	0x080095ad
 8008680:	0800962d 	.word	0x0800962d

08008684 <__lshift>:
 8008684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008688:	460c      	mov	r4, r1
 800868a:	6849      	ldr	r1, [r1, #4]
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008692:	68a3      	ldr	r3, [r4, #8]
 8008694:	4607      	mov	r7, r0
 8008696:	4691      	mov	r9, r2
 8008698:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800869c:	f108 0601 	add.w	r6, r8, #1
 80086a0:	42b3      	cmp	r3, r6
 80086a2:	db0b      	blt.n	80086bc <__lshift+0x38>
 80086a4:	4638      	mov	r0, r7
 80086a6:	f7ff fddf 	bl	8008268 <_Balloc>
 80086aa:	4605      	mov	r5, r0
 80086ac:	b948      	cbnz	r0, 80086c2 <__lshift+0x3e>
 80086ae:	4602      	mov	r2, r0
 80086b0:	4b28      	ldr	r3, [pc, #160]	@ (8008754 <__lshift+0xd0>)
 80086b2:	4829      	ldr	r0, [pc, #164]	@ (8008758 <__lshift+0xd4>)
 80086b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80086b8:	f000 fb94 	bl	8008de4 <__assert_func>
 80086bc:	3101      	adds	r1, #1
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	e7ee      	b.n	80086a0 <__lshift+0x1c>
 80086c2:	2300      	movs	r3, #0
 80086c4:	f100 0114 	add.w	r1, r0, #20
 80086c8:	f100 0210 	add.w	r2, r0, #16
 80086cc:	4618      	mov	r0, r3
 80086ce:	4553      	cmp	r3, sl
 80086d0:	db33      	blt.n	800873a <__lshift+0xb6>
 80086d2:	6920      	ldr	r0, [r4, #16]
 80086d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086d8:	f104 0314 	add.w	r3, r4, #20
 80086dc:	f019 091f 	ands.w	r9, r9, #31
 80086e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086e8:	d02b      	beq.n	8008742 <__lshift+0xbe>
 80086ea:	f1c9 0e20 	rsb	lr, r9, #32
 80086ee:	468a      	mov	sl, r1
 80086f0:	2200      	movs	r2, #0
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	fa00 f009 	lsl.w	r0, r0, r9
 80086f8:	4310      	orrs	r0, r2
 80086fa:	f84a 0b04 	str.w	r0, [sl], #4
 80086fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008702:	459c      	cmp	ip, r3
 8008704:	fa22 f20e 	lsr.w	r2, r2, lr
 8008708:	d8f3      	bhi.n	80086f2 <__lshift+0x6e>
 800870a:	ebac 0304 	sub.w	r3, ip, r4
 800870e:	3b15      	subs	r3, #21
 8008710:	f023 0303 	bic.w	r3, r3, #3
 8008714:	3304      	adds	r3, #4
 8008716:	f104 0015 	add.w	r0, r4, #21
 800871a:	4584      	cmp	ip, r0
 800871c:	bf38      	it	cc
 800871e:	2304      	movcc	r3, #4
 8008720:	50ca      	str	r2, [r1, r3]
 8008722:	b10a      	cbz	r2, 8008728 <__lshift+0xa4>
 8008724:	f108 0602 	add.w	r6, r8, #2
 8008728:	3e01      	subs	r6, #1
 800872a:	4638      	mov	r0, r7
 800872c:	612e      	str	r6, [r5, #16]
 800872e:	4621      	mov	r1, r4
 8008730:	f7ff fdda 	bl	80082e8 <_Bfree>
 8008734:	4628      	mov	r0, r5
 8008736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873a:	f842 0f04 	str.w	r0, [r2, #4]!
 800873e:	3301      	adds	r3, #1
 8008740:	e7c5      	b.n	80086ce <__lshift+0x4a>
 8008742:	3904      	subs	r1, #4
 8008744:	f853 2b04 	ldr.w	r2, [r3], #4
 8008748:	f841 2f04 	str.w	r2, [r1, #4]!
 800874c:	459c      	cmp	ip, r3
 800874e:	d8f9      	bhi.n	8008744 <__lshift+0xc0>
 8008750:	e7ea      	b.n	8008728 <__lshift+0xa4>
 8008752:	bf00      	nop
 8008754:	0800961c 	.word	0x0800961c
 8008758:	0800962d 	.word	0x0800962d

0800875c <__mcmp>:
 800875c:	690a      	ldr	r2, [r1, #16]
 800875e:	4603      	mov	r3, r0
 8008760:	6900      	ldr	r0, [r0, #16]
 8008762:	1a80      	subs	r0, r0, r2
 8008764:	b530      	push	{r4, r5, lr}
 8008766:	d10e      	bne.n	8008786 <__mcmp+0x2a>
 8008768:	3314      	adds	r3, #20
 800876a:	3114      	adds	r1, #20
 800876c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008770:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008774:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008778:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800877c:	4295      	cmp	r5, r2
 800877e:	d003      	beq.n	8008788 <__mcmp+0x2c>
 8008780:	d205      	bcs.n	800878e <__mcmp+0x32>
 8008782:	f04f 30ff 	mov.w	r0, #4294967295
 8008786:	bd30      	pop	{r4, r5, pc}
 8008788:	42a3      	cmp	r3, r4
 800878a:	d3f3      	bcc.n	8008774 <__mcmp+0x18>
 800878c:	e7fb      	b.n	8008786 <__mcmp+0x2a>
 800878e:	2001      	movs	r0, #1
 8008790:	e7f9      	b.n	8008786 <__mcmp+0x2a>
	...

08008794 <__mdiff>:
 8008794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008798:	4689      	mov	r9, r1
 800879a:	4606      	mov	r6, r0
 800879c:	4611      	mov	r1, r2
 800879e:	4648      	mov	r0, r9
 80087a0:	4614      	mov	r4, r2
 80087a2:	f7ff ffdb 	bl	800875c <__mcmp>
 80087a6:	1e05      	subs	r5, r0, #0
 80087a8:	d112      	bne.n	80087d0 <__mdiff+0x3c>
 80087aa:	4629      	mov	r1, r5
 80087ac:	4630      	mov	r0, r6
 80087ae:	f7ff fd5b 	bl	8008268 <_Balloc>
 80087b2:	4602      	mov	r2, r0
 80087b4:	b928      	cbnz	r0, 80087c2 <__mdiff+0x2e>
 80087b6:	4b3f      	ldr	r3, [pc, #252]	@ (80088b4 <__mdiff+0x120>)
 80087b8:	f240 2137 	movw	r1, #567	@ 0x237
 80087bc:	483e      	ldr	r0, [pc, #248]	@ (80088b8 <__mdiff+0x124>)
 80087be:	f000 fb11 	bl	8008de4 <__assert_func>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80087c8:	4610      	mov	r0, r2
 80087ca:	b003      	add	sp, #12
 80087cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d0:	bfbc      	itt	lt
 80087d2:	464b      	movlt	r3, r9
 80087d4:	46a1      	movlt	r9, r4
 80087d6:	4630      	mov	r0, r6
 80087d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80087dc:	bfba      	itte	lt
 80087de:	461c      	movlt	r4, r3
 80087e0:	2501      	movlt	r5, #1
 80087e2:	2500      	movge	r5, #0
 80087e4:	f7ff fd40 	bl	8008268 <_Balloc>
 80087e8:	4602      	mov	r2, r0
 80087ea:	b918      	cbnz	r0, 80087f4 <__mdiff+0x60>
 80087ec:	4b31      	ldr	r3, [pc, #196]	@ (80088b4 <__mdiff+0x120>)
 80087ee:	f240 2145 	movw	r1, #581	@ 0x245
 80087f2:	e7e3      	b.n	80087bc <__mdiff+0x28>
 80087f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80087f8:	6926      	ldr	r6, [r4, #16]
 80087fa:	60c5      	str	r5, [r0, #12]
 80087fc:	f109 0310 	add.w	r3, r9, #16
 8008800:	f109 0514 	add.w	r5, r9, #20
 8008804:	f104 0e14 	add.w	lr, r4, #20
 8008808:	f100 0b14 	add.w	fp, r0, #20
 800880c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008810:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	46d9      	mov	r9, fp
 8008818:	f04f 0c00 	mov.w	ip, #0
 800881c:	9b01      	ldr	r3, [sp, #4]
 800881e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008822:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008826:	9301      	str	r3, [sp, #4]
 8008828:	fa1f f38a 	uxth.w	r3, sl
 800882c:	4619      	mov	r1, r3
 800882e:	b283      	uxth	r3, r0
 8008830:	1acb      	subs	r3, r1, r3
 8008832:	0c00      	lsrs	r0, r0, #16
 8008834:	4463      	add	r3, ip
 8008836:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800883a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800883e:	b29b      	uxth	r3, r3
 8008840:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008844:	4576      	cmp	r6, lr
 8008846:	f849 3b04 	str.w	r3, [r9], #4
 800884a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800884e:	d8e5      	bhi.n	800881c <__mdiff+0x88>
 8008850:	1b33      	subs	r3, r6, r4
 8008852:	3b15      	subs	r3, #21
 8008854:	f023 0303 	bic.w	r3, r3, #3
 8008858:	3415      	adds	r4, #21
 800885a:	3304      	adds	r3, #4
 800885c:	42a6      	cmp	r6, r4
 800885e:	bf38      	it	cc
 8008860:	2304      	movcc	r3, #4
 8008862:	441d      	add	r5, r3
 8008864:	445b      	add	r3, fp
 8008866:	461e      	mov	r6, r3
 8008868:	462c      	mov	r4, r5
 800886a:	4544      	cmp	r4, r8
 800886c:	d30e      	bcc.n	800888c <__mdiff+0xf8>
 800886e:	f108 0103 	add.w	r1, r8, #3
 8008872:	1b49      	subs	r1, r1, r5
 8008874:	f021 0103 	bic.w	r1, r1, #3
 8008878:	3d03      	subs	r5, #3
 800887a:	45a8      	cmp	r8, r5
 800887c:	bf38      	it	cc
 800887e:	2100      	movcc	r1, #0
 8008880:	440b      	add	r3, r1
 8008882:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008886:	b191      	cbz	r1, 80088ae <__mdiff+0x11a>
 8008888:	6117      	str	r7, [r2, #16]
 800888a:	e79d      	b.n	80087c8 <__mdiff+0x34>
 800888c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008890:	46e6      	mov	lr, ip
 8008892:	0c08      	lsrs	r0, r1, #16
 8008894:	fa1c fc81 	uxtah	ip, ip, r1
 8008898:	4471      	add	r1, lr
 800889a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800889e:	b289      	uxth	r1, r1
 80088a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80088a4:	f846 1b04 	str.w	r1, [r6], #4
 80088a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088ac:	e7dd      	b.n	800886a <__mdiff+0xd6>
 80088ae:	3f01      	subs	r7, #1
 80088b0:	e7e7      	b.n	8008882 <__mdiff+0xee>
 80088b2:	bf00      	nop
 80088b4:	0800961c 	.word	0x0800961c
 80088b8:	0800962d 	.word	0x0800962d

080088bc <__d2b>:
 80088bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088c0:	460f      	mov	r7, r1
 80088c2:	2101      	movs	r1, #1
 80088c4:	ec59 8b10 	vmov	r8, r9, d0
 80088c8:	4616      	mov	r6, r2
 80088ca:	f7ff fccd 	bl	8008268 <_Balloc>
 80088ce:	4604      	mov	r4, r0
 80088d0:	b930      	cbnz	r0, 80088e0 <__d2b+0x24>
 80088d2:	4602      	mov	r2, r0
 80088d4:	4b23      	ldr	r3, [pc, #140]	@ (8008964 <__d2b+0xa8>)
 80088d6:	4824      	ldr	r0, [pc, #144]	@ (8008968 <__d2b+0xac>)
 80088d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80088dc:	f000 fa82 	bl	8008de4 <__assert_func>
 80088e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80088e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088e8:	b10d      	cbz	r5, 80088ee <__d2b+0x32>
 80088ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088ee:	9301      	str	r3, [sp, #4]
 80088f0:	f1b8 0300 	subs.w	r3, r8, #0
 80088f4:	d023      	beq.n	800893e <__d2b+0x82>
 80088f6:	4668      	mov	r0, sp
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	f7ff fd7c 	bl	80083f6 <__lo0bits>
 80088fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008902:	b1d0      	cbz	r0, 800893a <__d2b+0x7e>
 8008904:	f1c0 0320 	rsb	r3, r0, #32
 8008908:	fa02 f303 	lsl.w	r3, r2, r3
 800890c:	430b      	orrs	r3, r1
 800890e:	40c2      	lsrs	r2, r0
 8008910:	6163      	str	r3, [r4, #20]
 8008912:	9201      	str	r2, [sp, #4]
 8008914:	9b01      	ldr	r3, [sp, #4]
 8008916:	61a3      	str	r3, [r4, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	bf0c      	ite	eq
 800891c:	2201      	moveq	r2, #1
 800891e:	2202      	movne	r2, #2
 8008920:	6122      	str	r2, [r4, #16]
 8008922:	b1a5      	cbz	r5, 800894e <__d2b+0x92>
 8008924:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008928:	4405      	add	r5, r0
 800892a:	603d      	str	r5, [r7, #0]
 800892c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008930:	6030      	str	r0, [r6, #0]
 8008932:	4620      	mov	r0, r4
 8008934:	b003      	add	sp, #12
 8008936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800893a:	6161      	str	r1, [r4, #20]
 800893c:	e7ea      	b.n	8008914 <__d2b+0x58>
 800893e:	a801      	add	r0, sp, #4
 8008940:	f7ff fd59 	bl	80083f6 <__lo0bits>
 8008944:	9b01      	ldr	r3, [sp, #4]
 8008946:	6163      	str	r3, [r4, #20]
 8008948:	3020      	adds	r0, #32
 800894a:	2201      	movs	r2, #1
 800894c:	e7e8      	b.n	8008920 <__d2b+0x64>
 800894e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008952:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008956:	6038      	str	r0, [r7, #0]
 8008958:	6918      	ldr	r0, [r3, #16]
 800895a:	f7ff fd2d 	bl	80083b8 <__hi0bits>
 800895e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008962:	e7e5      	b.n	8008930 <__d2b+0x74>
 8008964:	0800961c 	.word	0x0800961c
 8008968:	0800962d 	.word	0x0800962d

0800896c <__ssputs_r>:
 800896c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008970:	688e      	ldr	r6, [r1, #8]
 8008972:	461f      	mov	r7, r3
 8008974:	42be      	cmp	r6, r7
 8008976:	680b      	ldr	r3, [r1, #0]
 8008978:	4682      	mov	sl, r0
 800897a:	460c      	mov	r4, r1
 800897c:	4690      	mov	r8, r2
 800897e:	d82d      	bhi.n	80089dc <__ssputs_r+0x70>
 8008980:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008984:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008988:	d026      	beq.n	80089d8 <__ssputs_r+0x6c>
 800898a:	6965      	ldr	r5, [r4, #20]
 800898c:	6909      	ldr	r1, [r1, #16]
 800898e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008992:	eba3 0901 	sub.w	r9, r3, r1
 8008996:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800899a:	1c7b      	adds	r3, r7, #1
 800899c:	444b      	add	r3, r9
 800899e:	106d      	asrs	r5, r5, #1
 80089a0:	429d      	cmp	r5, r3
 80089a2:	bf38      	it	cc
 80089a4:	461d      	movcc	r5, r3
 80089a6:	0553      	lsls	r3, r2, #21
 80089a8:	d527      	bpl.n	80089fa <__ssputs_r+0x8e>
 80089aa:	4629      	mov	r1, r5
 80089ac:	f7ff fbd0 	bl	8008150 <_malloc_r>
 80089b0:	4606      	mov	r6, r0
 80089b2:	b360      	cbz	r0, 8008a0e <__ssputs_r+0xa2>
 80089b4:	6921      	ldr	r1, [r4, #16]
 80089b6:	464a      	mov	r2, r9
 80089b8:	f000 fa06 	bl	8008dc8 <memcpy>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	6126      	str	r6, [r4, #16]
 80089ca:	6165      	str	r5, [r4, #20]
 80089cc:	444e      	add	r6, r9
 80089ce:	eba5 0509 	sub.w	r5, r5, r9
 80089d2:	6026      	str	r6, [r4, #0]
 80089d4:	60a5      	str	r5, [r4, #8]
 80089d6:	463e      	mov	r6, r7
 80089d8:	42be      	cmp	r6, r7
 80089da:	d900      	bls.n	80089de <__ssputs_r+0x72>
 80089dc:	463e      	mov	r6, r7
 80089de:	6820      	ldr	r0, [r4, #0]
 80089e0:	4632      	mov	r2, r6
 80089e2:	4641      	mov	r1, r8
 80089e4:	f000 f9c6 	bl	8008d74 <memmove>
 80089e8:	68a3      	ldr	r3, [r4, #8]
 80089ea:	1b9b      	subs	r3, r3, r6
 80089ec:	60a3      	str	r3, [r4, #8]
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	4433      	add	r3, r6
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	2000      	movs	r0, #0
 80089f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fa:	462a      	mov	r2, r5
 80089fc:	f000 fa36 	bl	8008e6c <_realloc_r>
 8008a00:	4606      	mov	r6, r0
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d1e0      	bne.n	80089c8 <__ssputs_r+0x5c>
 8008a06:	6921      	ldr	r1, [r4, #16]
 8008a08:	4650      	mov	r0, sl
 8008a0a:	f7ff fb2d 	bl	8008068 <_free_r>
 8008a0e:	230c      	movs	r3, #12
 8008a10:	f8ca 3000 	str.w	r3, [sl]
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a1a:	81a3      	strh	r3, [r4, #12]
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	e7e9      	b.n	80089f6 <__ssputs_r+0x8a>
	...

08008a24 <_svfiprintf_r>:
 8008a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a28:	4698      	mov	r8, r3
 8008a2a:	898b      	ldrh	r3, [r1, #12]
 8008a2c:	061b      	lsls	r3, r3, #24
 8008a2e:	b09d      	sub	sp, #116	@ 0x74
 8008a30:	4607      	mov	r7, r0
 8008a32:	460d      	mov	r5, r1
 8008a34:	4614      	mov	r4, r2
 8008a36:	d510      	bpl.n	8008a5a <_svfiprintf_r+0x36>
 8008a38:	690b      	ldr	r3, [r1, #16]
 8008a3a:	b973      	cbnz	r3, 8008a5a <_svfiprintf_r+0x36>
 8008a3c:	2140      	movs	r1, #64	@ 0x40
 8008a3e:	f7ff fb87 	bl	8008150 <_malloc_r>
 8008a42:	6028      	str	r0, [r5, #0]
 8008a44:	6128      	str	r0, [r5, #16]
 8008a46:	b930      	cbnz	r0, 8008a56 <_svfiprintf_r+0x32>
 8008a48:	230c      	movs	r3, #12
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	b01d      	add	sp, #116	@ 0x74
 8008a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a56:	2340      	movs	r3, #64	@ 0x40
 8008a58:	616b      	str	r3, [r5, #20]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a5e:	2320      	movs	r3, #32
 8008a60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a68:	2330      	movs	r3, #48	@ 0x30
 8008a6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c08 <_svfiprintf_r+0x1e4>
 8008a6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a72:	f04f 0901 	mov.w	r9, #1
 8008a76:	4623      	mov	r3, r4
 8008a78:	469a      	mov	sl, r3
 8008a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a7e:	b10a      	cbz	r2, 8008a84 <_svfiprintf_r+0x60>
 8008a80:	2a25      	cmp	r2, #37	@ 0x25
 8008a82:	d1f9      	bne.n	8008a78 <_svfiprintf_r+0x54>
 8008a84:	ebba 0b04 	subs.w	fp, sl, r4
 8008a88:	d00b      	beq.n	8008aa2 <_svfiprintf_r+0x7e>
 8008a8a:	465b      	mov	r3, fp
 8008a8c:	4622      	mov	r2, r4
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4638      	mov	r0, r7
 8008a92:	f7ff ff6b 	bl	800896c <__ssputs_r>
 8008a96:	3001      	adds	r0, #1
 8008a98:	f000 80a7 	beq.w	8008bea <_svfiprintf_r+0x1c6>
 8008a9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a9e:	445a      	add	r2, fp
 8008aa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 809f 	beq.w	8008bea <_svfiprintf_r+0x1c6>
 8008aac:	2300      	movs	r3, #0
 8008aae:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab6:	f10a 0a01 	add.w	sl, sl, #1
 8008aba:	9304      	str	r3, [sp, #16]
 8008abc:	9307      	str	r3, [sp, #28]
 8008abe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ac2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ac4:	4654      	mov	r4, sl
 8008ac6:	2205      	movs	r2, #5
 8008ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008acc:	484e      	ldr	r0, [pc, #312]	@ (8008c08 <_svfiprintf_r+0x1e4>)
 8008ace:	f7f7 fb9f 	bl	8000210 <memchr>
 8008ad2:	9a04      	ldr	r2, [sp, #16]
 8008ad4:	b9d8      	cbnz	r0, 8008b0e <_svfiprintf_r+0xea>
 8008ad6:	06d0      	lsls	r0, r2, #27
 8008ad8:	bf44      	itt	mi
 8008ada:	2320      	movmi	r3, #32
 8008adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ae0:	0711      	lsls	r1, r2, #28
 8008ae2:	bf44      	itt	mi
 8008ae4:	232b      	movmi	r3, #43	@ 0x2b
 8008ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008aea:	f89a 3000 	ldrb.w	r3, [sl]
 8008aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af0:	d015      	beq.n	8008b1e <_svfiprintf_r+0xfa>
 8008af2:	9a07      	ldr	r2, [sp, #28]
 8008af4:	4654      	mov	r4, sl
 8008af6:	2000      	movs	r0, #0
 8008af8:	f04f 0c0a 	mov.w	ip, #10
 8008afc:	4621      	mov	r1, r4
 8008afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b02:	3b30      	subs	r3, #48	@ 0x30
 8008b04:	2b09      	cmp	r3, #9
 8008b06:	d94b      	bls.n	8008ba0 <_svfiprintf_r+0x17c>
 8008b08:	b1b0      	cbz	r0, 8008b38 <_svfiprintf_r+0x114>
 8008b0a:	9207      	str	r2, [sp, #28]
 8008b0c:	e014      	b.n	8008b38 <_svfiprintf_r+0x114>
 8008b0e:	eba0 0308 	sub.w	r3, r0, r8
 8008b12:	fa09 f303 	lsl.w	r3, r9, r3
 8008b16:	4313      	orrs	r3, r2
 8008b18:	9304      	str	r3, [sp, #16]
 8008b1a:	46a2      	mov	sl, r4
 8008b1c:	e7d2      	b.n	8008ac4 <_svfiprintf_r+0xa0>
 8008b1e:	9b03      	ldr	r3, [sp, #12]
 8008b20:	1d19      	adds	r1, r3, #4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	9103      	str	r1, [sp, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bfbb      	ittet	lt
 8008b2a:	425b      	neglt	r3, r3
 8008b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b30:	9307      	strge	r3, [sp, #28]
 8008b32:	9307      	strlt	r3, [sp, #28]
 8008b34:	bfb8      	it	lt
 8008b36:	9204      	strlt	r2, [sp, #16]
 8008b38:	7823      	ldrb	r3, [r4, #0]
 8008b3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b3c:	d10a      	bne.n	8008b54 <_svfiprintf_r+0x130>
 8008b3e:	7863      	ldrb	r3, [r4, #1]
 8008b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b42:	d132      	bne.n	8008baa <_svfiprintf_r+0x186>
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	1d1a      	adds	r2, r3, #4
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	9203      	str	r2, [sp, #12]
 8008b4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b50:	3402      	adds	r4, #2
 8008b52:	9305      	str	r3, [sp, #20]
 8008b54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c18 <_svfiprintf_r+0x1f4>
 8008b58:	7821      	ldrb	r1, [r4, #0]
 8008b5a:	2203      	movs	r2, #3
 8008b5c:	4650      	mov	r0, sl
 8008b5e:	f7f7 fb57 	bl	8000210 <memchr>
 8008b62:	b138      	cbz	r0, 8008b74 <_svfiprintf_r+0x150>
 8008b64:	9b04      	ldr	r3, [sp, #16]
 8008b66:	eba0 000a 	sub.w	r0, r0, sl
 8008b6a:	2240      	movs	r2, #64	@ 0x40
 8008b6c:	4082      	lsls	r2, r0
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	3401      	adds	r4, #1
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b78:	4824      	ldr	r0, [pc, #144]	@ (8008c0c <_svfiprintf_r+0x1e8>)
 8008b7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b7e:	2206      	movs	r2, #6
 8008b80:	f7f7 fb46 	bl	8000210 <memchr>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d036      	beq.n	8008bf6 <_svfiprintf_r+0x1d2>
 8008b88:	4b21      	ldr	r3, [pc, #132]	@ (8008c10 <_svfiprintf_r+0x1ec>)
 8008b8a:	bb1b      	cbnz	r3, 8008bd4 <_svfiprintf_r+0x1b0>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	3307      	adds	r3, #7
 8008b90:	f023 0307 	bic.w	r3, r3, #7
 8008b94:	3308      	adds	r3, #8
 8008b96:	9303      	str	r3, [sp, #12]
 8008b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b9a:	4433      	add	r3, r6
 8008b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b9e:	e76a      	b.n	8008a76 <_svfiprintf_r+0x52>
 8008ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	e7a8      	b.n	8008afc <_svfiprintf_r+0xd8>
 8008baa:	2300      	movs	r3, #0
 8008bac:	3401      	adds	r4, #1
 8008bae:	9305      	str	r3, [sp, #20]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	f04f 0c0a 	mov.w	ip, #10
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bbc:	3a30      	subs	r2, #48	@ 0x30
 8008bbe:	2a09      	cmp	r2, #9
 8008bc0:	d903      	bls.n	8008bca <_svfiprintf_r+0x1a6>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0c6      	beq.n	8008b54 <_svfiprintf_r+0x130>
 8008bc6:	9105      	str	r1, [sp, #20]
 8008bc8:	e7c4      	b.n	8008b54 <_svfiprintf_r+0x130>
 8008bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bce:	4604      	mov	r4, r0
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e7f0      	b.n	8008bb6 <_svfiprintf_r+0x192>
 8008bd4:	ab03      	add	r3, sp, #12
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	462a      	mov	r2, r5
 8008bda:	4b0e      	ldr	r3, [pc, #56]	@ (8008c14 <_svfiprintf_r+0x1f0>)
 8008bdc:	a904      	add	r1, sp, #16
 8008bde:	4638      	mov	r0, r7
 8008be0:	f7fd fe98 	bl	8006914 <_printf_float>
 8008be4:	1c42      	adds	r2, r0, #1
 8008be6:	4606      	mov	r6, r0
 8008be8:	d1d6      	bne.n	8008b98 <_svfiprintf_r+0x174>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	065b      	lsls	r3, r3, #25
 8008bee:	f53f af2d 	bmi.w	8008a4c <_svfiprintf_r+0x28>
 8008bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bf4:	e72c      	b.n	8008a50 <_svfiprintf_r+0x2c>
 8008bf6:	ab03      	add	r3, sp, #12
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	462a      	mov	r2, r5
 8008bfc:	4b05      	ldr	r3, [pc, #20]	@ (8008c14 <_svfiprintf_r+0x1f0>)
 8008bfe:	a904      	add	r1, sp, #16
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7fe f91f 	bl	8006e44 <_printf_i>
 8008c06:	e7ed      	b.n	8008be4 <_svfiprintf_r+0x1c0>
 8008c08:	08009788 	.word	0x08009788
 8008c0c:	08009792 	.word	0x08009792
 8008c10:	08006915 	.word	0x08006915
 8008c14:	0800896d 	.word	0x0800896d
 8008c18:	0800978e 	.word	0x0800978e

08008c1c <__sflush_r>:
 8008c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c24:	0716      	lsls	r6, r2, #28
 8008c26:	4605      	mov	r5, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	d454      	bmi.n	8008cd6 <__sflush_r+0xba>
 8008c2c:	684b      	ldr	r3, [r1, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dc02      	bgt.n	8008c38 <__sflush_r+0x1c>
 8008c32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dd48      	ble.n	8008cca <__sflush_r+0xae>
 8008c38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c3a:	2e00      	cmp	r6, #0
 8008c3c:	d045      	beq.n	8008cca <__sflush_r+0xae>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c44:	682f      	ldr	r7, [r5, #0]
 8008c46:	6a21      	ldr	r1, [r4, #32]
 8008c48:	602b      	str	r3, [r5, #0]
 8008c4a:	d030      	beq.n	8008cae <__sflush_r+0x92>
 8008c4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	0759      	lsls	r1, r3, #29
 8008c52:	d505      	bpl.n	8008c60 <__sflush_r+0x44>
 8008c54:	6863      	ldr	r3, [r4, #4]
 8008c56:	1ad2      	subs	r2, r2, r3
 8008c58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c5a:	b10b      	cbz	r3, 8008c60 <__sflush_r+0x44>
 8008c5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	2300      	movs	r3, #0
 8008c62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c64:	6a21      	ldr	r1, [r4, #32]
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b0      	blx	r6
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	d106      	bne.n	8008c7e <__sflush_r+0x62>
 8008c70:	6829      	ldr	r1, [r5, #0]
 8008c72:	291d      	cmp	r1, #29
 8008c74:	d82b      	bhi.n	8008cce <__sflush_r+0xb2>
 8008c76:	4a2a      	ldr	r2, [pc, #168]	@ (8008d20 <__sflush_r+0x104>)
 8008c78:	410a      	asrs	r2, r1
 8008c7a:	07d6      	lsls	r6, r2, #31
 8008c7c:	d427      	bmi.n	8008cce <__sflush_r+0xb2>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	6062      	str	r2, [r4, #4]
 8008c82:	04d9      	lsls	r1, r3, #19
 8008c84:	6922      	ldr	r2, [r4, #16]
 8008c86:	6022      	str	r2, [r4, #0]
 8008c88:	d504      	bpl.n	8008c94 <__sflush_r+0x78>
 8008c8a:	1c42      	adds	r2, r0, #1
 8008c8c:	d101      	bne.n	8008c92 <__sflush_r+0x76>
 8008c8e:	682b      	ldr	r3, [r5, #0]
 8008c90:	b903      	cbnz	r3, 8008c94 <__sflush_r+0x78>
 8008c92:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c96:	602f      	str	r7, [r5, #0]
 8008c98:	b1b9      	cbz	r1, 8008cca <__sflush_r+0xae>
 8008c9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c9e:	4299      	cmp	r1, r3
 8008ca0:	d002      	beq.n	8008ca8 <__sflush_r+0x8c>
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f7ff f9e0 	bl	8008068 <_free_r>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cac:	e00d      	b.n	8008cca <__sflush_r+0xae>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	47b0      	blx	r6
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	1c50      	adds	r0, r2, #1
 8008cb8:	d1c9      	bne.n	8008c4e <__sflush_r+0x32>
 8008cba:	682b      	ldr	r3, [r5, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0c6      	beq.n	8008c4e <__sflush_r+0x32>
 8008cc0:	2b1d      	cmp	r3, #29
 8008cc2:	d001      	beq.n	8008cc8 <__sflush_r+0xac>
 8008cc4:	2b16      	cmp	r3, #22
 8008cc6:	d11e      	bne.n	8008d06 <__sflush_r+0xea>
 8008cc8:	602f      	str	r7, [r5, #0]
 8008cca:	2000      	movs	r0, #0
 8008ccc:	e022      	b.n	8008d14 <__sflush_r+0xf8>
 8008cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cd2:	b21b      	sxth	r3, r3
 8008cd4:	e01b      	b.n	8008d0e <__sflush_r+0xf2>
 8008cd6:	690f      	ldr	r7, [r1, #16]
 8008cd8:	2f00      	cmp	r7, #0
 8008cda:	d0f6      	beq.n	8008cca <__sflush_r+0xae>
 8008cdc:	0793      	lsls	r3, r2, #30
 8008cde:	680e      	ldr	r6, [r1, #0]
 8008ce0:	bf08      	it	eq
 8008ce2:	694b      	ldreq	r3, [r1, #20]
 8008ce4:	600f      	str	r7, [r1, #0]
 8008ce6:	bf18      	it	ne
 8008ce8:	2300      	movne	r3, #0
 8008cea:	eba6 0807 	sub.w	r8, r6, r7
 8008cee:	608b      	str	r3, [r1, #8]
 8008cf0:	f1b8 0f00 	cmp.w	r8, #0
 8008cf4:	dde9      	ble.n	8008cca <__sflush_r+0xae>
 8008cf6:	6a21      	ldr	r1, [r4, #32]
 8008cf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cfa:	4643      	mov	r3, r8
 8008cfc:	463a      	mov	r2, r7
 8008cfe:	4628      	mov	r0, r5
 8008d00:	47b0      	blx	r6
 8008d02:	2800      	cmp	r0, #0
 8008d04:	dc08      	bgt.n	8008d18 <__sflush_r+0xfc>
 8008d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295
 8008d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d18:	4407      	add	r7, r0
 8008d1a:	eba8 0800 	sub.w	r8, r8, r0
 8008d1e:	e7e7      	b.n	8008cf0 <__sflush_r+0xd4>
 8008d20:	dfbffffe 	.word	0xdfbffffe

08008d24 <_fflush_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	690b      	ldr	r3, [r1, #16]
 8008d28:	4605      	mov	r5, r0
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	b913      	cbnz	r3, 8008d34 <_fflush_r+0x10>
 8008d2e:	2500      	movs	r5, #0
 8008d30:	4628      	mov	r0, r5
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	b118      	cbz	r0, 8008d3e <_fflush_r+0x1a>
 8008d36:	6a03      	ldr	r3, [r0, #32]
 8008d38:	b90b      	cbnz	r3, 8008d3e <_fflush_r+0x1a>
 8008d3a:	f7fe fa2f 	bl	800719c <__sinit>
 8008d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0f3      	beq.n	8008d2e <_fflush_r+0xa>
 8008d46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d48:	07d0      	lsls	r0, r2, #31
 8008d4a:	d404      	bmi.n	8008d56 <_fflush_r+0x32>
 8008d4c:	0599      	lsls	r1, r3, #22
 8008d4e:	d402      	bmi.n	8008d56 <_fflush_r+0x32>
 8008d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d52:	f7fe fb3a 	bl	80073ca <__retarget_lock_acquire_recursive>
 8008d56:	4628      	mov	r0, r5
 8008d58:	4621      	mov	r1, r4
 8008d5a:	f7ff ff5f 	bl	8008c1c <__sflush_r>
 8008d5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d60:	07da      	lsls	r2, r3, #31
 8008d62:	4605      	mov	r5, r0
 8008d64:	d4e4      	bmi.n	8008d30 <_fflush_r+0xc>
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	059b      	lsls	r3, r3, #22
 8008d6a:	d4e1      	bmi.n	8008d30 <_fflush_r+0xc>
 8008d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d6e:	f7fe fb2d 	bl	80073cc <__retarget_lock_release_recursive>
 8008d72:	e7dd      	b.n	8008d30 <_fflush_r+0xc>

08008d74 <memmove>:
 8008d74:	4288      	cmp	r0, r1
 8008d76:	b510      	push	{r4, lr}
 8008d78:	eb01 0402 	add.w	r4, r1, r2
 8008d7c:	d902      	bls.n	8008d84 <memmove+0x10>
 8008d7e:	4284      	cmp	r4, r0
 8008d80:	4623      	mov	r3, r4
 8008d82:	d807      	bhi.n	8008d94 <memmove+0x20>
 8008d84:	1e43      	subs	r3, r0, #1
 8008d86:	42a1      	cmp	r1, r4
 8008d88:	d008      	beq.n	8008d9c <memmove+0x28>
 8008d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d92:	e7f8      	b.n	8008d86 <memmove+0x12>
 8008d94:	4402      	add	r2, r0
 8008d96:	4601      	mov	r1, r0
 8008d98:	428a      	cmp	r2, r1
 8008d9a:	d100      	bne.n	8008d9e <memmove+0x2a>
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008da6:	e7f7      	b.n	8008d98 <memmove+0x24>

08008da8 <_sbrk_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4d06      	ldr	r5, [pc, #24]	@ (8008dc4 <_sbrk_r+0x1c>)
 8008dac:	2300      	movs	r3, #0
 8008dae:	4604      	mov	r4, r0
 8008db0:	4608      	mov	r0, r1
 8008db2:	602b      	str	r3, [r5, #0]
 8008db4:	f7f9 fa88 	bl	80022c8 <_sbrk>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d102      	bne.n	8008dc2 <_sbrk_r+0x1a>
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	b103      	cbz	r3, 8008dc2 <_sbrk_r+0x1a>
 8008dc0:	6023      	str	r3, [r4, #0]
 8008dc2:	bd38      	pop	{r3, r4, r5, pc}
 8008dc4:	200004e8 	.word	0x200004e8

08008dc8 <memcpy>:
 8008dc8:	440a      	add	r2, r1
 8008dca:	4291      	cmp	r1, r2
 8008dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dd0:	d100      	bne.n	8008dd4 <memcpy+0xc>
 8008dd2:	4770      	bx	lr
 8008dd4:	b510      	push	{r4, lr}
 8008dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dde:	4291      	cmp	r1, r2
 8008de0:	d1f9      	bne.n	8008dd6 <memcpy+0xe>
 8008de2:	bd10      	pop	{r4, pc}

08008de4 <__assert_func>:
 8008de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008de6:	4614      	mov	r4, r2
 8008de8:	461a      	mov	r2, r3
 8008dea:	4b09      	ldr	r3, [pc, #36]	@ (8008e10 <__assert_func+0x2c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4605      	mov	r5, r0
 8008df0:	68d8      	ldr	r0, [r3, #12]
 8008df2:	b954      	cbnz	r4, 8008e0a <__assert_func+0x26>
 8008df4:	4b07      	ldr	r3, [pc, #28]	@ (8008e14 <__assert_func+0x30>)
 8008df6:	461c      	mov	r4, r3
 8008df8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dfc:	9100      	str	r1, [sp, #0]
 8008dfe:	462b      	mov	r3, r5
 8008e00:	4905      	ldr	r1, [pc, #20]	@ (8008e18 <__assert_func+0x34>)
 8008e02:	f000 f86f 	bl	8008ee4 <fiprintf>
 8008e06:	f000 f87f 	bl	8008f08 <abort>
 8008e0a:	4b04      	ldr	r3, [pc, #16]	@ (8008e1c <__assert_func+0x38>)
 8008e0c:	e7f4      	b.n	8008df8 <__assert_func+0x14>
 8008e0e:	bf00      	nop
 8008e10:	2000001c 	.word	0x2000001c
 8008e14:	080097de 	.word	0x080097de
 8008e18:	080097b0 	.word	0x080097b0
 8008e1c:	080097a3 	.word	0x080097a3

08008e20 <_calloc_r>:
 8008e20:	b570      	push	{r4, r5, r6, lr}
 8008e22:	fba1 5402 	umull	r5, r4, r1, r2
 8008e26:	b93c      	cbnz	r4, 8008e38 <_calloc_r+0x18>
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7ff f991 	bl	8008150 <_malloc_r>
 8008e2e:	4606      	mov	r6, r0
 8008e30:	b928      	cbnz	r0, 8008e3e <_calloc_r+0x1e>
 8008e32:	2600      	movs	r6, #0
 8008e34:	4630      	mov	r0, r6
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	220c      	movs	r2, #12
 8008e3a:	6002      	str	r2, [r0, #0]
 8008e3c:	e7f9      	b.n	8008e32 <_calloc_r+0x12>
 8008e3e:	462a      	mov	r2, r5
 8008e40:	4621      	mov	r1, r4
 8008e42:	f7fe fa44 	bl	80072ce <memset>
 8008e46:	e7f5      	b.n	8008e34 <_calloc_r+0x14>

08008e48 <__ascii_mbtowc>:
 8008e48:	b082      	sub	sp, #8
 8008e4a:	b901      	cbnz	r1, 8008e4e <__ascii_mbtowc+0x6>
 8008e4c:	a901      	add	r1, sp, #4
 8008e4e:	b142      	cbz	r2, 8008e62 <__ascii_mbtowc+0x1a>
 8008e50:	b14b      	cbz	r3, 8008e66 <__ascii_mbtowc+0x1e>
 8008e52:	7813      	ldrb	r3, [r2, #0]
 8008e54:	600b      	str	r3, [r1, #0]
 8008e56:	7812      	ldrb	r2, [r2, #0]
 8008e58:	1e10      	subs	r0, r2, #0
 8008e5a:	bf18      	it	ne
 8008e5c:	2001      	movne	r0, #1
 8008e5e:	b002      	add	sp, #8
 8008e60:	4770      	bx	lr
 8008e62:	4610      	mov	r0, r2
 8008e64:	e7fb      	b.n	8008e5e <__ascii_mbtowc+0x16>
 8008e66:	f06f 0001 	mvn.w	r0, #1
 8008e6a:	e7f8      	b.n	8008e5e <__ascii_mbtowc+0x16>

08008e6c <_realloc_r>:
 8008e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e70:	4680      	mov	r8, r0
 8008e72:	4615      	mov	r5, r2
 8008e74:	460c      	mov	r4, r1
 8008e76:	b921      	cbnz	r1, 8008e82 <_realloc_r+0x16>
 8008e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	f7ff b967 	b.w	8008150 <_malloc_r>
 8008e82:	b92a      	cbnz	r2, 8008e90 <_realloc_r+0x24>
 8008e84:	f7ff f8f0 	bl	8008068 <_free_r>
 8008e88:	2400      	movs	r4, #0
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e90:	f000 f841 	bl	8008f16 <_malloc_usable_size_r>
 8008e94:	4285      	cmp	r5, r0
 8008e96:	4606      	mov	r6, r0
 8008e98:	d802      	bhi.n	8008ea0 <_realloc_r+0x34>
 8008e9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e9e:	d8f4      	bhi.n	8008e8a <_realloc_r+0x1e>
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	f7ff f954 	bl	8008150 <_malloc_r>
 8008ea8:	4607      	mov	r7, r0
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d0ec      	beq.n	8008e88 <_realloc_r+0x1c>
 8008eae:	42b5      	cmp	r5, r6
 8008eb0:	462a      	mov	r2, r5
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	bf28      	it	cs
 8008eb6:	4632      	movcs	r2, r6
 8008eb8:	f7ff ff86 	bl	8008dc8 <memcpy>
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4640      	mov	r0, r8
 8008ec0:	f7ff f8d2 	bl	8008068 <_free_r>
 8008ec4:	463c      	mov	r4, r7
 8008ec6:	e7e0      	b.n	8008e8a <_realloc_r+0x1e>

08008ec8 <__ascii_wctomb>:
 8008ec8:	4603      	mov	r3, r0
 8008eca:	4608      	mov	r0, r1
 8008ecc:	b141      	cbz	r1, 8008ee0 <__ascii_wctomb+0x18>
 8008ece:	2aff      	cmp	r2, #255	@ 0xff
 8008ed0:	d904      	bls.n	8008edc <__ascii_wctomb+0x14>
 8008ed2:	228a      	movs	r2, #138	@ 0x8a
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eda:	4770      	bx	lr
 8008edc:	700a      	strb	r2, [r1, #0]
 8008ede:	2001      	movs	r0, #1
 8008ee0:	4770      	bx	lr
	...

08008ee4 <fiprintf>:
 8008ee4:	b40e      	push	{r1, r2, r3}
 8008ee6:	b503      	push	{r0, r1, lr}
 8008ee8:	4601      	mov	r1, r0
 8008eea:	ab03      	add	r3, sp, #12
 8008eec:	4805      	ldr	r0, [pc, #20]	@ (8008f04 <fiprintf+0x20>)
 8008eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef2:	6800      	ldr	r0, [r0, #0]
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	f000 f83f 	bl	8008f78 <_vfiprintf_r>
 8008efa:	b002      	add	sp, #8
 8008efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f00:	b003      	add	sp, #12
 8008f02:	4770      	bx	lr
 8008f04:	2000001c 	.word	0x2000001c

08008f08 <abort>:
 8008f08:	b508      	push	{r3, lr}
 8008f0a:	2006      	movs	r0, #6
 8008f0c:	f000 fa08 	bl	8009320 <raise>
 8008f10:	2001      	movs	r0, #1
 8008f12:	f7f9 f961 	bl	80021d8 <_exit>

08008f16 <_malloc_usable_size_r>:
 8008f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f1a:	1f18      	subs	r0, r3, #4
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	bfbc      	itt	lt
 8008f20:	580b      	ldrlt	r3, [r1, r0]
 8008f22:	18c0      	addlt	r0, r0, r3
 8008f24:	4770      	bx	lr

08008f26 <__sfputc_r>:
 8008f26:	6893      	ldr	r3, [r2, #8]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	b410      	push	{r4}
 8008f2e:	6093      	str	r3, [r2, #8]
 8008f30:	da08      	bge.n	8008f44 <__sfputc_r+0x1e>
 8008f32:	6994      	ldr	r4, [r2, #24]
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	db01      	blt.n	8008f3c <__sfputc_r+0x16>
 8008f38:	290a      	cmp	r1, #10
 8008f3a:	d103      	bne.n	8008f44 <__sfputc_r+0x1e>
 8008f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f40:	f000 b932 	b.w	80091a8 <__swbuf_r>
 8008f44:	6813      	ldr	r3, [r2, #0]
 8008f46:	1c58      	adds	r0, r3, #1
 8008f48:	6010      	str	r0, [r2, #0]
 8008f4a:	7019      	strb	r1, [r3, #0]
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <__sfputs_r>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	4606      	mov	r6, r0
 8008f58:	460f      	mov	r7, r1
 8008f5a:	4614      	mov	r4, r2
 8008f5c:	18d5      	adds	r5, r2, r3
 8008f5e:	42ac      	cmp	r4, r5
 8008f60:	d101      	bne.n	8008f66 <__sfputs_r+0x12>
 8008f62:	2000      	movs	r0, #0
 8008f64:	e007      	b.n	8008f76 <__sfputs_r+0x22>
 8008f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6a:	463a      	mov	r2, r7
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	f7ff ffda 	bl	8008f26 <__sfputc_r>
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	d1f3      	bne.n	8008f5e <__sfputs_r+0xa>
 8008f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f78 <_vfiprintf_r>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	b09d      	sub	sp, #116	@ 0x74
 8008f80:	4614      	mov	r4, r2
 8008f82:	4698      	mov	r8, r3
 8008f84:	4606      	mov	r6, r0
 8008f86:	b118      	cbz	r0, 8008f90 <_vfiprintf_r+0x18>
 8008f88:	6a03      	ldr	r3, [r0, #32]
 8008f8a:	b90b      	cbnz	r3, 8008f90 <_vfiprintf_r+0x18>
 8008f8c:	f7fe f906 	bl	800719c <__sinit>
 8008f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f92:	07d9      	lsls	r1, r3, #31
 8008f94:	d405      	bmi.n	8008fa2 <_vfiprintf_r+0x2a>
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	059a      	lsls	r2, r3, #22
 8008f9a:	d402      	bmi.n	8008fa2 <_vfiprintf_r+0x2a>
 8008f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f9e:	f7fe fa14 	bl	80073ca <__retarget_lock_acquire_recursive>
 8008fa2:	89ab      	ldrh	r3, [r5, #12]
 8008fa4:	071b      	lsls	r3, r3, #28
 8008fa6:	d501      	bpl.n	8008fac <_vfiprintf_r+0x34>
 8008fa8:	692b      	ldr	r3, [r5, #16]
 8008faa:	b99b      	cbnz	r3, 8008fd4 <_vfiprintf_r+0x5c>
 8008fac:	4629      	mov	r1, r5
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f000 f938 	bl	8009224 <__swsetup_r>
 8008fb4:	b170      	cbz	r0, 8008fd4 <_vfiprintf_r+0x5c>
 8008fb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fb8:	07dc      	lsls	r4, r3, #31
 8008fba:	d504      	bpl.n	8008fc6 <_vfiprintf_r+0x4e>
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	b01d      	add	sp, #116	@ 0x74
 8008fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	0598      	lsls	r0, r3, #22
 8008fca:	d4f7      	bmi.n	8008fbc <_vfiprintf_r+0x44>
 8008fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fce:	f7fe f9fd 	bl	80073cc <__retarget_lock_release_recursive>
 8008fd2:	e7f3      	b.n	8008fbc <_vfiprintf_r+0x44>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fe2:	2330      	movs	r3, #48	@ 0x30
 8008fe4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009194 <_vfiprintf_r+0x21c>
 8008fe8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fec:	f04f 0901 	mov.w	r9, #1
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	469a      	mov	sl, r3
 8008ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff8:	b10a      	cbz	r2, 8008ffe <_vfiprintf_r+0x86>
 8008ffa:	2a25      	cmp	r2, #37	@ 0x25
 8008ffc:	d1f9      	bne.n	8008ff2 <_vfiprintf_r+0x7a>
 8008ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8009002:	d00b      	beq.n	800901c <_vfiprintf_r+0xa4>
 8009004:	465b      	mov	r3, fp
 8009006:	4622      	mov	r2, r4
 8009008:	4629      	mov	r1, r5
 800900a:	4630      	mov	r0, r6
 800900c:	f7ff ffa2 	bl	8008f54 <__sfputs_r>
 8009010:	3001      	adds	r0, #1
 8009012:	f000 80a7 	beq.w	8009164 <_vfiprintf_r+0x1ec>
 8009016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009018:	445a      	add	r2, fp
 800901a:	9209      	str	r2, [sp, #36]	@ 0x24
 800901c:	f89a 3000 	ldrb.w	r3, [sl]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 809f 	beq.w	8009164 <_vfiprintf_r+0x1ec>
 8009026:	2300      	movs	r3, #0
 8009028:	f04f 32ff 	mov.w	r2, #4294967295
 800902c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009030:	f10a 0a01 	add.w	sl, sl, #1
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	9307      	str	r3, [sp, #28]
 8009038:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800903c:	931a      	str	r3, [sp, #104]	@ 0x68
 800903e:	4654      	mov	r4, sl
 8009040:	2205      	movs	r2, #5
 8009042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009046:	4853      	ldr	r0, [pc, #332]	@ (8009194 <_vfiprintf_r+0x21c>)
 8009048:	f7f7 f8e2 	bl	8000210 <memchr>
 800904c:	9a04      	ldr	r2, [sp, #16]
 800904e:	b9d8      	cbnz	r0, 8009088 <_vfiprintf_r+0x110>
 8009050:	06d1      	lsls	r1, r2, #27
 8009052:	bf44      	itt	mi
 8009054:	2320      	movmi	r3, #32
 8009056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800905a:	0713      	lsls	r3, r2, #28
 800905c:	bf44      	itt	mi
 800905e:	232b      	movmi	r3, #43	@ 0x2b
 8009060:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009064:	f89a 3000 	ldrb.w	r3, [sl]
 8009068:	2b2a      	cmp	r3, #42	@ 0x2a
 800906a:	d015      	beq.n	8009098 <_vfiprintf_r+0x120>
 800906c:	9a07      	ldr	r2, [sp, #28]
 800906e:	4654      	mov	r4, sl
 8009070:	2000      	movs	r0, #0
 8009072:	f04f 0c0a 	mov.w	ip, #10
 8009076:	4621      	mov	r1, r4
 8009078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800907c:	3b30      	subs	r3, #48	@ 0x30
 800907e:	2b09      	cmp	r3, #9
 8009080:	d94b      	bls.n	800911a <_vfiprintf_r+0x1a2>
 8009082:	b1b0      	cbz	r0, 80090b2 <_vfiprintf_r+0x13a>
 8009084:	9207      	str	r2, [sp, #28]
 8009086:	e014      	b.n	80090b2 <_vfiprintf_r+0x13a>
 8009088:	eba0 0308 	sub.w	r3, r0, r8
 800908c:	fa09 f303 	lsl.w	r3, r9, r3
 8009090:	4313      	orrs	r3, r2
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	46a2      	mov	sl, r4
 8009096:	e7d2      	b.n	800903e <_vfiprintf_r+0xc6>
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	1d19      	adds	r1, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	9103      	str	r1, [sp, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfbb      	ittet	lt
 80090a4:	425b      	neglt	r3, r3
 80090a6:	f042 0202 	orrlt.w	r2, r2, #2
 80090aa:	9307      	strge	r3, [sp, #28]
 80090ac:	9307      	strlt	r3, [sp, #28]
 80090ae:	bfb8      	it	lt
 80090b0:	9204      	strlt	r2, [sp, #16]
 80090b2:	7823      	ldrb	r3, [r4, #0]
 80090b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80090b6:	d10a      	bne.n	80090ce <_vfiprintf_r+0x156>
 80090b8:	7863      	ldrb	r3, [r4, #1]
 80090ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80090bc:	d132      	bne.n	8009124 <_vfiprintf_r+0x1ac>
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	1d1a      	adds	r2, r3, #4
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	9203      	str	r2, [sp, #12]
 80090c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090ca:	3402      	adds	r4, #2
 80090cc:	9305      	str	r3, [sp, #20]
 80090ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091a4 <_vfiprintf_r+0x22c>
 80090d2:	7821      	ldrb	r1, [r4, #0]
 80090d4:	2203      	movs	r2, #3
 80090d6:	4650      	mov	r0, sl
 80090d8:	f7f7 f89a 	bl	8000210 <memchr>
 80090dc:	b138      	cbz	r0, 80090ee <_vfiprintf_r+0x176>
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	eba0 000a 	sub.w	r0, r0, sl
 80090e4:	2240      	movs	r2, #64	@ 0x40
 80090e6:	4082      	lsls	r2, r0
 80090e8:	4313      	orrs	r3, r2
 80090ea:	3401      	adds	r4, #1
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f2:	4829      	ldr	r0, [pc, #164]	@ (8009198 <_vfiprintf_r+0x220>)
 80090f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090f8:	2206      	movs	r2, #6
 80090fa:	f7f7 f889 	bl	8000210 <memchr>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d03f      	beq.n	8009182 <_vfiprintf_r+0x20a>
 8009102:	4b26      	ldr	r3, [pc, #152]	@ (800919c <_vfiprintf_r+0x224>)
 8009104:	bb1b      	cbnz	r3, 800914e <_vfiprintf_r+0x1d6>
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	3307      	adds	r3, #7
 800910a:	f023 0307 	bic.w	r3, r3, #7
 800910e:	3308      	adds	r3, #8
 8009110:	9303      	str	r3, [sp, #12]
 8009112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009114:	443b      	add	r3, r7
 8009116:	9309      	str	r3, [sp, #36]	@ 0x24
 8009118:	e76a      	b.n	8008ff0 <_vfiprintf_r+0x78>
 800911a:	fb0c 3202 	mla	r2, ip, r2, r3
 800911e:	460c      	mov	r4, r1
 8009120:	2001      	movs	r0, #1
 8009122:	e7a8      	b.n	8009076 <_vfiprintf_r+0xfe>
 8009124:	2300      	movs	r3, #0
 8009126:	3401      	adds	r4, #1
 8009128:	9305      	str	r3, [sp, #20]
 800912a:	4619      	mov	r1, r3
 800912c:	f04f 0c0a 	mov.w	ip, #10
 8009130:	4620      	mov	r0, r4
 8009132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009136:	3a30      	subs	r2, #48	@ 0x30
 8009138:	2a09      	cmp	r2, #9
 800913a:	d903      	bls.n	8009144 <_vfiprintf_r+0x1cc>
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0c6      	beq.n	80090ce <_vfiprintf_r+0x156>
 8009140:	9105      	str	r1, [sp, #20]
 8009142:	e7c4      	b.n	80090ce <_vfiprintf_r+0x156>
 8009144:	fb0c 2101 	mla	r1, ip, r1, r2
 8009148:	4604      	mov	r4, r0
 800914a:	2301      	movs	r3, #1
 800914c:	e7f0      	b.n	8009130 <_vfiprintf_r+0x1b8>
 800914e:	ab03      	add	r3, sp, #12
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	462a      	mov	r2, r5
 8009154:	4b12      	ldr	r3, [pc, #72]	@ (80091a0 <_vfiprintf_r+0x228>)
 8009156:	a904      	add	r1, sp, #16
 8009158:	4630      	mov	r0, r6
 800915a:	f7fd fbdb 	bl	8006914 <_printf_float>
 800915e:	4607      	mov	r7, r0
 8009160:	1c78      	adds	r0, r7, #1
 8009162:	d1d6      	bne.n	8009112 <_vfiprintf_r+0x19a>
 8009164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009166:	07d9      	lsls	r1, r3, #31
 8009168:	d405      	bmi.n	8009176 <_vfiprintf_r+0x1fe>
 800916a:	89ab      	ldrh	r3, [r5, #12]
 800916c:	059a      	lsls	r2, r3, #22
 800916e:	d402      	bmi.n	8009176 <_vfiprintf_r+0x1fe>
 8009170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009172:	f7fe f92b 	bl	80073cc <__retarget_lock_release_recursive>
 8009176:	89ab      	ldrh	r3, [r5, #12]
 8009178:	065b      	lsls	r3, r3, #25
 800917a:	f53f af1f 	bmi.w	8008fbc <_vfiprintf_r+0x44>
 800917e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009180:	e71e      	b.n	8008fc0 <_vfiprintf_r+0x48>
 8009182:	ab03      	add	r3, sp, #12
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	462a      	mov	r2, r5
 8009188:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <_vfiprintf_r+0x228>)
 800918a:	a904      	add	r1, sp, #16
 800918c:	4630      	mov	r0, r6
 800918e:	f7fd fe59 	bl	8006e44 <_printf_i>
 8009192:	e7e4      	b.n	800915e <_vfiprintf_r+0x1e6>
 8009194:	08009788 	.word	0x08009788
 8009198:	08009792 	.word	0x08009792
 800919c:	08006915 	.word	0x08006915
 80091a0:	08008f55 	.word	0x08008f55
 80091a4:	0800978e 	.word	0x0800978e

080091a8 <__swbuf_r>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	460e      	mov	r6, r1
 80091ac:	4614      	mov	r4, r2
 80091ae:	4605      	mov	r5, r0
 80091b0:	b118      	cbz	r0, 80091ba <__swbuf_r+0x12>
 80091b2:	6a03      	ldr	r3, [r0, #32]
 80091b4:	b90b      	cbnz	r3, 80091ba <__swbuf_r+0x12>
 80091b6:	f7fd fff1 	bl	800719c <__sinit>
 80091ba:	69a3      	ldr	r3, [r4, #24]
 80091bc:	60a3      	str	r3, [r4, #8]
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	071a      	lsls	r2, r3, #28
 80091c2:	d501      	bpl.n	80091c8 <__swbuf_r+0x20>
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	b943      	cbnz	r3, 80091da <__swbuf_r+0x32>
 80091c8:	4621      	mov	r1, r4
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 f82a 	bl	8009224 <__swsetup_r>
 80091d0:	b118      	cbz	r0, 80091da <__swbuf_r+0x32>
 80091d2:	f04f 37ff 	mov.w	r7, #4294967295
 80091d6:	4638      	mov	r0, r7
 80091d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	6922      	ldr	r2, [r4, #16]
 80091de:	1a98      	subs	r0, r3, r2
 80091e0:	6963      	ldr	r3, [r4, #20]
 80091e2:	b2f6      	uxtb	r6, r6
 80091e4:	4283      	cmp	r3, r0
 80091e6:	4637      	mov	r7, r6
 80091e8:	dc05      	bgt.n	80091f6 <__swbuf_r+0x4e>
 80091ea:	4621      	mov	r1, r4
 80091ec:	4628      	mov	r0, r5
 80091ee:	f7ff fd99 	bl	8008d24 <_fflush_r>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d1ed      	bne.n	80091d2 <__swbuf_r+0x2a>
 80091f6:	68a3      	ldr	r3, [r4, #8]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	60a3      	str	r3, [r4, #8]
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	6022      	str	r2, [r4, #0]
 8009202:	701e      	strb	r6, [r3, #0]
 8009204:	6962      	ldr	r2, [r4, #20]
 8009206:	1c43      	adds	r3, r0, #1
 8009208:	429a      	cmp	r2, r3
 800920a:	d004      	beq.n	8009216 <__swbuf_r+0x6e>
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	07db      	lsls	r3, r3, #31
 8009210:	d5e1      	bpl.n	80091d6 <__swbuf_r+0x2e>
 8009212:	2e0a      	cmp	r6, #10
 8009214:	d1df      	bne.n	80091d6 <__swbuf_r+0x2e>
 8009216:	4621      	mov	r1, r4
 8009218:	4628      	mov	r0, r5
 800921a:	f7ff fd83 	bl	8008d24 <_fflush_r>
 800921e:	2800      	cmp	r0, #0
 8009220:	d0d9      	beq.n	80091d6 <__swbuf_r+0x2e>
 8009222:	e7d6      	b.n	80091d2 <__swbuf_r+0x2a>

08009224 <__swsetup_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4b29      	ldr	r3, [pc, #164]	@ (80092cc <__swsetup_r+0xa8>)
 8009228:	4605      	mov	r5, r0
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	460c      	mov	r4, r1
 800922e:	b118      	cbz	r0, 8009238 <__swsetup_r+0x14>
 8009230:	6a03      	ldr	r3, [r0, #32]
 8009232:	b90b      	cbnz	r3, 8009238 <__swsetup_r+0x14>
 8009234:	f7fd ffb2 	bl	800719c <__sinit>
 8009238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923c:	0719      	lsls	r1, r3, #28
 800923e:	d422      	bmi.n	8009286 <__swsetup_r+0x62>
 8009240:	06da      	lsls	r2, r3, #27
 8009242:	d407      	bmi.n	8009254 <__swsetup_r+0x30>
 8009244:	2209      	movs	r2, #9
 8009246:	602a      	str	r2, [r5, #0]
 8009248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800924c:	81a3      	strh	r3, [r4, #12]
 800924e:	f04f 30ff 	mov.w	r0, #4294967295
 8009252:	e033      	b.n	80092bc <__swsetup_r+0x98>
 8009254:	0758      	lsls	r0, r3, #29
 8009256:	d512      	bpl.n	800927e <__swsetup_r+0x5a>
 8009258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800925a:	b141      	cbz	r1, 800926e <__swsetup_r+0x4a>
 800925c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009260:	4299      	cmp	r1, r3
 8009262:	d002      	beq.n	800926a <__swsetup_r+0x46>
 8009264:	4628      	mov	r0, r5
 8009266:	f7fe feff 	bl	8008068 <_free_r>
 800926a:	2300      	movs	r3, #0
 800926c:	6363      	str	r3, [r4, #52]	@ 0x34
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	2300      	movs	r3, #0
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f043 0308 	orr.w	r3, r3, #8
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	b94b      	cbnz	r3, 800929e <__swsetup_r+0x7a>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009294:	d003      	beq.n	800929e <__swsetup_r+0x7a>
 8009296:	4621      	mov	r1, r4
 8009298:	4628      	mov	r0, r5
 800929a:	f000 f883 	bl	80093a4 <__smakebuf_r>
 800929e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a2:	f013 0201 	ands.w	r2, r3, #1
 80092a6:	d00a      	beq.n	80092be <__swsetup_r+0x9a>
 80092a8:	2200      	movs	r2, #0
 80092aa:	60a2      	str	r2, [r4, #8]
 80092ac:	6962      	ldr	r2, [r4, #20]
 80092ae:	4252      	negs	r2, r2
 80092b0:	61a2      	str	r2, [r4, #24]
 80092b2:	6922      	ldr	r2, [r4, #16]
 80092b4:	b942      	cbnz	r2, 80092c8 <__swsetup_r+0xa4>
 80092b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092ba:	d1c5      	bne.n	8009248 <__swsetup_r+0x24>
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	0799      	lsls	r1, r3, #30
 80092c0:	bf58      	it	pl
 80092c2:	6962      	ldrpl	r2, [r4, #20]
 80092c4:	60a2      	str	r2, [r4, #8]
 80092c6:	e7f4      	b.n	80092b2 <__swsetup_r+0x8e>
 80092c8:	2000      	movs	r0, #0
 80092ca:	e7f7      	b.n	80092bc <__swsetup_r+0x98>
 80092cc:	2000001c 	.word	0x2000001c

080092d0 <_raise_r>:
 80092d0:	291f      	cmp	r1, #31
 80092d2:	b538      	push	{r3, r4, r5, lr}
 80092d4:	4605      	mov	r5, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	d904      	bls.n	80092e4 <_raise_r+0x14>
 80092da:	2316      	movs	r3, #22
 80092dc:	6003      	str	r3, [r0, #0]
 80092de:	f04f 30ff 	mov.w	r0, #4294967295
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80092e6:	b112      	cbz	r2, 80092ee <_raise_r+0x1e>
 80092e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092ec:	b94b      	cbnz	r3, 8009302 <_raise_r+0x32>
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 f830 	bl	8009354 <_getpid_r>
 80092f4:	4622      	mov	r2, r4
 80092f6:	4601      	mov	r1, r0
 80092f8:	4628      	mov	r0, r5
 80092fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092fe:	f000 b817 	b.w	8009330 <_kill_r>
 8009302:	2b01      	cmp	r3, #1
 8009304:	d00a      	beq.n	800931c <_raise_r+0x4c>
 8009306:	1c59      	adds	r1, r3, #1
 8009308:	d103      	bne.n	8009312 <_raise_r+0x42>
 800930a:	2316      	movs	r3, #22
 800930c:	6003      	str	r3, [r0, #0]
 800930e:	2001      	movs	r0, #1
 8009310:	e7e7      	b.n	80092e2 <_raise_r+0x12>
 8009312:	2100      	movs	r1, #0
 8009314:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009318:	4620      	mov	r0, r4
 800931a:	4798      	blx	r3
 800931c:	2000      	movs	r0, #0
 800931e:	e7e0      	b.n	80092e2 <_raise_r+0x12>

08009320 <raise>:
 8009320:	4b02      	ldr	r3, [pc, #8]	@ (800932c <raise+0xc>)
 8009322:	4601      	mov	r1, r0
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	f7ff bfd3 	b.w	80092d0 <_raise_r>
 800932a:	bf00      	nop
 800932c:	2000001c 	.word	0x2000001c

08009330 <_kill_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d07      	ldr	r5, [pc, #28]	@ (8009350 <_kill_r+0x20>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	4611      	mov	r1, r2
 800933c:	602b      	str	r3, [r5, #0]
 800933e:	f7f8 ff3b 	bl	80021b8 <_kill>
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	d102      	bne.n	800934c <_kill_r+0x1c>
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	b103      	cbz	r3, 800934c <_kill_r+0x1c>
 800934a:	6023      	str	r3, [r4, #0]
 800934c:	bd38      	pop	{r3, r4, r5, pc}
 800934e:	bf00      	nop
 8009350:	200004e8 	.word	0x200004e8

08009354 <_getpid_r>:
 8009354:	f7f8 bf28 	b.w	80021a8 <_getpid>

08009358 <__swhatbuf_r>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	460c      	mov	r4, r1
 800935c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009360:	2900      	cmp	r1, #0
 8009362:	b096      	sub	sp, #88	@ 0x58
 8009364:	4615      	mov	r5, r2
 8009366:	461e      	mov	r6, r3
 8009368:	da0d      	bge.n	8009386 <__swhatbuf_r+0x2e>
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009370:	f04f 0100 	mov.w	r1, #0
 8009374:	bf14      	ite	ne
 8009376:	2340      	movne	r3, #64	@ 0x40
 8009378:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800937c:	2000      	movs	r0, #0
 800937e:	6031      	str	r1, [r6, #0]
 8009380:	602b      	str	r3, [r5, #0]
 8009382:	b016      	add	sp, #88	@ 0x58
 8009384:	bd70      	pop	{r4, r5, r6, pc}
 8009386:	466a      	mov	r2, sp
 8009388:	f000 f848 	bl	800941c <_fstat_r>
 800938c:	2800      	cmp	r0, #0
 800938e:	dbec      	blt.n	800936a <__swhatbuf_r+0x12>
 8009390:	9901      	ldr	r1, [sp, #4]
 8009392:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009396:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800939a:	4259      	negs	r1, r3
 800939c:	4159      	adcs	r1, r3
 800939e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093a2:	e7eb      	b.n	800937c <__swhatbuf_r+0x24>

080093a4 <__smakebuf_r>:
 80093a4:	898b      	ldrh	r3, [r1, #12]
 80093a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093a8:	079d      	lsls	r5, r3, #30
 80093aa:	4606      	mov	r6, r0
 80093ac:	460c      	mov	r4, r1
 80093ae:	d507      	bpl.n	80093c0 <__smakebuf_r+0x1c>
 80093b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	6123      	str	r3, [r4, #16]
 80093b8:	2301      	movs	r3, #1
 80093ba:	6163      	str	r3, [r4, #20]
 80093bc:	b003      	add	sp, #12
 80093be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093c0:	ab01      	add	r3, sp, #4
 80093c2:	466a      	mov	r2, sp
 80093c4:	f7ff ffc8 	bl	8009358 <__swhatbuf_r>
 80093c8:	9f00      	ldr	r7, [sp, #0]
 80093ca:	4605      	mov	r5, r0
 80093cc:	4639      	mov	r1, r7
 80093ce:	4630      	mov	r0, r6
 80093d0:	f7fe febe 	bl	8008150 <_malloc_r>
 80093d4:	b948      	cbnz	r0, 80093ea <__smakebuf_r+0x46>
 80093d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093da:	059a      	lsls	r2, r3, #22
 80093dc:	d4ee      	bmi.n	80093bc <__smakebuf_r+0x18>
 80093de:	f023 0303 	bic.w	r3, r3, #3
 80093e2:	f043 0302 	orr.w	r3, r3, #2
 80093e6:	81a3      	strh	r3, [r4, #12]
 80093e8:	e7e2      	b.n	80093b0 <__smakebuf_r+0xc>
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	6020      	str	r0, [r4, #0]
 80093ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	9b01      	ldr	r3, [sp, #4]
 80093f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093fa:	b15b      	cbz	r3, 8009414 <__smakebuf_r+0x70>
 80093fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009400:	4630      	mov	r0, r6
 8009402:	f000 f81d 	bl	8009440 <_isatty_r>
 8009406:	b128      	cbz	r0, 8009414 <__smakebuf_r+0x70>
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	f043 0301 	orr.w	r3, r3, #1
 8009412:	81a3      	strh	r3, [r4, #12]
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	431d      	orrs	r5, r3
 8009418:	81a5      	strh	r5, [r4, #12]
 800941a:	e7cf      	b.n	80093bc <__smakebuf_r+0x18>

0800941c <_fstat_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	4d07      	ldr	r5, [pc, #28]	@ (800943c <_fstat_r+0x20>)
 8009420:	2300      	movs	r3, #0
 8009422:	4604      	mov	r4, r0
 8009424:	4608      	mov	r0, r1
 8009426:	4611      	mov	r1, r2
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	f7f8 ff25 	bl	8002278 <_fstat>
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	d102      	bne.n	8009438 <_fstat_r+0x1c>
 8009432:	682b      	ldr	r3, [r5, #0]
 8009434:	b103      	cbz	r3, 8009438 <_fstat_r+0x1c>
 8009436:	6023      	str	r3, [r4, #0]
 8009438:	bd38      	pop	{r3, r4, r5, pc}
 800943a:	bf00      	nop
 800943c:	200004e8 	.word	0x200004e8

08009440 <_isatty_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	4d06      	ldr	r5, [pc, #24]	@ (800945c <_isatty_r+0x1c>)
 8009444:	2300      	movs	r3, #0
 8009446:	4604      	mov	r4, r0
 8009448:	4608      	mov	r0, r1
 800944a:	602b      	str	r3, [r5, #0]
 800944c:	f7f8 ff24 	bl	8002298 <_isatty>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d102      	bne.n	800945a <_isatty_r+0x1a>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	b103      	cbz	r3, 800945a <_isatty_r+0x1a>
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	200004e8 	.word	0x200004e8

08009460 <_init>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr

0800946c <_fini>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr
