
CanBus_MCP2515_Nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008200  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080083d0  080083d0  000093d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087f0  080087f0  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080087f0  080087f0  000097f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087f8  080087f8  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087f8  080087f8  000097f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087fc  080087fc  000097fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008800  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200001d4  080089d4  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  080089d4  0000a4b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9ac  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce6  00000000  00000000  00019bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0001c898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a38  00000000  00000000  0001d608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246ed  00000000  00000000  0001e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e17  00000000  00000000  0004272d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9dc7  00000000  00000000  00055544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f30b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e0  00000000  00000000  0012f350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00133a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080083b8 	.word	0x080083b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080083b8 	.word	0x080083b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <CanInit>:
 *  Functions
 *
 *
 */
void CanInit(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	/* Executed once at startup. */

	int result = CANSPI_Initialize();
 8000ede:	f000 f841 	bl	8000f64 <CANSPI_Initialize>
 8000ee2:	6078      	str	r0, [r7, #4]
	if(result < 0){
		// TODO: Handle the error
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <Transmit_CAN_Message>:
        // Indicate reception error by turning off the LED
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
    }
}

void Transmit_CAN_Message(uint32_t StdId, uint8_t DLC, uint8_t *TxData){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	72fb      	strb	r3, [r7, #11]
	// Configuring a CAN message with standard ID
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B; // Use dEXTENDED_CAN_MSG_ID_2_0B for 29-bit extended IDs
 8000efa:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <Transmit_CAN_Message+0x70>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]

	// Standard 11-bit ID
	txMessage.frame.id = StdId;
 8000f00:	4a16      	ldr	r2, [pc, #88]	@ (8000f5c <Transmit_CAN_Message+0x70>)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6053      	str	r3, [r2, #4]

	// Number of bytes sent (maximum 8 bytes)
	uint8_t maxLength = (DLC < 8) ? DLC : 8;
 8000f06:	7afb      	ldrb	r3, [r7, #11]
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	bf28      	it	cs
 8000f0c:	2308      	movcs	r3, #8
 8000f0e:	75bb      	strb	r3, [r7, #22]
	txMessage.frame.dlc = maxLength;
 8000f10:	4a12      	ldr	r2, [pc, #72]	@ (8000f5c <Transmit_CAN_Message+0x70>)
 8000f12:	7dbb      	ldrb	r3, [r7, #22]
 8000f14:	7213      	strb	r3, [r2, #8]

	// Copy data from the TxData array to the fields of txMessage.frame.data:
	// txMessage.frame.data0; txMessage.frame.data1; txMessage.frame.data2; txMessage.frame.data3;
	// txMessage.frame.data4; txMessage.frame.data5; txMessage.frame.data6; txMessage.frame.data7;
	for (uint8_t i = 0; i < 8; i++) {
 8000f16:	2300      	movs	r3, #0
 8000f18:	75fb      	strb	r3, [r7, #23]
 8000f1a:	e010      	b.n	8000f3e <Transmit_CAN_Message+0x52>
		// If index i is less than the actual length of the data, copy the data
		// Otherwise, assign 0 as the default value
		((uint8_t*)&txMessage.frame.data0)[i] = (i < maxLength) ? TxData[i] : 0;
 8000f1c:	7dfa      	ldrb	r2, [r7, #23]
 8000f1e:	7dbb      	ldrb	r3, [r7, #22]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d204      	bcs.n	8000f2e <Transmit_CAN_Message+0x42>
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	e000      	b.n	8000f30 <Transmit_CAN_Message+0x44>
 8000f2e:	2200      	movs	r2, #0
 8000f30:	7dfb      	ldrb	r3, [r7, #23]
 8000f32:	490b      	ldr	r1, [pc, #44]	@ (8000f60 <Transmit_CAN_Message+0x74>)
 8000f34:	440b      	add	r3, r1
 8000f36:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	75fb      	strb	r3, [r7, #23]
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	2b07      	cmp	r3, #7
 8000f42:	d9eb      	bls.n	8000f1c <Transmit_CAN_Message+0x30>
	}

	// Try to add the message to the CAN bus
	if (CANSPI_Transmit(&txMessage)) {
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <Transmit_CAN_Message+0x70>)
 8000f46:	f000 f8c1 	bl	80010cc <CANSPI_Transmit>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <Transmit_CAN_Message+0x68>
	} else {
		// All transmission buffers are busy and thus no new message can be queued for transmission at that moment

		// Turn off the built-in LED to indicate an error during transmission
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		Error_Handler(); // Handle error if message transmission fails
 8000f50:	f000 ffd2 	bl	8001ef8 <Error_Handler>
	}
}
 8000f54:	bf00      	nop
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200001f0 	.word	0x200001f0
 8000f60:	200001f9 	.word	0x200001f9

08000f64 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000f8e:	2300      	movs	r3, #0
 8000f90:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000f92:	2300      	movs	r3, #0
 8000f94:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 8000fea:	f000 fa13 	bl	8001414 <MCP2515_Initialize>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f083 0301 	eor.w	r3, r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <CANSPI_Initialize+0x9c>
    return -1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	e060      	b.n	80010c2 <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8001000:	f000 fa2a 	bl	8001458 <MCP2515_SetConfigMode>
 8001004:	4603      	mov	r3, r0
 8001006:	f083 0301 	eor.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <CANSPI_Initialize+0xb2>
    return -2;
 8001010:	f06f 0301 	mvn.w	r3, #1
 8001014:	e055      	b.n	80010c2 <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	461a      	mov	r2, r3
 800101a:	2123      	movs	r1, #35	@ 0x23
 800101c:	2020      	movs	r0, #32
 800101e:	f000 fac5 	bl	80015ac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8001022:	463b      	mov	r3, r7
 8001024:	461a      	mov	r2, r3
 8001026:	2127      	movs	r1, #39	@ 0x27
 8001028:	2024      	movs	r0, #36	@ 0x24
 800102a:	f000 fabf 	bl	80015ac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	461a      	mov	r2, r3
 8001034:	2103      	movs	r1, #3
 8001036:	2000      	movs	r0, #0
 8001038:	f000 fab8 	bl	80015ac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	461a      	mov	r2, r3
 8001042:	2107      	movs	r1, #7
 8001044:	2004      	movs	r0, #4
 8001046:	f000 fab1 	bl	80015ac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	461a      	mov	r2, r3
 8001050:	210b      	movs	r1, #11
 8001052:	2008      	movs	r0, #8
 8001054:	f000 faaa 	bl	80015ac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	461a      	mov	r2, r3
 800105e:	2113      	movs	r1, #19
 8001060:	2010      	movs	r0, #16
 8001062:	f000 faa3 	bl	80015ac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	461a      	mov	r2, r3
 800106c:	2117      	movs	r1, #23
 800106e:	2014      	movs	r0, #20
 8001070:	f000 fa9c 	bl	80015ac <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	461a      	mov	r2, r3
 800107a:	211b      	movs	r1, #27
 800107c:	2018      	movs	r0, #24
 800107e:	f000 fa95 	bl	80015ac <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8001082:	2104      	movs	r1, #4
 8001084:	2060      	movs	r0, #96	@ 0x60
 8001086:	f000 fa6b 	bl	8001560 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800108a:	2101      	movs	r1, #1
 800108c:	2070      	movs	r0, #112	@ 0x70
 800108e:	f000 fa67 	bl	8001560 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8001092:	2100      	movs	r1, #0
 8001094:	202a      	movs	r0, #42	@ 0x2a
 8001096:	f000 fa63 	bl	8001560 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 800109a:	21e5      	movs	r1, #229	@ 0xe5
 800109c:	2029      	movs	r0, #41	@ 0x29
 800109e:	f000 fa5f 	bl	8001560 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 80010a2:	2183      	movs	r1, #131	@ 0x83
 80010a4:	2028      	movs	r0, #40	@ 0x28
 80010a6:	f000 fa5b 	bl	8001560 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80010aa:	f000 f9f3 	bl	8001494 <MCP2515_SetNormalMode>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f083 0301 	eor.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <CANSPI_Initialize+0x15c>
    return -3;
 80010ba:	f06f 0302 	mvn.w	r3, #2
 80010be:	e000      	b.n	80010c2 <CANSPI_Initialize+0x15e>

  return 1;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 80010d8:	4b36      	ldr	r3, [pc, #216]	@ (80011b4 <CANSPI_Transmit+0xe8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 80010de:	4b35      	ldr	r3, [pc, #212]	@ (80011b4 <CANSPI_Transmit+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 80010e4:	4b33      	ldr	r3, [pc, #204]	@ (80011b4 <CANSPI_Transmit+0xe8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 80010ea:	4b32      	ldr	r3, [pc, #200]	@ (80011b4 <CANSPI_Transmit+0xe8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80010f0:	f000 fad0 	bl	8001694 <MCP2515_ReadStatus>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <CANSPI_Transmit+0xec>)
 80010fa:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 80010fc:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <CANSPI_Transmit+0xec>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d115      	bne.n	8001136 <CANSPI_Transmit+0x6a>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6858      	ldr	r0, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	4a28      	ldr	r2, [pc, #160]	@ (80011b4 <CANSPI_Transmit+0xe8>)
 8001114:	4619      	mov	r1, r3
 8001116:	f000 f928 	bl	800136a <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7a1a      	ldrb	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3309      	adds	r3, #9
 8001122:	4924      	ldr	r1, [pc, #144]	@ (80011b4 <CANSPI_Transmit+0xe8>)
 8001124:	2040      	movs	r0, #64	@ 0x40
 8001126:	f000 fa6d 	bl	8001604 <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 800112a:	2081      	movs	r0, #129	@ 0x81
 800112c:	f000 fa96 	bl	800165c <MCP2515_RequestToSend>

    returnValue = 1;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e038      	b.n	80011a8 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8001136:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <CANSPI_Transmit+0xec>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d115      	bne.n	8001170 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6858      	ldr	r0, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4a19      	ldr	r2, [pc, #100]	@ (80011b4 <CANSPI_Transmit+0xe8>)
 800114e:	4619      	mov	r1, r3
 8001150:	f000 f90b 	bl	800136a <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7a1a      	ldrb	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3309      	adds	r3, #9
 800115c:	4915      	ldr	r1, [pc, #84]	@ (80011b4 <CANSPI_Transmit+0xe8>)
 800115e:	2042      	movs	r0, #66	@ 0x42
 8001160:	f000 fa50 	bl	8001604 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8001164:	2082      	movs	r0, #130	@ 0x82
 8001166:	f000 fa79 	bl	800165c <MCP2515_RequestToSend>

    returnValue = 1;
 800116a:	2301      	movs	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e01b      	b.n	80011a8 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <CANSPI_Transmit+0xec>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d114      	bne.n	80011a8 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6858      	ldr	r0, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <CANSPI_Transmit+0xe8>)
 8001188:	4619      	mov	r1, r3
 800118a:	f000 f8ee 	bl	800136a <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7a1a      	ldrb	r2, [r3, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3309      	adds	r3, #9
 8001196:	4907      	ldr	r1, [pc, #28]	@ (80011b4 <CANSPI_Transmit+0xe8>)
 8001198:	2044      	movs	r0, #68	@ 0x44
 800119a:	f000 fa33 	bl	8001604 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800119e:	2084      	movs	r0, #132	@ 0x84
 80011a0:	f000 fa5c 	bl	800165c <MCP2515_RequestToSend>

    returnValue = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000208 	.word	0x20000208
 80011b8:	20000204 	.word	0x20000204

080011bc <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80011c8:	f000 fa82 	bl	80016d0 <MCP2515_GetRxStatus>
 80011cc:	4603      	mov	r3, r0
 80011ce:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 80011d0:	7b3b      	ldrb	r3, [r7, #12]
 80011d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d066      	beq.n	80012aa <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80011dc:	7b3b      	ldrb	r3, [r7, #12]
 80011de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b40      	cmp	r3, #64	@ 0x40
 80011e6:	bf0c      	ite	eq
 80011e8:	2301      	moveq	r3, #1
 80011ea:	2300      	movne	r3, #0
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	7b3b      	ldrb	r3, [r7, #12]
 80011f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80011f8:	bf0c      	ite	eq
 80011fa:	2301      	moveq	r3, #1
 80011fc:	2300      	movne	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d007      	beq.n	8001218 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	220d      	movs	r2, #13
 800120e:	4619      	mov	r1, r3
 8001210:	2090      	movs	r0, #144	@ 0x90
 8001212:	f000 f981 	bl	8001518 <MCP2515_ReadRxSequence>
 8001216:	e00c      	b.n	8001232 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8001218:	7b3b      	ldrb	r3, [r7, #12]
 800121a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b80      	cmp	r3, #128	@ 0x80
 8001222:	d106      	bne.n	8001232 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	220d      	movs	r2, #13
 800122a:	4619      	mov	r1, r3
 800122c:	2094      	movs	r0, #148	@ 0x94
 800122e:	f000 f973 	bl	8001518 <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8001232:	7b3b      	ldrb	r3, [r7, #12]
 8001234:	f003 0318 	and.w	r3, r3, #24
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b10      	cmp	r3, #16
 800123c:	d10c      	bne.n	8001258 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2202      	movs	r2, #2
 8001242:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001244:	7cb8      	ldrb	r0, [r7, #18]
 8001246:	7cf9      	ldrb	r1, [r7, #19]
 8001248:	7c3a      	ldrb	r2, [r7, #16]
 800124a:	7c7b      	ldrb	r3, [r7, #17]
 800124c:	f000 f832 	bl	80012b4 <convertReg2ExtendedCANid>
 8001250:	4602      	mov	r2, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	e00b      	b.n	8001270 <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800125e:	7c3b      	ldrb	r3, [r7, #16]
 8001260:	7c7a      	ldrb	r2, [r7, #17]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f863 	bl	8001330 <convertReg2StandardCANid>
 800126a:	4602      	mov	r2, r0
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8001270:	7d3a      	ldrb	r2, [r7, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8001276:	7d7a      	ldrb	r2, [r7, #21]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 800127c:	7dba      	ldrb	r2, [r7, #22]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8001282:	7dfa      	ldrb	r2, [r7, #23]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8001288:	7e3a      	ldrb	r2, [r7, #24]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800128e:	7e7a      	ldrb	r2, [r7, #25]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8001294:	7eba      	ldrb	r2, [r7, #26]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800129a:	7efa      	ldrb	r2, [r7, #27]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80012a0:	7f3a      	ldrb	r2, [r7, #28]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80012b4:	b490      	push	{r4, r7}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4604      	mov	r4, r0
 80012bc:	4608      	mov	r0, r1
 80012be:	4611      	mov	r1, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4623      	mov	r3, r4
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	4603      	mov	r3, r0
 80012c8:	71bb      	strb	r3, [r7, #6]
 80012ca:	460b      	mov	r3, r1
 80012cc:	717b      	strb	r3, [r7, #5]
 80012ce:	4613      	mov	r3, r2
 80012d0:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80012da:	793b      	ldrb	r3, [r7, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80012e2:	793b      	ldrb	r3, [r7, #4]
 80012e4:	095b      	lsrs	r3, r3, #5
 80012e6:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80012e8:	797b      	ldrb	r3, [r7, #5]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80012ee:	7bbb      	ldrb	r3, [r7, #14]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4413      	add	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4413      	add	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4413      	add	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4413      	add	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8001324:	697b      	ldr	r3, [r7, #20]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bc90      	pop	{r4, r7}
 800132e:	4770      	bx	lr

08001330 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	460a      	mov	r2, r1
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	095b      	lsrs	r3, r3, #5
 800134e:	b2db      	uxtb	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	4413      	add	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 800135c:	68fb      	ldr	r3, [r7, #12]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 800136a:	b480      	push	{r7}
 800136c:	b087      	sub	sp, #28
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	460b      	mov	r3, r1
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 800137c:	7afb      	ldrb	r3, [r7, #11]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d12e      	bne.n	80013e0 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f023 031f 	bic.w	r3, r3, #31
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	4413      	add	r3, r2
 80013bc:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80013be:	7dfb      	ldrb	r3, [r7, #23]
 80013c0:	3308      	adds	r3, #8
 80013c2:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	f023 0314 	bic.w	r3, r3, #20
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80013de:	e013      	b.n	8001408 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	015b      	lsls	r3, r3, #5
 80013f0:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	701a      	strb	r2, [r3, #0]
}
 8001408:	bf00      	nop
 800140a:	371c      	adds	r7, #28
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001420:	480b      	ldr	r0, [pc, #44]	@ (8001450 <MCP2515_Initialize+0x3c>)
 8001422:	f002 f991 	bl	8003748 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8001426:	230a      	movs	r3, #10
 8001428:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 800142a:	480a      	ldr	r0, [pc, #40]	@ (8001454 <MCP2515_Initialize+0x40>)
 800142c:	f003 fc22 	bl	8004c74 <HAL_SPI_GetState>
 8001430:	4603      	mov	r3, r0
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <MCP2515_Initialize+0x26>
      return true;
 8001436:	2301      	movs	r3, #1
 8001438:	e006      	b.n	8001448 <MCP2515_Initialize+0x34>

    loop--;
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	3b01      	subs	r3, #1
 800143e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f1      	bne.n	800142a <MCP2515_Initialize+0x16>

  return false;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40020000 	.word	0x40020000
 8001454:	200002bc 	.word	0x200002bc

08001458 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800145e:	2180      	movs	r1, #128	@ 0x80
 8001460:	200f      	movs	r0, #15
 8001462:	f000 f87d 	bl	8001560 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8001466:	230a      	movs	r3, #10
 8001468:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 800146a:	200e      	movs	r0, #14
 800146c:	f000 f830 	bl	80014d0 <MCP2515_ReadByte>
 8001470:	4603      	mov	r3, r0
 8001472:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001476:	2b80      	cmp	r3, #128	@ 0x80
 8001478:	d101      	bne.n	800147e <MCP2515_SetConfigMode+0x26>
      return true;
 800147a:	2301      	movs	r3, #1
 800147c:	e006      	b.n	800148c <MCP2515_SetConfigMode+0x34>

    loop--;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	3b01      	subs	r3, #1
 8001482:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1ef      	bne.n	800146a <MCP2515_SetConfigMode+0x12>

  return false;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800149a:	2100      	movs	r1, #0
 800149c:	200f      	movs	r0, #15
 800149e:	f000 f85f 	bl	8001560 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80014a2:	230a      	movs	r3, #10
 80014a4:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80014a6:	200e      	movs	r0, #14
 80014a8:	f000 f812 	bl	80014d0 <MCP2515_ReadByte>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <MCP2515_SetNormalMode+0x26>
      return true;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e006      	b.n	80014c8 <MCP2515_SetNormalMode+0x34>

    loop--;
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	3b01      	subs	r3, #1
 80014be:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ef      	bne.n	80014a6 <MCP2515_SetNormalMode+0x12>

  return false;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014e0:	480c      	ldr	r0, [pc, #48]	@ (8001514 <MCP2515_ReadByte+0x44>)
 80014e2:	f002 f931 	bl	8003748 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 80014e6:	2003      	movs	r0, #3
 80014e8:	f000 f910 	bl	800170c <SPI_Tx>
  SPI_Tx(address);
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f90c 	bl	800170c <SPI_Tx>
  retVal = SPI_Rx();
 80014f4:	f000 f930 	bl	8001758 <SPI_Rx>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001502:	4804      	ldr	r0, [pc, #16]	@ (8001514 <MCP2515_ReadByte+0x44>)
 8001504:	f002 f920 	bl	8003748 <HAL_GPIO_WritePin>

  return retVal;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40020000 	.word	0x40020000

08001518 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	4613      	mov	r3, r2
 8001526:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800152e:	480b      	ldr	r0, [pc, #44]	@ (800155c <MCP2515_ReadRxSequence+0x44>)
 8001530:	f002 f90a 	bl	8003748 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f8e8 	bl	800170c <SPI_Tx>
  SPI_RxBuffer(data, length);
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	4619      	mov	r1, r3
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f000 f919 	bl	8001778 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800154c:	4803      	ldr	r0, [pc, #12]	@ (800155c <MCP2515_ReadRxSequence+0x44>)
 800154e:	f002 f8fb 	bl	8003748 <HAL_GPIO_WritePin>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40020000 	.word	0x40020000

08001560 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	460a      	mov	r2, r1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001576:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <MCP2515_WriteByte+0x48>)
 8001578:	f002 f8e6 	bl	8003748 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 800157c:	2002      	movs	r0, #2
 800157e:	f000 f8c5 	bl	800170c <SPI_Tx>
  SPI_Tx(address);
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 f8c1 	bl	800170c <SPI_Tx>
  SPI_Tx(data);
 800158a:	79bb      	ldrb	r3, [r7, #6]
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f8bd 	bl	800170c <SPI_Tx>

  MCP2515_CS_HIGH();
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <MCP2515_WriteByte+0x48>)
 800159a:	f002 f8d5 	bl	8003748 <HAL_GPIO_WritePin>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40020000 	.word	0x40020000

080015ac <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	603a      	str	r2, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
 80015b8:	460b      	mov	r3, r1
 80015ba:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80015bc:	2200      	movs	r2, #0
 80015be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015c2:	480f      	ldr	r0, [pc, #60]	@ (8001600 <MCP2515_WriteByteSequence+0x54>)
 80015c4:	f002 f8c0 	bl	8003748 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80015c8:	2002      	movs	r0, #2
 80015ca:	f000 f89f 	bl	800170c <SPI_Tx>
  SPI_Tx(startAddress);
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f89b 	bl	800170c <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80015d6:	79ba      	ldrb	r2, [r7, #6]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4619      	mov	r1, r3
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f000 f8a3 	bl	8001730 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015f0:	4803      	ldr	r0, [pc, #12]	@ (8001600 <MCP2515_WriteByteSequence+0x54>)
 80015f2:	f002 f8a9 	bl	8003748 <HAL_GPIO_WritePin>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40020000 	.word	0x40020000

08001604 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4603      	mov	r3, r0
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	4613      	mov	r3, r2
 8001614:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800161c:	480e      	ldr	r0, [pc, #56]	@ (8001658 <MCP2515_LoadTxSequence+0x54>)
 800161e:	f002 f893 	bl	8003748 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f871 	bl	800170c <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 800162a:	2104      	movs	r1, #4
 800162c:	68b8      	ldr	r0, [r7, #8]
 800162e:	f000 f87f 	bl	8001730 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8001632:	7bbb      	ldrb	r3, [r7, #14]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f869 	bl	800170c <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f876 	bl	8001730 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8001644:	2201      	movs	r2, #1
 8001646:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800164a:	4803      	ldr	r0, [pc, #12]	@ (8001658 <MCP2515_LoadTxSequence+0x54>)
 800164c:	f002 f87c 	bl	8003748 <HAL_GPIO_WritePin>
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40020000 	.word	0x40020000

0800165c <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800166c:	4808      	ldr	r0, [pc, #32]	@ (8001690 <MCP2515_RequestToSend+0x34>)
 800166e:	f002 f86b 	bl	8003748 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f849 	bl	800170c <SPI_Tx>

  MCP2515_CS_HIGH();
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001680:	4803      	ldr	r0, [pc, #12]	@ (8001690 <MCP2515_RequestToSend+0x34>)
 8001682:	f002 f861 	bl	8003748 <HAL_GPIO_WritePin>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020000 	.word	0x40020000

08001694 <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016a0:	480a      	ldr	r0, [pc, #40]	@ (80016cc <MCP2515_ReadStatus+0x38>)
 80016a2:	f002 f851 	bl	8003748 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 80016a6:	20a0      	movs	r0, #160	@ 0xa0
 80016a8:	f000 f830 	bl	800170c <SPI_Tx>
  retVal = SPI_Rx();
 80016ac:	f000 f854 	bl	8001758 <SPI_Rx>
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016ba:	4804      	ldr	r0, [pc, #16]	@ (80016cc <MCP2515_ReadStatus+0x38>)
 80016bc:	f002 f844 	bl	8003748 <HAL_GPIO_WritePin>

  return retVal;
 80016c0:	79fb      	ldrb	r3, [r7, #7]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40020000 	.word	0x40020000

080016d0 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016dc:	480a      	ldr	r0, [pc, #40]	@ (8001708 <MCP2515_GetRxStatus+0x38>)
 80016de:	f002 f833 	bl	8003748 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 80016e2:	20b0      	movs	r0, #176	@ 0xb0
 80016e4:	f000 f812 	bl	800170c <SPI_Tx>
  retVal = SPI_Rx();
 80016e8:	f000 f836 	bl	8001758 <SPI_Rx>
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80016f0:	2201      	movs	r2, #1
 80016f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f6:	4804      	ldr	r0, [pc, #16]	@ (8001708 <MCP2515_GetRxStatus+0x38>)
 80016f8:	f002 f826 	bl	8003748 <HAL_GPIO_WritePin>

  return retVal;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40020000 	.word	0x40020000

0800170c <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8001716:	1df9      	adds	r1, r7, #7
 8001718:	230a      	movs	r3, #10
 800171a:	2201      	movs	r2, #1
 800171c:	4803      	ldr	r0, [pc, #12]	@ (800172c <SPI_Tx+0x20>)
 800171e:	f002 fe9e 	bl	800445e <HAL_SPI_Transmit>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200002bc 	.word	0x200002bc

08001730 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	b29a      	uxth	r2, r3
 8001740:	230a      	movs	r3, #10
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4803      	ldr	r0, [pc, #12]	@ (8001754 <SPI_TxBuffer+0x24>)
 8001746:	f002 fe8a 	bl	800445e <HAL_SPI_Transmit>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200002bc 	.word	0x200002bc

08001758 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800175e:	1df9      	adds	r1, r7, #7
 8001760:	230a      	movs	r3, #10
 8001762:	2201      	movs	r2, #1
 8001764:	4803      	ldr	r0, [pc, #12]	@ (8001774 <SPI_Rx+0x1c>)
 8001766:	f002 ffbd 	bl	80046e4 <HAL_SPI_Receive>
  return retVal;
 800176a:	79fb      	ldrb	r3, [r7, #7]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200002bc 	.word	0x200002bc

08001778 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	b29a      	uxth	r2, r3
 8001788:	230a      	movs	r3, #10
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4803      	ldr	r0, [pc, #12]	@ (800179c <SPI_RxBuffer+0x24>)
 800178e:	f002 ffa9 	bl	80046e4 <HAL_SPI_Receive>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002bc 	.word	0x200002bc

080017a0 <SchTimerInterruptCallback>:
 *
 *
 */

void SchTimerInterruptCallback(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
	tickCounter++;
 80017a4:	4b21      	ldr	r3, [pc, #132]	@ (800182c <SchTimerInterruptCallback+0x8c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a20      	ldr	r2, [pc, #128]	@ (800182c <SchTimerInterruptCallback+0x8c>)
 80017ac:	6013      	str	r3, [r2, #0]

	// Perform quick tasks every 1 ms
	if (tickCounter % 1 == 0) {
		fastTaskFlag = 1;
 80017ae:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <SchTimerInterruptCallback+0x90>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
	}

	// Perform medium tasks every 10 ms
	if (tickCounter % 10 == 0) {
 80017b4:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <SchTimerInterruptCallback+0x8c>)
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001834 <SchTimerInterruptCallback+0x94>)
 80017ba:	fba3 2301 	umull	r2, r3, r3, r1
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	1aca      	subs	r2, r1, r3
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	d102      	bne.n	80017d4 <SchTimerInterruptCallback+0x34>
		mediumTaskFlag = 1;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <SchTimerInterruptCallback+0x98>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
	}

	// Perform the task every 20 ms
	if (tickCounter % 20 == 0) {
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <SchTimerInterruptCallback+0x8c>)
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <SchTimerInterruptCallback+0x94>)
 80017da:	fba3 2301 	umull	r2, r3, r3, r1
 80017de:	091a      	lsrs	r2, r3, #4
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	1aca      	subs	r2, r1, r3
 80017ea:	2a00      	cmp	r2, #0
 80017ec:	d102      	bne.n	80017f4 <SchTimerInterruptCallback+0x54>
		conversionFlag = 1;
 80017ee:	4b13      	ldr	r3, [pc, #76]	@ (800183c <SchTimerInterruptCallback+0x9c>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
	}

	// Perform slow tasks every 100 ms
	if (tickCounter % 100 == 0) {
 80017f4:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <SchTimerInterruptCallback+0x8c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <SchTimerInterruptCallback+0xa0>)
 80017fa:	fba3 1302 	umull	r1, r3, r3, r2
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	2164      	movs	r1, #100	@ 0x64
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <SchTimerInterruptCallback+0x72>
		slowTaskFlag = 1;
 800180c:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <SchTimerInterruptCallback+0xa4>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
	}

	// Reset the counter to prevent overflow
	if (tickCounter >= 1000) {
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <SchTimerInterruptCallback+0x8c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800181a:	d302      	bcc.n	8001822 <SchTimerInterruptCallback+0x82>
		tickCounter = 0;
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <SchTimerInterruptCallback+0x8c>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
	}
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	2000020c 	.word	0x2000020c
 8001830:	20000210 	.word	0x20000210
 8001834:	cccccccd 	.word	0xcccccccd
 8001838:	20000211 	.word	0x20000211
 800183c:	20000212 	.word	0x20000212
 8001840:	51eb851f 	.word	0x51eb851f
 8001844:	20000213 	.word	0x20000213

08001848 <SchedulerInitFct>:
 *
 *
 */

void SchedulerInitFct(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	// Initialize SysTick to generate an interrupt every 1 ms.
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 360); // Formula for the divider: 72 MHz (of HCLK) / 2 (of APB1 Prescaler) / 1 (of APB2 Prescaler) * 10
 800184c:	f002 f87c 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8001850:	4603      	mov	r3, r0
 8001852:	08db      	lsrs	r3, r3, #3
 8001854:	4a0b      	ldr	r2, [pc, #44]	@ (8001884 <SchedulerInitFct+0x3c>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	4618      	mov	r0, r3
 800185e:	f001 fae8 	bl	8002e32 <HAL_SYSTICK_Config>

	// Initialize other variables and flags if necessary
	tickCounter = 0;
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <SchedulerInitFct+0x40>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
	fastTaskFlag = 0;
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <SchedulerInitFct+0x44>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
	mediumTaskFlag = 0;
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <SchedulerInitFct+0x48>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
	conversionFlag = 0;
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <SchedulerInitFct+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
	slowTaskFlag = 0;
 800187a:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <SchedulerInitFct+0x50>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	16c16c17 	.word	0x16c16c17
 8001888:	2000020c 	.word	0x2000020c
 800188c:	20000210 	.word	0x20000210
 8001890:	20000211 	.word	0x20000211
 8001894:	20000212 	.word	0x20000212
 8001898:	20000213 	.word	0x20000213

0800189c <SchedulerMgmFct>:
 *
 *
 */

void SchedulerMgmFct(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	// Perform quick tasks if the flag is set
	if (fastTaskFlag) {
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <SchedulerMgmFct+0x50>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <SchedulerMgmFct+0x16>
		fastTaskFlag = 0;
 80018a8:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <SchedulerMgmFct+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
		TaskFast(); // Perform all quick tests
 80018ae:	f000 f82d 	bl	800190c <TaskFast>
	}

	// Perform medium tasks if the flag is set
	if (mediumTaskFlag) {
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <SchedulerMgmFct+0x54>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <SchedulerMgmFct+0x28>
		mediumTaskFlag = 0;
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <SchedulerMgmFct+0x54>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
		TaskMed(); // Perform all medium-speed tasks
 80018c0:	f000 f82b 	bl	800191a <TaskMed>
	}

	// Perform average sensors reading conversion before sending to Can
	if (conversionFlag){
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <SchedulerMgmFct+0x58>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <SchedulerMgmFct+0x3a>
		conversionFlag = 0;
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <SchedulerMgmFct+0x58>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
		TaskConv(); // Perform the conversion of the average sensors reading
 80018d2:	f000 f829 	bl	8001928 <TaskConv>
	}

	// Perform slow tasks if the flag is set
	if (slowTaskFlag) {
 80018d6:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <SchedulerMgmFct+0x5c>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <SchedulerMgmFct+0x4c>
		slowTaskFlag = 0;
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <SchedulerMgmFct+0x5c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
		TaskSlow();  // Perform all slow tasks
 80018e4:	f000 f827 	bl	8001936 <TaskSlow>
	}

	// Other error handling tasks
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000210 	.word	0x20000210
 80018f0:	20000211 	.word	0x20000211
 80018f4:	20000212 	.word	0x20000212
 80018f8:	20000213 	.word	0x20000213

080018fc <TaskInit>:
 *  General Tasks
 *
 *
 */
void TaskInit(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	/* Executed once at startup. */
	/* TODO Functions for HW/SW initialization. */

	SchedulerInitFct();
 8001900:	f7ff ffa2 	bl	8001848 <SchedulerInitFct>

	#ifndef DEBUG_MODE
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
	#endif

	CanInit();
 8001904:	f7ff fae8 	bl	8000ed8 <CanInit>
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <TaskFast>:

void TaskFast(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (fast schedulation, e.g. 1 ms). */

	#ifndef DEBUG_MODE
		Task1_AcquireSensorValues();
	#endif
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <TaskMed>:

void TaskMed(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
	#ifndef DEBUG_MODE
		Task1_AverageSensorValues();

		Task3_ReadCANMessages();
	#endif
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <TaskConv>:

void TaskConv(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (medium schedulation, e.g. 20 ms). */

	#ifndef DEBUG_MODE
		Task2_ConvertAndSendSensorData_Task4_ErrorHandling();
	#endif
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <TaskSlow>:

void TaskSlow(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (medium schedulation, e.g. 100 ms). */

	#ifdef DEBUG_MODE
		Debug_CAN_Messages();
 800193a:	f000 f803 	bl	8001944 <Debug_CAN_Messages>
	#endif
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <Debug_CAN_Messages>:
{
	Receive_CAN_Message();
}

void Debug_CAN_Messages(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b09a      	sub	sp, #104	@ 0x68
 8001948:	af00      	add	r7, sp, #0
	// Sending accelerometer and gyroscope test values
	uint8_t a[] = {100, 50, 30};
 800194a:	4a76      	ldr	r2, [pc, #472]	@ (8001b24 <Debug_CAN_Messages+0x1e0>)
 800194c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	4611      	mov	r1, r2
 8001954:	8019      	strh	r1, [r3, #0]
 8001956:	3302      	adds	r3, #2
 8001958:	0c12      	lsrs	r2, r2, #16
 800195a:	701a      	strb	r2, [r3, #0]
	uint8_t g[] = {70, 80, 90};
 800195c:	4a72      	ldr	r2, [pc, #456]	@ (8001b28 <Debug_CAN_Messages+0x1e4>)
 800195e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	4611      	mov	r1, r2
 8001966:	8019      	strh	r1, [r3, #0]
 8001968:	3302      	adds	r3, #2
 800196a:	0c12      	lsrs	r2, r2, #16
 800196c:	701a      	strb	r2, [r3, #0]

	Transmit_CAN_Message(0x033, 3, a);
 800196e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001972:	461a      	mov	r2, r3
 8001974:	2103      	movs	r1, #3
 8001976:	2033      	movs	r0, #51	@ 0x33
 8001978:	f7ff fab8 	bl	8000eec <Transmit_CAN_Message>
	Transmit_CAN_Message(0x034, 3, g);
 800197c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001980:	461a      	mov	r2, r3
 8001982:	2103      	movs	r1, #3
 8001984:	2034      	movs	r0, #52	@ 0x34
 8001986:	f7ff fab1 	bl	8000eec <Transmit_CAN_Message>

	// Attempt to receive a CAN message
	uCAN_MSG rxMessage;
	if (CANSPI_Receive(&rxMessage)) {
 800198a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fc14 	bl	80011bc <CANSPI_Receive>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 80ba 	beq.w	8001b10 <Debug_CAN_Messages+0x1cc>

		// Check for specific CAN message ID
		switch(rxMessage.frame.id){
 800199c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800199e:	2b36      	cmp	r3, #54	@ 0x36
 80019a0:	d066      	beq.n	8001a70 <Debug_CAN_Messages+0x12c>
 80019a2:	2b36      	cmp	r3, #54	@ 0x36
 80019a4:	f200 80ae 	bhi.w	8001b04 <Debug_CAN_Messages+0x1c0>
 80019a8:	2b35      	cmp	r3, #53	@ 0x35
 80019aa:	d008      	beq.n	80019be <Debug_CAN_Messages+0x7a>
 80019ac:	2b35      	cmp	r3, #53	@ 0x35
 80019ae:	f200 80a9 	bhi.w	8001b04 <Debug_CAN_Messages+0x1c0>
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d073      	beq.n	8001a9e <Debug_CAN_Messages+0x15a>
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	f000 808d 	beq.w	8001ad6 <Debug_CAN_Messages+0x192>
 80019bc:	e0a2      	b.n	8001b04 <Debug_CAN_Messages+0x1c0>
			case 0x35:
				// Extract data from CAN message
				uint8_t s1 = (uint8_t) rxMessage.frame.data0;
 80019be:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80019c2:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
				uint8_t s2 = (uint8_t) rxMessage.frame.data1;
 80019c6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80019ca:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
				uint8_t s3 = (uint8_t) rxMessage.frame.data2;
 80019ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80019d2:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
				uint8_t s4 = (uint8_t) rxMessage.frame.data3;
 80019d6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80019da:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
				// Display received messages
				char msg_35[50];
				uint16_t msg_35_length;

				// Formatting and sending the message for the sensor 1
				msg_35_length = sprintf(msg_35, "Sensor 1: %d\n", s1);
 80019de:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	4951      	ldr	r1, [pc, #324]	@ (8001b2c <Debug_CAN_Messages+0x1e8>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 fbba 	bl	8006160 <siprintf>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
				HAL_UART_Transmit(&huart2, (uint8_t*)msg_35, msg_35_length, HAL_MAX_DELAY);
 80019f2:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80019f6:	1d39      	adds	r1, r7, #4
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
 80019fc:	484c      	ldr	r0, [pc, #304]	@ (8001b30 <Debug_CAN_Messages+0x1ec>)
 80019fe:	f003 fad9 	bl	8004fb4 <HAL_UART_Transmit>

				// Formatting and sending the message for the sensor 2
				msg_35_length = sprintf(msg_35, "Sensor 2: %d\n", s2);
 8001a02:	f897 2062 	ldrb.w	r2, [r7, #98]	@ 0x62
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	494a      	ldr	r1, [pc, #296]	@ (8001b34 <Debug_CAN_Messages+0x1f0>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f004 fba8 	bl	8006160 <siprintf>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
				HAL_UART_Transmit(&huart2, (uint8_t*)msg_35, msg_35_length, HAL_MAX_DELAY);
 8001a16:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8001a1a:	1d39      	adds	r1, r7, #4
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	4843      	ldr	r0, [pc, #268]	@ (8001b30 <Debug_CAN_Messages+0x1ec>)
 8001a22:	f003 fac7 	bl	8004fb4 <HAL_UART_Transmit>

				// Formatting and sending the message for the sensor 3
				msg_35_length = sprintf(msg_35, "Sensor 3: %d\n", s3);
 8001a26:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	4942      	ldr	r1, [pc, #264]	@ (8001b38 <Debug_CAN_Messages+0x1f4>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f004 fb96 	bl	8006160 <siprintf>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
				HAL_UART_Transmit(&huart2, (uint8_t*)msg_35, msg_35_length, HAL_MAX_DELAY);
 8001a3a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8001a3e:	1d39      	adds	r1, r7, #4
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
 8001a44:	483a      	ldr	r0, [pc, #232]	@ (8001b30 <Debug_CAN_Messages+0x1ec>)
 8001a46:	f003 fab5 	bl	8004fb4 <HAL_UART_Transmit>

				// Formatting and sending the message for the sensor 4
				msg_35_length = sprintf(msg_35, "Sensor 4: %d\n", s4);
 8001a4a:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	493a      	ldr	r1, [pc, #232]	@ (8001b3c <Debug_CAN_Messages+0x1f8>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 fb84 	bl	8006160 <siprintf>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
				HAL_UART_Transmit(&huart2, (uint8_t*)msg_35, msg_35_length, HAL_MAX_DELAY);
 8001a5e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8001a62:	1d39      	adds	r1, r7, #4
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
 8001a68:	4831      	ldr	r0, [pc, #196]	@ (8001b30 <Debug_CAN_Messages+0x1ec>)
 8001a6a:	f003 faa3 	bl	8004fb4 <HAL_UART_Transmit>

				break;
 8001a6e:	e049      	b.n	8001b04 <Debug_CAN_Messages+0x1c0>

			case 0x36:
				// Extract data from CAN message
				uint8_t s5 = (uint8_t) rxMessage.frame.data0;
 8001a70:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001a74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				// Display received messages
				char msg_36[50];
				uint16_t msg_36_length;

				// Formatting and sending the message for the sensor 5
				msg_36_length = sprintf(msg_36, "Sensor 5: %d\n", s5);
 8001a78:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4930      	ldr	r1, [pc, #192]	@ (8001b40 <Debug_CAN_Messages+0x1fc>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f004 fb6d 	bl	8006160 <siprintf>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				HAL_UART_Transmit(&huart2, (uint8_t*)msg_36, msg_36_length, HAL_MAX_DELAY);
 8001a8c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8001a90:	1d39      	adds	r1, r7, #4
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	4826      	ldr	r0, [pc, #152]	@ (8001b30 <Debug_CAN_Messages+0x1ec>)
 8001a98:	f003 fa8c 	bl	8004fb4 <HAL_UART_Transmit>

				break;
 8001a9c:	e032      	b.n	8001b04 <Debug_CAN_Messages+0x1c0>

			case 0x05:
				// Extract data from CAN message
				char eChar = (char) rxMessage.frame.data0;
 8001a9e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001aa2:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
				uint8_t sensorNumber = (uint8_t) rxMessage.frame.data1;
 8001aa6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001aaa:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
				// Display received messages
				char msg_05[50];
				uint16_t msg_05_length;

				// Formatting and sending the error message
				msg_05_length = sprintf(msg_05, "Error: %c%d\n", eChar, sensorNumber);
 8001aae:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8001ab2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001ab6:	1d38      	adds	r0, r7, #4
 8001ab8:	4922      	ldr	r1, [pc, #136]	@ (8001b44 <Debug_CAN_Messages+0x200>)
 8001aba:	f004 fb51 	bl	8006160 <siprintf>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				HAL_UART_Transmit(&huart2, (uint8_t*)msg_05, msg_05_length, HAL_MAX_DELAY);
 8001ac4:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8001ac8:	1d39      	adds	r1, r7, #4
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	4818      	ldr	r0, [pc, #96]	@ (8001b30 <Debug_CAN_Messages+0x1ec>)
 8001ad0:	f003 fa70 	bl	8004fb4 <HAL_UART_Transmit>

				break;
 8001ad4:	e016      	b.n	8001b04 <Debug_CAN_Messages+0x1c0>

			case 0x06:
				// Extract data from CAN message
				char receivedChar = (char) rxMessage.frame.data0;
 8001ad6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001ada:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

				// Display received messages
				char msg_06[50];
				uint16_t msg_06_length;

				msg_06_length = sprintf(msg_06, "Message: %c\n", receivedChar);
 8001ade:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4918      	ldr	r1, [pc, #96]	@ (8001b48 <Debug_CAN_Messages+0x204>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f004 fb3a 	bl	8006160 <siprintf>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
				HAL_UART_Transmit(&huart2, (uint8_t*)msg_06, msg_06_length, HAL_MAX_DELAY);
 8001af2:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8001af6:	1d39      	adds	r1, r7, #4
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
 8001afc:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <Debug_CAN_Messages+0x1ec>)
 8001afe:	f003 fa59 	bl	8004fb4 <HAL_UART_Transmit>

				break;
 8001b02:	bf00      	nop
		}

		// Indicate successful reception by turning on the LED
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2120      	movs	r1, #32
 8001b08:	4810      	ldr	r0, [pc, #64]	@ (8001b4c <Debug_CAN_Messages+0x208>)
 8001b0a:	f001 fe1d 	bl	8003748 <HAL_GPIO_WritePin>
	} else {
		// Indicate reception error by turning off the LED
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
}
 8001b0e:	e004      	b.n	8001b1a <Debug_CAN_Messages+0x1d6>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2120      	movs	r1, #32
 8001b14:	480d      	ldr	r0, [pc, #52]	@ (8001b4c <Debug_CAN_Messages+0x208>)
 8001b16:	f001 fe17 	bl	8003748 <HAL_GPIO_WritePin>
}
 8001b1a:	bf00      	nop
 8001b1c:	3768      	adds	r7, #104	@ 0x68
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	08008458 	.word	0x08008458
 8001b28:	0800845c 	.word	0x0800845c
 8001b2c:	080083e8 	.word	0x080083e8
 8001b30:	20000314 	.word	0x20000314
 8001b34:	080083f8 	.word	0x080083f8
 8001b38:	08008408 	.word	0x08008408
 8001b3c:	08008418 	.word	0x08008418
 8001b40:	08008428 	.word	0x08008428
 8001b44:	08008438 	.word	0x08008438
 8001b48:	08008448 	.word	0x08008448
 8001b4c:	40020000 	.word	0x40020000

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b54:	f000 fc56 	bl	8002404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b58:	f000 f810 	bl	8001b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b5c:	f000 f94c 	bl	8001df8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b60:	f000 f92a 	bl	8001db8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b64:	f000 f8fe 	bl	8001d64 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001b68:	f000 f8c6 	bl	8001cf8 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001b6c:	f000 f872 	bl	8001c54 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  TaskInit();
 8001b70:	f7ff fec4 	bl	80018fc <TaskInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SchedulerMgmFct();
 8001b74:	f7ff fe92 	bl	800189c <SchedulerMgmFct>
 8001b78:	e7fc      	b.n	8001b74 <main+0x24>
	...

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	@ 0x50
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	2234      	movs	r2, #52	@ 0x34
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 fb4b 	bl	8006226 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	4b29      	ldr	r3, [pc, #164]	@ (8001c4c <SystemClock_Config+0xd0>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	4a28      	ldr	r2, [pc, #160]	@ (8001c4c <SystemClock_Config+0xd0>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb0:	4b26      	ldr	r3, [pc, #152]	@ (8001c4c <SystemClock_Config+0xd0>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <SystemClock_Config+0xd4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bc8:	4a21      	ldr	r2, [pc, #132]	@ (8001c50 <SystemClock_Config+0xd4>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c50 <SystemClock_Config+0xd4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be0:	2301      	movs	r3, #1
 8001be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be4:	2310      	movs	r3, #16
 8001be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be8:	2302      	movs	r3, #2
 8001bea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bec:	2300      	movs	r3, #0
 8001bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001bf4:	2348      	movs	r3, #72	@ 0x48
 8001bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c00:	2302      	movs	r3, #2
 8001c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 f901 	bl	8003e10 <HAL_RCC_OscConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c14:	f000 f970 	bl	8001ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c18:	230f      	movs	r3, #15
 8001c1a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	2102      	movs	r1, #2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 fda1 	bl	800377c <HAL_RCC_ClockConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001c40:	f000 f95a 	bl	8001ef8 <Error_Handler>
  }
}
 8001c44:	bf00      	nop
 8001c46:	3750      	adds	r7, #80	@ 0x50
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000

08001c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001c68:	4a21      	ldr	r2, [pc, #132]	@ (8001cf0 <MX_ADC1_Init+0x9c>)
 8001c6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c72:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c78:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c92:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001c94:	4a17      	ldr	r2, [pc, #92]	@ (8001cf4 <MX_ADC1_Init+0xa0>)
 8001c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c98:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cb2:	480e      	ldr	r0, [pc, #56]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001cb4:	f000 fc18 	bl	80024e8 <HAL_ADC_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001cbe:	f000 f91b 	bl	8001ef8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cce:	463b      	mov	r3, r7
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4806      	ldr	r0, [pc, #24]	@ (8001cec <MX_ADC1_Init+0x98>)
 8001cd4:	f000 fd70 	bl	80027b8 <HAL_ADC_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001cde:	f000 f90b 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000214 	.word	0x20000214
 8001cf0:	40012000 	.word	0x40012000
 8001cf4:	0f000001 	.word	0x0f000001

08001cf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001cfe:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <MX_SPI1_Init+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d02:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001d04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d0a:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001d24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001d44:	220a      	movs	r2, #10
 8001d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	@ (8001d5c <MX_SPI1_Init+0x64>)
 8001d4a:	f002 faff 	bl	800434c <HAL_SPI_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d54:	f000 f8d0 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200002bc 	.word	0x200002bc
 8001d60:	40013000 	.word	0x40013000

08001d64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	@ (8001db4 <MX_USART2_UART_Init+0x50>)
 8001d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d88:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d9a:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d9c:	f003 f8ba 	bl	8004f14 <HAL_UART_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001da6:	f000 f8a7 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000314 	.word	0x20000314
 8001db4:	40004400 	.word	0x40004400

08001db8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <MX_DMA_Init+0x3c>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8001df4 <MX_DMA_Init+0x3c>)
 8001dc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <MX_DMA_Init+0x3c>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2038      	movs	r0, #56	@ 0x38
 8001de0:	f000 fffd 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001de4:	2038      	movs	r0, #56	@ 0x38
 8001de6:	f001 f816 	bl	8002e16 <HAL_NVIC_EnableIRQ>

}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
 8001e0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <MX_GPIO_Init+0xe0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a30      	ldr	r2, [pc, #192]	@ (8001ed8 <MX_GPIO_Init+0xe0>)
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed8 <MX_GPIO_Init+0xe0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <MX_GPIO_Init+0xe0>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a29      	ldr	r2, [pc, #164]	@ (8001ed8 <MX_GPIO_Init+0xe0>)
 8001e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <MX_GPIO_Init+0xe0>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b23      	ldr	r3, [pc, #140]	@ (8001ed8 <MX_GPIO_Init+0xe0>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	4a22      	ldr	r2, [pc, #136]	@ (8001ed8 <MX_GPIO_Init+0xe0>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e56:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <MX_GPIO_Init+0xe0>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <MX_GPIO_Init+0xe0>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed8 <MX_GPIO_Init+0xe0>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <MX_GPIO_Init+0xe0>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2120      	movs	r1, #32
 8001e82:	4816      	ldr	r0, [pc, #88]	@ (8001edc <MX_GPIO_Init+0xe4>)
 8001e84:	f001 fc60 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e8e:	4813      	ldr	r0, [pc, #76]	@ (8001edc <MX_GPIO_Init+0xe4>)
 8001e90:	f001 fc5a 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e9a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	480d      	ldr	r0, [pc, #52]	@ (8001ee0 <MX_GPIO_Init+0xe8>)
 8001eac:	f001 fab8 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI_CS_Pin;
 8001eb0:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4804      	ldr	r0, [pc, #16]	@ (8001edc <MX_GPIO_Init+0xe4>)
 8001eca:	f001 faa9 	bl	8003420 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	@ 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40020800 	.word	0x40020800

08001ee4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}

// Called when buffer is completed filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001efc:	b672      	cpsid	i
}
 8001efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <Error_Handler+0x8>

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	4a0f      	ldr	r2, [pc, #60]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	4a08      	ldr	r2, [pc, #32]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f42:	2007      	movs	r0, #7
 8001f44:	f000 ff40 	bl	8002dc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a33      	ldr	r2, [pc, #204]	@ (8002040 <HAL_ADC_MspInit+0xec>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d15f      	bne.n	8002036 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b32      	ldr	r3, [pc, #200]	@ (8002044 <HAL_ADC_MspInit+0xf0>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a31      	ldr	r2, [pc, #196]	@ (8002044 <HAL_ADC_MspInit+0xf0>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b2f      	ldr	r3, [pc, #188]	@ (8002044 <HAL_ADC_MspInit+0xf0>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b2b      	ldr	r3, [pc, #172]	@ (8002044 <HAL_ADC_MspInit+0xf0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8002044 <HAL_ADC_MspInit+0xf0>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b28      	ldr	r3, [pc, #160]	@ (8002044 <HAL_ADC_MspInit+0xf0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4821      	ldr	r0, [pc, #132]	@ (8002048 <HAL_ADC_MspInit+0xf4>)
 8001fc2:	f001 fa2d 	bl	8003420 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fc6:	4b21      	ldr	r3, [pc, #132]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 8001fc8:	4a21      	ldr	r2, [pc, #132]	@ (8002050 <HAL_ADC_MspInit+0xfc>)
 8001fca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 8001fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fe4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 8001fe8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fee:	4b17      	ldr	r3, [pc, #92]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 8001ff0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ff4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 8001ff8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ffc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 8002006:	2200      	movs	r2, #0
 8002008:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800200a:	4810      	ldr	r0, [pc, #64]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 800200c:	f000 ff1e 	bl	8002e4c <HAL_DMA_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002016:	f7ff ff6f 	bl	8001ef8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a0b      	ldr	r2, [pc, #44]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 800201e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002020:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <HAL_ADC_MspInit+0xf8>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	2012      	movs	r0, #18
 800202c:	f000 fed7 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002030:	2012      	movs	r0, #18
 8002032:	f000 fef0 	bl	8002e16 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002036:	bf00      	nop
 8002038:	3728      	adds	r7, #40	@ 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40012000 	.word	0x40012000
 8002044:	40023800 	.word	0x40023800
 8002048:	40020000 	.word	0x40020000
 800204c:	2000025c 	.word	0x2000025c
 8002050:	40026410 	.word	0x40026410

08002054 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	@ 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a19      	ldr	r2, [pc, #100]	@ (80020d8 <HAL_SPI_MspInit+0x84>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d12b      	bne.n	80020ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <HAL_SPI_MspInit+0x88>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	4a17      	ldr	r2, [pc, #92]	@ (80020dc <HAL_SPI_MspInit+0x88>)
 8002080:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002084:	6453      	str	r3, [r2, #68]	@ 0x44
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <HAL_SPI_MspInit+0x88>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_SPI_MspInit+0x88>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	4a10      	ldr	r2, [pc, #64]	@ (80020dc <HAL_SPI_MspInit+0x88>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_SPI_MspInit+0x88>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80020ae:	2338      	movs	r3, #56	@ 0x38
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020be:	2305      	movs	r3, #5
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	@ (80020e0 <HAL_SPI_MspInit+0x8c>)
 80020ca:	f001 f9a9 	bl	8003420 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	@ 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40013000 	.word	0x40013000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020400 	.word	0x40020400

080020e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	@ 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a19      	ldr	r2, [pc, #100]	@ (8002168 <HAL_UART_MspInit+0x84>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d12b      	bne.n	800215e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b18      	ldr	r3, [pc, #96]	@ (800216c <HAL_UART_MspInit+0x88>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	4a17      	ldr	r2, [pc, #92]	@ (800216c <HAL_UART_MspInit+0x88>)
 8002110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002114:	6413      	str	r3, [r2, #64]	@ 0x40
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_UART_MspInit+0x88>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HAL_UART_MspInit+0x88>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	4a10      	ldr	r2, [pc, #64]	@ (800216c <HAL_UART_MspInit+0x88>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	@ 0x30
 8002132:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <HAL_UART_MspInit+0x88>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800213e:	230c      	movs	r3, #12
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800214e:	2307      	movs	r3, #7
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	4805      	ldr	r0, [pc, #20]	@ (8002170 <HAL_UART_MspInit+0x8c>)
 800215a:	f001 f961 	bl	8003420 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800215e:	bf00      	nop
 8002160:	3728      	adds	r7, #40	@ 0x28
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40004400 	.word	0x40004400
 800216c:	40023800 	.word	0x40023800
 8002170:	40020000 	.word	0x40020000

08002174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <NMI_Handler+0x4>

0800217c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <HardFault_Handler+0x4>

08002184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <MemManage_Handler+0x4>

0800218c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <BusFault_Handler+0x4>

08002194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <UsageFault_Handler+0x4>

0800219c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ca:	f000 f96d 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SchTimerInterruptCallback();
 80021ce:	f7ff fae7 	bl	80017a0 <SchTimerInterruptCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021dc:	4802      	ldr	r0, [pc, #8]	@ (80021e8 <ADC_IRQHandler+0x10>)
 80021de:	f000 f9c6 	bl	800256e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000214 	.word	0x20000214

080021ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021f0:	4802      	ldr	r0, [pc, #8]	@ (80021fc <DMA2_Stream0_IRQHandler+0x10>)
 80021f2:	f000 fed9 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000025c 	.word	0x2000025c

08002200 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return 1;
 8002204:	2301      	movs	r3, #1
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_kill>:

int _kill(int pid, int sig)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800221a:	f004 f857 	bl	80062cc <__errno>
 800221e:	4603      	mov	r3, r0
 8002220:	2216      	movs	r2, #22
 8002222:	601a      	str	r2, [r3, #0]
  return -1;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_exit>:

void _exit (int status)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ffe7 	bl	8002210 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002242:	bf00      	nop
 8002244:	e7fd      	b.n	8002242 <_exit+0x12>

08002246 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e00a      	b.n	800226e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002258:	f3af 8000 	nop.w
 800225c:	4601      	mov	r1, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	60ba      	str	r2, [r7, #8]
 8002264:	b2ca      	uxtb	r2, r1
 8002266:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3301      	adds	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	429a      	cmp	r2, r3
 8002274:	dbf0      	blt.n	8002258 <_read+0x12>
  }

  return len;
 8002276:	687b      	ldr	r3, [r7, #4]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	e009      	b.n	80022a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	60ba      	str	r2, [r7, #8]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3301      	adds	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dbf1      	blt.n	8002292 <_write+0x12>
  }
  return len;
 80022ae:	687b      	ldr	r3, [r7, #4]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_close>:

int _close(int file)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022e0:	605a      	str	r2, [r3, #4]
  return 0;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_isatty>:

int _isatty(int file)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022f8:	2301      	movs	r3, #1
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002328:	4a14      	ldr	r2, [pc, #80]	@ (800237c <_sbrk+0x5c>)
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <_sbrk+0x60>)
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002334:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800233c:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <_sbrk+0x64>)
 800233e:	4a12      	ldr	r2, [pc, #72]	@ (8002388 <_sbrk+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	d207      	bcs.n	8002360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002350:	f003 ffbc 	bl	80062cc <__errno>
 8002354:	4603      	mov	r3, r0
 8002356:	220c      	movs	r2, #12
 8002358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	e009      	b.n	8002374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002366:	4b07      	ldr	r3, [pc, #28]	@ (8002384 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <_sbrk+0x64>)
 8002370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20020000 	.word	0x20020000
 8002380:	00000400 	.word	0x00000400
 8002384:	2000035c 	.word	0x2000035c
 8002388:	200004b0 	.word	0x200004b0

0800238c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002390:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <SystemInit+0x20>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002396:	4a05      	ldr	r2, [pc, #20]	@ (80023ac <SystemInit+0x20>)
 8002398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800239c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023b4:	f7ff ffea 	bl	800238c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023b8:	480c      	ldr	r0, [pc, #48]	@ (80023ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ba:	490d      	ldr	r1, [pc, #52]	@ (80023f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023bc:	4a0d      	ldr	r2, [pc, #52]	@ (80023f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c0:	e002      	b.n	80023c8 <LoopCopyDataInit>

080023c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c6:	3304      	adds	r3, #4

080023c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023cc:	d3f9      	bcc.n	80023c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ce:	4a0a      	ldr	r2, [pc, #40]	@ (80023f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d0:	4c0a      	ldr	r4, [pc, #40]	@ (80023fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d4:	e001      	b.n	80023da <LoopFillZerobss>

080023d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d8:	3204      	adds	r2, #4

080023da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023dc:	d3fb      	bcc.n	80023d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80023de:	f003 ff7b 	bl	80062d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e2:	f7ff fbb5 	bl	8001b50 <main>
  bx  lr    
 80023e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80023f4:	08008800 	.word	0x08008800
  ldr r2, =_sbss
 80023f8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80023fc:	200004b0 	.word	0x200004b0

08002400 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <CAN1_RX0_IRQHandler>
	...

08002404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002408:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0d      	ldr	r2, [pc, #52]	@ (8002444 <HAL_Init+0x40>)
 800240e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <HAL_Init+0x40>)
 800241a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800241e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002420:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a07      	ldr	r2, [pc, #28]	@ (8002444 <HAL_Init+0x40>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242c:	2003      	movs	r0, #3
 800242e:	f000 fccb 	bl	8002dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002432:	2000      	movs	r0, #0
 8002434:	f000 f808 	bl	8002448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002438:	f7ff fd64 	bl	8001f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002450:	4b12      	ldr	r3, [pc, #72]	@ (800249c <HAL_InitTick+0x54>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <HAL_InitTick+0x58>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800245e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fce3 	bl	8002e32 <HAL_SYSTICK_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00e      	b.n	8002494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d80a      	bhi.n	8002492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f000 fcab 	bl	8002dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002488:	4a06      	ldr	r2, [pc, #24]	@ (80024a4 <HAL_InitTick+0x5c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000008 	.word	0x20000008
 80024a4:	20000004 	.word	0x20000004

080024a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_IncTick+0x20>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_IncTick+0x24>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <HAL_IncTick+0x24>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000008 	.word	0x20000008
 80024cc:	20000360 	.word	0x20000360

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_GetTick+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000360 	.word	0x20000360

080024e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e033      	b.n	8002566 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff fd24 	bl	8001f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	d118      	bne.n	8002558 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800252e:	f023 0302 	bic.w	r3, r3, #2
 8002532:	f043 0202 	orr.w	r2, r3, #2
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fa6e 	bl	8002a1c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	@ 0x40
 8002556:	e001      	b.n	800255c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d049      	beq.n	8002638 <HAL_ADC_IRQHandler+0xca>
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d046      	beq.n	8002638 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d12b      	bne.n	8002628 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d127      	bne.n	8002628 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d119      	bne.n	8002628 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0220 	bic.w	r2, r2, #32
 8002602:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff fc5b 	bl	8001ee4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f06f 0212 	mvn.w	r2, #18
 8002636:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002646:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d057      	beq.n	80026fe <HAL_ADC_IRQHandler+0x190>
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d054      	beq.n	80026fe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d139      	bne.n	80026ee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002680:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002692:	2b00      	cmp	r3, #0
 8002694:	d12b      	bne.n	80026ee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d124      	bne.n	80026ee <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d11d      	bne.n	80026ee <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d119      	bne.n	80026ee <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026c8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fa90 	bl	8002c14 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 020c 	mvn.w	r2, #12
 80026fc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800270c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d017      	beq.n	8002744 <HAL_ADC_IRQHandler+0x1d6>
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d014      	beq.n	8002744 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d10d      	bne.n	8002744 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f82a 	bl	800278e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f06f 0201 	mvn.w	r2, #1
 8002742:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002752:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d015      	beq.n	8002786 <HAL_ADC_IRQHandler+0x218>
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d012      	beq.n	8002786 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002764:	f043 0202 	orr.w	r2, r3, #2
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0220 	mvn.w	r2, #32
 8002774:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f813 	bl	80027a2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0220 	mvn.w	r2, #32
 8002784:	601a      	str	r2, [r3, #0]
  }
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1c>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e113      	b.n	80029fc <HAL_ADC_ConfigChannel+0x244>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b09      	cmp	r3, #9
 80027e2:	d925      	bls.n	8002830 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68d9      	ldr	r1, [r3, #12]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	3b1e      	subs	r3, #30
 80027fa:	2207      	movs	r2, #7
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43da      	mvns	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	400a      	ands	r2, r1
 8002808:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68d9      	ldr	r1, [r3, #12]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	4618      	mov	r0, r3
 800281c:	4603      	mov	r3, r0
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4403      	add	r3, r0
 8002822:	3b1e      	subs	r3, #30
 8002824:	409a      	lsls	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	e022      	b.n	8002876 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6919      	ldr	r1, [r3, #16]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	2207      	movs	r2, #7
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	400a      	ands	r2, r1
 8002852:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6919      	ldr	r1, [r3, #16]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	b29b      	uxth	r3, r3
 8002864:	4618      	mov	r0, r3
 8002866:	4603      	mov	r3, r0
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4403      	add	r3, r0
 800286c:	409a      	lsls	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b06      	cmp	r3, #6
 800287c:	d824      	bhi.n	80028c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	3b05      	subs	r3, #5
 8002890:	221f      	movs	r2, #31
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	400a      	ands	r2, r1
 800289e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4618      	mov	r0, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	3b05      	subs	r3, #5
 80028ba:	fa00 f203 	lsl.w	r2, r0, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80028c6:	e04c      	b.n	8002962 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	d824      	bhi.n	800291a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	3b23      	subs	r3, #35	@ 0x23
 80028e2:	221f      	movs	r2, #31
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43da      	mvns	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	400a      	ands	r2, r1
 80028f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	4618      	mov	r0, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	3b23      	subs	r3, #35	@ 0x23
 800290c:	fa00 f203 	lsl.w	r2, r0, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	631a      	str	r2, [r3, #48]	@ 0x30
 8002918:	e023      	b.n	8002962 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	3b41      	subs	r3, #65	@ 0x41
 800292c:	221f      	movs	r2, #31
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	400a      	ands	r2, r1
 800293a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	4618      	mov	r0, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	3b41      	subs	r3, #65	@ 0x41
 8002956:	fa00 f203 	lsl.w	r2, r0, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002962:	4b29      	ldr	r3, [pc, #164]	@ (8002a08 <HAL_ADC_ConfigChannel+0x250>)
 8002964:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a28      	ldr	r2, [pc, #160]	@ (8002a0c <HAL_ADC_ConfigChannel+0x254>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d10f      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x1d8>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b12      	cmp	r3, #18
 8002976:	d10b      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1d      	ldr	r2, [pc, #116]	@ (8002a0c <HAL_ADC_ConfigChannel+0x254>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d12b      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x23a>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a10 <HAL_ADC_ConfigChannel+0x258>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d003      	beq.n	80029ac <HAL_ADC_ConfigChannel+0x1f4>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b11      	cmp	r3, #17
 80029aa:	d122      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a11      	ldr	r2, [pc, #68]	@ (8002a10 <HAL_ADC_ConfigChannel+0x258>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d111      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ce:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <HAL_ADC_ConfigChannel+0x25c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a11      	ldr	r2, [pc, #68]	@ (8002a18 <HAL_ADC_ConfigChannel+0x260>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	0c9a      	lsrs	r2, r3, #18
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029e4:	e002      	b.n	80029ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	40012300 	.word	0x40012300
 8002a0c:	40012000 	.word	0x40012000
 8002a10:	10000012 	.word	0x10000012
 8002a14:	20000000 	.word	0x20000000
 8002a18:	431bde83 	.word	0x431bde83

08002a1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a24:	4b79      	ldr	r3, [pc, #484]	@ (8002c0c <ADC_Init+0x1f0>)
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	021a      	lsls	r2, r3, #8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6899      	ldr	r1, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	4a58      	ldr	r2, [pc, #352]	@ (8002c10 <ADC_Init+0x1f4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d022      	beq.n	8002afa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ac2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	e00f      	b.n	8002b1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b18:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0202 	bic.w	r2, r2, #2
 8002b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6899      	ldr	r1, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7e1b      	ldrb	r3, [r3, #24]
 8002b34:	005a      	lsls	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01b      	beq.n	8002b80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b56:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	3b01      	subs	r3, #1
 8002b74:	035a      	lsls	r2, r3, #13
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	e007      	b.n	8002b90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b8e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	051a      	lsls	r2, r3, #20
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6899      	ldr	r1, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bd2:	025a      	lsls	r2, r3, #9
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6899      	ldr	r1, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	029a      	lsls	r2, r3, #10
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	609a      	str	r2, [r3, #8]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40012300 	.word	0x40012300
 8002c10:	0f000001 	.word	0x0f000001

08002c14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c38:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c74:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <__NVIC_GetPriorityGrouping+0x18>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 0307 	and.w	r3, r3, #7
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	db0b      	blt.n	8002cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4907      	ldr	r1, [pc, #28]	@ (8002cc4 <__NVIC_EnableIRQ+0x38>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2001      	movs	r0, #1
 8002cae:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000e100 	.word	0xe000e100

08002cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	6039      	str	r1, [r7, #0]
 8002cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	db0a      	blt.n	8002cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	490c      	ldr	r1, [pc, #48]	@ (8002d14 <__NVIC_SetPriority+0x4c>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	440b      	add	r3, r1
 8002cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf0:	e00a      	b.n	8002d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4908      	ldr	r1, [pc, #32]	@ (8002d18 <__NVIC_SetPriority+0x50>)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	3b04      	subs	r3, #4
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	440b      	add	r3, r1
 8002d06:	761a      	strb	r2, [r3, #24]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000e100 	.word	0xe000e100
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f1c3 0307 	rsb	r3, r3, #7
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	bf28      	it	cs
 8002d3a:	2304      	movcs	r3, #4
 8002d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3304      	adds	r3, #4
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d902      	bls.n	8002d4c <NVIC_EncodePriority+0x30>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3b03      	subs	r3, #3
 8002d4a:	e000      	b.n	8002d4e <NVIC_EncodePriority+0x32>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	401a      	ands	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	4313      	orrs	r3, r2
         );
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3724      	adds	r7, #36	@ 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d94:	d301      	bcc.n	8002d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00f      	b.n	8002dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <SysTick_Config+0x40>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da2:	210f      	movs	r1, #15
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	f7ff ff8e 	bl	8002cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <SysTick_Config+0x40>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db2:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <SysTick_Config+0x40>)
 8002db4:	2207      	movs	r2, #7
 8002db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	e000e010 	.word	0xe000e010

08002dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff29 	bl	8002c28 <__NVIC_SetPriorityGrouping>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df0:	f7ff ff3e 	bl	8002c70 <__NVIC_GetPriorityGrouping>
 8002df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	6978      	ldr	r0, [r7, #20]
 8002dfc:	f7ff ff8e 	bl	8002d1c <NVIC_EncodePriority>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff5d 	bl	8002cc8 <__NVIC_SetPriority>
}
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff31 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ffa2 	bl	8002d84 <SysTick_Config>
 8002e40:	4603      	mov	r3, r0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e58:	f7ff fb3a 	bl	80024d0 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e099      	b.n	8002f9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e88:	e00f      	b.n	8002eaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8a:	f7ff fb21 	bl	80024d0 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d908      	bls.n	8002eaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e078      	b.n	8002f9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e8      	bne.n	8002e8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4b38      	ldr	r3, [pc, #224]	@ (8002fa4 <HAL_DMA_Init+0x158>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d107      	bne.n	8002f14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0307 	bic.w	r3, r3, #7
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d117      	bne.n	8002f6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00e      	beq.n	8002f6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f9e9 	bl	8003328 <DMA_CheckFifoParam>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2240      	movs	r2, #64	@ 0x40
 8002f60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e016      	b.n	8002f9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f9a0 	bl	80032bc <DMA_CalcBaseAndBitshift>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	223f      	movs	r2, #63	@ 0x3f
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	f010803f 	.word	0xf010803f

08002fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fb4:	4b8e      	ldr	r3, [pc, #568]	@ (80031f0 <HAL_DMA_IRQHandler+0x248>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a8e      	ldr	r2, [pc, #568]	@ (80031f4 <HAL_DMA_IRQHandler+0x24c>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0a9b      	lsrs	r3, r3, #10
 8002fc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01a      	beq.n	8003014 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0204 	bic.w	r2, r2, #4
 8002ffa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003000:	2208      	movs	r2, #8
 8003002:	409a      	lsls	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003018:	2201      	movs	r2, #1
 800301a:	409a      	lsls	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d012      	beq.n	800304a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	2201      	movs	r2, #1
 8003038:	409a      	lsls	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003042:	f043 0202 	orr.w	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304e:	2204      	movs	r2, #4
 8003050:	409a      	lsls	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d012      	beq.n	8003080 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306c:	2204      	movs	r2, #4
 800306e:	409a      	lsls	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	2210      	movs	r2, #16
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d043      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d03c      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a2:	2210      	movs	r2, #16
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d018      	beq.n	80030ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d024      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	e01f      	b.n	8003118 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01b      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
 80030e8:	e016      	b.n	8003118 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0208 	bic.w	r2, r2, #8
 8003106:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	2220      	movs	r2, #32
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 808f 	beq.w	8003248 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8087 	beq.w	8003248 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313e:	2220      	movs	r2, #32
 8003140:	409a      	lsls	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b05      	cmp	r3, #5
 8003150:	d136      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0216 	bic.w	r2, r2, #22
 8003160:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003170:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_DMA_IRQHandler+0x1da>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0208 	bic.w	r2, r2, #8
 8003190:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	223f      	movs	r2, #63	@ 0x3f
 8003198:	409a      	lsls	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d07e      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
        }
        return;
 80031be:	e079      	b.n	80032b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01d      	beq.n	800320a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10d      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d031      	beq.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
 80031ec:	e02c      	b.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
 80031ee:	bf00      	nop
 80031f0:	20000000 	.word	0x20000000
 80031f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d023      	beq.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
 8003208:	e01e      	b.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10f      	bne.n	8003238 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0210 	bic.w	r2, r2, #16
 8003226:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324c:	2b00      	cmp	r3, #0
 800324e:	d032      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d022      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2205      	movs	r2, #5
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	3301      	adds	r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	429a      	cmp	r2, r3
 800327e:	d307      	bcc.n	8003290 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f2      	bne.n	8003274 <HAL_DMA_IRQHandler+0x2cc>
 800328e:	e000      	b.n	8003292 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003290:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
 80032b2:	e000      	b.n	80032b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032b4:	bf00      	nop
    }
  }
}
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	3b10      	subs	r3, #16
 80032cc:	4a14      	ldr	r2, [pc, #80]	@ (8003320 <DMA_CalcBaseAndBitshift+0x64>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032d6:	4a13      	ldr	r2, [pc, #76]	@ (8003324 <DMA_CalcBaseAndBitshift+0x68>)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d909      	bls.n	80032fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032f2:	f023 0303 	bic.w	r3, r3, #3
 80032f6:	1d1a      	adds	r2, r3, #4
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80032fc:	e007      	b.n	800330e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	aaaaaaab 	.word	0xaaaaaaab
 8003324:	08008478 	.word	0x08008478

08003328 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d11f      	bne.n	8003382 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d856      	bhi.n	80033f6 <DMA_CheckFifoParam+0xce>
 8003348:	a201      	add	r2, pc, #4	@ (adr r2, 8003350 <DMA_CheckFifoParam+0x28>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003361 	.word	0x08003361
 8003354:	08003373 	.word	0x08003373
 8003358:	08003361 	.word	0x08003361
 800335c:	080033f7 	.word	0x080033f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d046      	beq.n	80033fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003370:	e043      	b.n	80033fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003376:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800337a:	d140      	bne.n	80033fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003380:	e03d      	b.n	80033fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800338a:	d121      	bne.n	80033d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b03      	cmp	r3, #3
 8003390:	d837      	bhi.n	8003402 <DMA_CheckFifoParam+0xda>
 8003392:	a201      	add	r2, pc, #4	@ (adr r2, 8003398 <DMA_CheckFifoParam+0x70>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033a9 	.word	0x080033a9
 800339c:	080033af 	.word	0x080033af
 80033a0:	080033a9 	.word	0x080033a9
 80033a4:	080033c1 	.word	0x080033c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      break;
 80033ac:	e030      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d025      	beq.n	8003406 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033be:	e022      	b.n	8003406 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033c8:	d11f      	bne.n	800340a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ce:	e01c      	b.n	800340a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d903      	bls.n	80033de <DMA_CheckFifoParam+0xb6>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d003      	beq.n	80033e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033dc:	e018      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
      break;
 80033e2:	e015      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00e      	beq.n	800340e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
      break;
 80033f4:	e00b      	b.n	800340e <DMA_CheckFifoParam+0xe6>
      break;
 80033f6:	bf00      	nop
 80033f8:	e00a      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      break;
 80033fa:	bf00      	nop
 80033fc:	e008      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      break;
 80033fe:	bf00      	nop
 8003400:	e006      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      break;
 8003402:	bf00      	nop
 8003404:	e004      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      break;
 8003406:	bf00      	nop
 8003408:	e002      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      break;   
 800340a:	bf00      	nop
 800340c:	e000      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
      break;
 800340e:	bf00      	nop
    }
  } 
  
  return status; 
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop

08003420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	@ 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	e165      	b.n	8003708 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800343c:	2201      	movs	r2, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	f040 8154 	bne.w	8003702 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d005      	beq.n	8003472 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346e:	2b02      	cmp	r3, #2
 8003470:	d130      	bne.n	80034d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a8:	2201      	movs	r2, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 0201 	and.w	r2, r3, #1
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d017      	beq.n	8003510 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d123      	bne.n	8003564 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	08da      	lsrs	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3208      	adds	r2, #8
 8003524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	220f      	movs	r2, #15
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	08da      	lsrs	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3208      	adds	r2, #8
 800355e:	69b9      	ldr	r1, [r7, #24]
 8003560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	2203      	movs	r2, #3
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0203 	and.w	r2, r3, #3
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80ae 	beq.w	8003702 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003720 <HAL_GPIO_Init+0x300>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003720 <HAL_GPIO_Init+0x300>)
 80035b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035b6:	4b5a      	ldr	r3, [pc, #360]	@ (8003720 <HAL_GPIO_Init+0x300>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035c2:	4a58      	ldr	r2, [pc, #352]	@ (8003724 <HAL_GPIO_Init+0x304>)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	3302      	adds	r3, #2
 80035ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	220f      	movs	r2, #15
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003728 <HAL_GPIO_Init+0x308>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d025      	beq.n	800363a <HAL_GPIO_Init+0x21a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4e      	ldr	r2, [pc, #312]	@ (800372c <HAL_GPIO_Init+0x30c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01f      	beq.n	8003636 <HAL_GPIO_Init+0x216>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003730 <HAL_GPIO_Init+0x310>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d019      	beq.n	8003632 <HAL_GPIO_Init+0x212>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4c      	ldr	r2, [pc, #304]	@ (8003734 <HAL_GPIO_Init+0x314>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_GPIO_Init+0x20e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4b      	ldr	r2, [pc, #300]	@ (8003738 <HAL_GPIO_Init+0x318>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00d      	beq.n	800362a <HAL_GPIO_Init+0x20a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4a      	ldr	r2, [pc, #296]	@ (800373c <HAL_GPIO_Init+0x31c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <HAL_GPIO_Init+0x206>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a49      	ldr	r2, [pc, #292]	@ (8003740 <HAL_GPIO_Init+0x320>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_GPIO_Init+0x202>
 800361e:	2306      	movs	r3, #6
 8003620:	e00c      	b.n	800363c <HAL_GPIO_Init+0x21c>
 8003622:	2307      	movs	r3, #7
 8003624:	e00a      	b.n	800363c <HAL_GPIO_Init+0x21c>
 8003626:	2305      	movs	r3, #5
 8003628:	e008      	b.n	800363c <HAL_GPIO_Init+0x21c>
 800362a:	2304      	movs	r3, #4
 800362c:	e006      	b.n	800363c <HAL_GPIO_Init+0x21c>
 800362e:	2303      	movs	r3, #3
 8003630:	e004      	b.n	800363c <HAL_GPIO_Init+0x21c>
 8003632:	2302      	movs	r3, #2
 8003634:	e002      	b.n	800363c <HAL_GPIO_Init+0x21c>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_GPIO_Init+0x21c>
 800363a:	2300      	movs	r3, #0
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	f002 0203 	and.w	r2, r2, #3
 8003642:	0092      	lsls	r2, r2, #2
 8003644:	4093      	lsls	r3, r2
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800364c:	4935      	ldr	r1, [pc, #212]	@ (8003724 <HAL_GPIO_Init+0x304>)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	3302      	adds	r3, #2
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800365a:	4b3a      	ldr	r3, [pc, #232]	@ (8003744 <HAL_GPIO_Init+0x324>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800367e:	4a31      	ldr	r2, [pc, #196]	@ (8003744 <HAL_GPIO_Init+0x324>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003684:	4b2f      	ldr	r3, [pc, #188]	@ (8003744 <HAL_GPIO_Init+0x324>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a8:	4a26      	ldr	r2, [pc, #152]	@ (8003744 <HAL_GPIO_Init+0x324>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ae:	4b25      	ldr	r3, [pc, #148]	@ (8003744 <HAL_GPIO_Init+0x324>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003744 <HAL_GPIO_Init+0x324>)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003744 <HAL_GPIO_Init+0x324>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036fc:	4a11      	ldr	r2, [pc, #68]	@ (8003744 <HAL_GPIO_Init+0x324>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3301      	adds	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b0f      	cmp	r3, #15
 800370c:	f67f ae96 	bls.w	800343c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3724      	adds	r7, #36	@ 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800
 8003724:	40013800 	.word	0x40013800
 8003728:	40020000 	.word	0x40020000
 800372c:	40020400 	.word	0x40020400
 8003730:	40020800 	.word	0x40020800
 8003734:	40020c00 	.word	0x40020c00
 8003738:	40021000 	.word	0x40021000
 800373c:	40021400 	.word	0x40021400
 8003740:	40021800 	.word	0x40021800
 8003744:	40013c00 	.word	0x40013c00

08003748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	807b      	strh	r3, [r7, #2]
 8003754:	4613      	mov	r3, r2
 8003756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003758:	787b      	ldrb	r3, [r7, #1]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003764:	e003      	b.n	800376e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003766:	887b      	ldrh	r3, [r7, #2]
 8003768:	041a      	lsls	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	619a      	str	r2, [r3, #24]
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0cc      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b68      	ldr	r3, [pc, #416]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d90c      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b65      	ldr	r3, [pc, #404]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b63      	ldr	r3, [pc, #396]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b8      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	4b59      	ldr	r3, [pc, #356]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a58      	ldr	r2, [pc, #352]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e8:	4b53      	ldr	r3, [pc, #332]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a52      	ldr	r2, [pc, #328]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b50      	ldr	r3, [pc, #320]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	494d      	ldr	r1, [pc, #308]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d044      	beq.n	800389c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b47      	ldr	r3, [pc, #284]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d119      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d003      	beq.n	800383a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003836:	2b03      	cmp	r3, #3
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b3f      	ldr	r3, [pc, #252]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	4b3b      	ldr	r3, [pc, #236]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e067      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b37      	ldr	r3, [pc, #220]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4934      	ldr	r1, [pc, #208]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386c:	f7fe fe30 	bl	80024d0 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fe fe2c 	bl	80024d0 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e04f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b2b      	ldr	r3, [pc, #172]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b25      	ldr	r3, [pc, #148]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d20c      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b22      	ldr	r3, [pc, #136]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e032      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4916      	ldr	r1, [pc, #88]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ee:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	490e      	ldr	r1, [pc, #56]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003902:	f000 f855 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003906:	4602      	mov	r2, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	490a      	ldr	r1, [pc, #40]	@ (800393c <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	5ccb      	ldrb	r3, [r1, r3]
 8003916:	fa22 f303 	lsr.w	r3, r2, r3
 800391a:	4a09      	ldr	r2, [pc, #36]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800391e:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe fd90 	bl	8002448 <HAL_InitTick>

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023c00 	.word	0x40023c00
 8003938:	40023800 	.word	0x40023800
 800393c:	08008460 	.word	0x08008460
 8003940:	20000000 	.word	0x20000000
 8003944:	20000004 	.word	0x20000004

08003948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <HAL_RCC_GetHCLKFreq+0x14>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000000 	.word	0x20000000

08003960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003964:	f7ff fff0 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0a9b      	lsrs	r3, r3, #10
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4903      	ldr	r1, [pc, #12]	@ (8003984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40023800 	.word	0x40023800
 8003984:	08008470 	.word	0x08008470

08003988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800398c:	f7ff ffdc 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0b5b      	lsrs	r3, r3, #13
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4903      	ldr	r1, [pc, #12]	@ (80039ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	08008470 	.word	0x08008470

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b4:	b0ae      	sub	sp, #184	@ 0xb8
 80039b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d6:	4bcb      	ldr	r3, [pc, #812]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x354>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	f200 8206 	bhi.w	8003df0 <HAL_RCC_GetSysClockFreq+0x440>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a21 	.word	0x08003a21
 80039f0:	08003df1 	.word	0x08003df1
 80039f4:	08003df1 	.word	0x08003df1
 80039f8:	08003df1 	.word	0x08003df1
 80039fc:	08003a29 	.word	0x08003a29
 8003a00:	08003df1 	.word	0x08003df1
 8003a04:	08003df1 	.word	0x08003df1
 8003a08:	08003df1 	.word	0x08003df1
 8003a0c:	08003a31 	.word	0x08003a31
 8003a10:	08003df1 	.word	0x08003df1
 8003a14:	08003df1 	.word	0x08003df1
 8003a18:	08003df1 	.word	0x08003df1
 8003a1c:	08003c21 	.word	0x08003c21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4bb9      	ldr	r3, [pc, #740]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003a26:	e1e7      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a28:	4bb8      	ldr	r3, [pc, #736]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a2e:	e1e3      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a30:	4bb4      	ldr	r3, [pc, #720]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a3c:	4bb1      	ldr	r3, [pc, #708]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d071      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a48:	4bae      	ldr	r3, [pc, #696]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a54:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a6e:	4622      	mov	r2, r4
 8003a70:	462b      	mov	r3, r5
 8003a72:	f04f 0000 	mov.w	r0, #0
 8003a76:	f04f 0100 	mov.w	r1, #0
 8003a7a:	0159      	lsls	r1, r3, #5
 8003a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a80:	0150      	lsls	r0, r2, #5
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4621      	mov	r1, r4
 8003a88:	1a51      	subs	r1, r2, r1
 8003a8a:	6439      	str	r1, [r7, #64]	@ 0x40
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	018b      	lsls	r3, r1, #6
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aaa:	4641      	mov	r1, r8
 8003aac:	018a      	lsls	r2, r1, #6
 8003aae:	4641      	mov	r1, r8
 8003ab0:	1a51      	subs	r1, r2, r1
 8003ab2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003ac8:	4649      	mov	r1, r9
 8003aca:	00cb      	lsls	r3, r1, #3
 8003acc:	4641      	mov	r1, r8
 8003ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad2:	4641      	mov	r1, r8
 8003ad4:	00ca      	lsls	r2, r1, #3
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	4622      	mov	r2, r4
 8003ade:	189b      	adds	r3, r3, r2
 8003ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ae2:	462b      	mov	r3, r5
 8003ae4:	460a      	mov	r2, r1
 8003ae6:	eb42 0303 	adc.w	r3, r2, r3
 8003aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003af8:	4629      	mov	r1, r5
 8003afa:	024b      	lsls	r3, r1, #9
 8003afc:	4621      	mov	r1, r4
 8003afe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b02:	4621      	mov	r1, r4
 8003b04:	024a      	lsls	r2, r1, #9
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b1c:	f7fd f864 	bl	8000be8 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b2a:	e067      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2c:	4b75      	ldr	r3, [pc, #468]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	099b      	lsrs	r3, r3, #6
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b38:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b46:	2300      	movs	r3, #0
 8003b48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003b4e:	4622      	mov	r2, r4
 8003b50:	462b      	mov	r3, r5
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	0159      	lsls	r1, r3, #5
 8003b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b60:	0150      	lsls	r0, r2, #5
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4621      	mov	r1, r4
 8003b68:	1a51      	subs	r1, r2, r1
 8003b6a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003b80:	4649      	mov	r1, r9
 8003b82:	018b      	lsls	r3, r1, #6
 8003b84:	4641      	mov	r1, r8
 8003b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b8a:	4641      	mov	r1, r8
 8003b8c:	018a      	lsls	r2, r1, #6
 8003b8e:	4641      	mov	r1, r8
 8003b90:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b94:	4649      	mov	r1, r9
 8003b96:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ba6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003baa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bae:	4692      	mov	sl, r2
 8003bb0:	469b      	mov	fp, r3
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	eb1a 0303 	adds.w	r3, sl, r3
 8003bb8:	623b      	str	r3, [r7, #32]
 8003bba:	462b      	mov	r3, r5
 8003bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003bce:	4629      	mov	r1, r5
 8003bd0:	028b      	lsls	r3, r1, #10
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd8:	4621      	mov	r1, r4
 8003bda:	028a      	lsls	r2, r1, #10
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003be4:	2200      	movs	r2, #0
 8003be6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003be8:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003bee:	f7fc fffb 	bl	8000be8 <__aeabi_uldivmod>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bfc:	4b41      	ldr	r3, [pc, #260]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	3301      	adds	r3, #1
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c1e:	e0eb      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c20:	4b38      	ldr	r3, [pc, #224]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c2c:	4b35      	ldr	r3, [pc, #212]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d06b      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c38:	4b32      	ldr	r3, [pc, #200]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	2200      	movs	r2, #0
 8003c40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c54:	4622      	mov	r2, r4
 8003c56:	462b      	mov	r3, r5
 8003c58:	f04f 0000 	mov.w	r0, #0
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	0159      	lsls	r1, r3, #5
 8003c62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c66:	0150      	lsls	r0, r2, #5
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	1a51      	subs	r1, r2, r1
 8003c70:	61b9      	str	r1, [r7, #24]
 8003c72:	4629      	mov	r1, r5
 8003c74:	eb63 0301 	sbc.w	r3, r3, r1
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c86:	4659      	mov	r1, fp
 8003c88:	018b      	lsls	r3, r1, #6
 8003c8a:	4651      	mov	r1, sl
 8003c8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c90:	4651      	mov	r1, sl
 8003c92:	018a      	lsls	r2, r1, #6
 8003c94:	4651      	mov	r1, sl
 8003c96:	ebb2 0801 	subs.w	r8, r2, r1
 8003c9a:	4659      	mov	r1, fp
 8003c9c:	eb63 0901 	sbc.w	r9, r3, r1
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cb4:	4690      	mov	r8, r2
 8003cb6:	4699      	mov	r9, r3
 8003cb8:	4623      	mov	r3, r4
 8003cba:	eb18 0303 	adds.w	r3, r8, r3
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	462b      	mov	r3, r5
 8003cc2:	eb49 0303 	adc.w	r3, r9, r3
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	024b      	lsls	r3, r1, #9
 8003cd8:	4621      	mov	r1, r4
 8003cda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cde:	4621      	mov	r1, r4
 8003ce0:	024a      	lsls	r2, r1, #9
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cea:	2200      	movs	r2, #0
 8003cec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003cf0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cf4:	f7fc ff78 	bl	8000be8 <__aeabi_uldivmod>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d02:	e065      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x420>
 8003d04:	40023800 	.word	0x40023800
 8003d08:	00f42400 	.word	0x00f42400
 8003d0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d10:	4b3d      	ldr	r3, [pc, #244]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	099b      	lsrs	r3, r3, #6
 8003d16:	2200      	movs	r2, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d20:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d22:	2300      	movs	r3, #0
 8003d24:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d2a:	4642      	mov	r2, r8
 8003d2c:	464b      	mov	r3, r9
 8003d2e:	f04f 0000 	mov.w	r0, #0
 8003d32:	f04f 0100 	mov.w	r1, #0
 8003d36:	0159      	lsls	r1, r3, #5
 8003d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d3c:	0150      	lsls	r0, r2, #5
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4641      	mov	r1, r8
 8003d44:	1a51      	subs	r1, r2, r1
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	4649      	mov	r1, r9
 8003d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	018b      	lsls	r3, r1, #6
 8003d60:	4651      	mov	r1, sl
 8003d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d66:	4651      	mov	r1, sl
 8003d68:	018a      	lsls	r2, r1, #6
 8003d6a:	4651      	mov	r1, sl
 8003d6c:	1a54      	subs	r4, r2, r1
 8003d6e:	4659      	mov	r1, fp
 8003d70:	eb63 0501 	sbc.w	r5, r3, r1
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	00eb      	lsls	r3, r5, #3
 8003d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d82:	00e2      	lsls	r2, r4, #3
 8003d84:	4614      	mov	r4, r2
 8003d86:	461d      	mov	r5, r3
 8003d88:	4643      	mov	r3, r8
 8003d8a:	18e3      	adds	r3, r4, r3
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	464b      	mov	r3, r9
 8003d90:	eb45 0303 	adc.w	r3, r5, r3
 8003d94:	607b      	str	r3, [r7, #4]
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003da2:	4629      	mov	r1, r5
 8003da4:	028b      	lsls	r3, r1, #10
 8003da6:	4621      	mov	r1, r4
 8003da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dac:	4621      	mov	r1, r4
 8003dae:	028a      	lsls	r2, r1, #10
 8003db0:	4610      	mov	r0, r2
 8003db2:	4619      	mov	r1, r3
 8003db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003db8:	2200      	movs	r2, #0
 8003dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dbc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003dc2:	f7fc ff11 	bl	8000be8 <__aeabi_uldivmod>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4613      	mov	r3, r2
 8003dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	0f1b      	lsrs	r3, r3, #28
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003dde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003de2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003dee:	e003      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df0:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003df2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003df6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	37b8      	adds	r7, #184	@ 0xb8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	00f42400 	.word	0x00f42400

08003e10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e28d      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8083 	beq.w	8003f36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e30:	4b94      	ldr	r3, [pc, #592]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d019      	beq.n	8003e70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e3c:	4b91      	ldr	r3, [pc, #580]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d106      	bne.n	8003e56 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e48:	4b8e      	ldr	r3, [pc, #568]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e54:	d00c      	beq.n	8003e70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e56:	4b8b      	ldr	r3, [pc, #556]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e5e:	2b0c      	cmp	r3, #12
 8003e60:	d112      	bne.n	8003e88 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e62:	4b88      	ldr	r3, [pc, #544]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e6e:	d10b      	bne.n	8003e88 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e70:	4b84      	ldr	r3, [pc, #528]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d05b      	beq.n	8003f34 <HAL_RCC_OscConfig+0x124>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d157      	bne.n	8003f34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e25a      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e90:	d106      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x90>
 8003e92:	4b7c      	ldr	r3, [pc, #496]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a7b      	ldr	r2, [pc, #492]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e01d      	b.n	8003edc <HAL_RCC_OscConfig+0xcc>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0xb4>
 8003eaa:	4b76      	ldr	r3, [pc, #472]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a75      	ldr	r2, [pc, #468]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	4b73      	ldr	r3, [pc, #460]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a72      	ldr	r2, [pc, #456]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e00b      	b.n	8003edc <HAL_RCC_OscConfig+0xcc>
 8003ec4:	4b6f      	ldr	r3, [pc, #444]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a6e      	ldr	r2, [pc, #440]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	4b6c      	ldr	r3, [pc, #432]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6b      	ldr	r2, [pc, #428]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d013      	beq.n	8003f0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe faf4 	bl	80024d0 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eec:	f7fe faf0 	bl	80024d0 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	@ 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e21f      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efe:	4b61      	ldr	r3, [pc, #388]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCC_OscConfig+0xdc>
 8003f0a:	e014      	b.n	8003f36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fae0 	bl	80024d0 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f14:	f7fe fadc 	bl	80024d0 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	@ 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e20b      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f26:	4b57      	ldr	r3, [pc, #348]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x104>
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d06f      	beq.n	8004022 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f42:	4b50      	ldr	r3, [pc, #320]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d017      	beq.n	8003f7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f4e:	4b4d      	ldr	r3, [pc, #308]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d105      	bne.n	8003f66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f66:	4b47      	ldr	r3, [pc, #284]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f6e:	2b0c      	cmp	r3, #12
 8003f70:	d11c      	bne.n	8003fac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f72:	4b44      	ldr	r3, [pc, #272]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d116      	bne.n	8003fac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7e:	4b41      	ldr	r3, [pc, #260]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_RCC_OscConfig+0x186>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e1d3      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f96:	4b3b      	ldr	r3, [pc, #236]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4937      	ldr	r1, [pc, #220]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003faa:	e03a      	b.n	8004022 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d020      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fb4:	4b34      	ldr	r3, [pc, #208]	@ (8004088 <HAL_RCC_OscConfig+0x278>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7fe fa89 	bl	80024d0 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc2:	f7fe fa85 	bl	80024d0 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e1b4      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe0:	4b28      	ldr	r3, [pc, #160]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4925      	ldr	r1, [pc, #148]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	600b      	str	r3, [r1, #0]
 8003ff4:	e015      	b.n	8004022 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ff6:	4b24      	ldr	r3, [pc, #144]	@ (8004088 <HAL_RCC_OscConfig+0x278>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fe fa68 	bl	80024d0 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004004:	f7fe fa64 	bl	80024d0 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e193      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004016:	4b1b      	ldr	r3, [pc, #108]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d036      	beq.n	800409c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d016      	beq.n	8004064 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004036:	4b15      	ldr	r3, [pc, #84]	@ (800408c <HAL_RCC_OscConfig+0x27c>)
 8004038:	2201      	movs	r2, #1
 800403a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403c:	f7fe fa48 	bl	80024d0 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004044:	f7fe fa44 	bl	80024d0 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e173      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004056:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <HAL_RCC_OscConfig+0x274>)
 8004058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x234>
 8004062:	e01b      	b.n	800409c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004064:	4b09      	ldr	r3, [pc, #36]	@ (800408c <HAL_RCC_OscConfig+0x27c>)
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fe fa31 	bl	80024d0 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004070:	e00e      	b.n	8004090 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004072:	f7fe fa2d 	bl	80024d0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d907      	bls.n	8004090 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e15c      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
 8004084:	40023800 	.word	0x40023800
 8004088:	42470000 	.word	0x42470000
 800408c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004090:	4b8a      	ldr	r3, [pc, #552]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1ea      	bne.n	8004072 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8097 	beq.w	80041d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040aa:	2300      	movs	r3, #0
 80040ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ae:	4b83      	ldr	r3, [pc, #524]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	4b7f      	ldr	r3, [pc, #508]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	4a7e      	ldr	r2, [pc, #504]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 80040c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ca:	4b7c      	ldr	r3, [pc, #496]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d6:	2301      	movs	r3, #1
 80040d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040da:	4b79      	ldr	r3, [pc, #484]	@ (80042c0 <HAL_RCC_OscConfig+0x4b0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d118      	bne.n	8004118 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e6:	4b76      	ldr	r3, [pc, #472]	@ (80042c0 <HAL_RCC_OscConfig+0x4b0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a75      	ldr	r2, [pc, #468]	@ (80042c0 <HAL_RCC_OscConfig+0x4b0>)
 80040ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f2:	f7fe f9ed 	bl	80024d0 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fa:	f7fe f9e9 	bl	80024d0 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e118      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410c:	4b6c      	ldr	r3, [pc, #432]	@ (80042c0 <HAL_RCC_OscConfig+0x4b0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d106      	bne.n	800412e <HAL_RCC_OscConfig+0x31e>
 8004120:	4b66      	ldr	r3, [pc, #408]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004124:	4a65      	ldr	r2, [pc, #404]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6713      	str	r3, [r2, #112]	@ 0x70
 800412c:	e01c      	b.n	8004168 <HAL_RCC_OscConfig+0x358>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d10c      	bne.n	8004150 <HAL_RCC_OscConfig+0x340>
 8004136:	4b61      	ldr	r3, [pc, #388]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413a:	4a60      	ldr	r2, [pc, #384]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 800413c:	f043 0304 	orr.w	r3, r3, #4
 8004140:	6713      	str	r3, [r2, #112]	@ 0x70
 8004142:	4b5e      	ldr	r3, [pc, #376]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	4a5d      	ldr	r2, [pc, #372]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	6713      	str	r3, [r2, #112]	@ 0x70
 800414e:	e00b      	b.n	8004168 <HAL_RCC_OscConfig+0x358>
 8004150:	4b5a      	ldr	r3, [pc, #360]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004154:	4a59      	ldr	r2, [pc, #356]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	6713      	str	r3, [r2, #112]	@ 0x70
 800415c:	4b57      	ldr	r3, [pc, #348]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004160:	4a56      	ldr	r2, [pc, #344]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004162:	f023 0304 	bic.w	r3, r3, #4
 8004166:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d015      	beq.n	800419c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fe f9ae 	bl	80024d0 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004176:	e00a      	b.n	800418e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fe f9aa 	bl	80024d0 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e0d7      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418e:	4b4b      	ldr	r3, [pc, #300]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0ee      	beq.n	8004178 <HAL_RCC_OscConfig+0x368>
 800419a:	e014      	b.n	80041c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fe f998 	bl	80024d0 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a4:	f7fe f994 	bl	80024d0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e0c1      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ba:	4b40      	ldr	r3, [pc, #256]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1ee      	bne.n	80041a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d105      	bne.n	80041d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041cc:	4b3b      	ldr	r3, [pc, #236]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	4a3a      	ldr	r2, [pc, #232]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 80041d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80ad 	beq.w	800433c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041e2:	4b36      	ldr	r3, [pc, #216]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d060      	beq.n	80042b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d145      	bne.n	8004282 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f6:	4b33      	ldr	r3, [pc, #204]	@ (80042c4 <HAL_RCC_OscConfig+0x4b4>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fe f968 	bl	80024d0 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004204:	f7fe f964 	bl	80024d0 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e093      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004216:	4b29      	ldr	r3, [pc, #164]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69da      	ldr	r2, [r3, #28]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	019b      	lsls	r3, r3, #6
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	085b      	lsrs	r3, r3, #1
 800423a:	3b01      	subs	r3, #1
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	061b      	lsls	r3, r3, #24
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	071b      	lsls	r3, r3, #28
 800424e:	491b      	ldr	r1, [pc, #108]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004250:	4313      	orrs	r3, r2
 8004252:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004254:	4b1b      	ldr	r3, [pc, #108]	@ (80042c4 <HAL_RCC_OscConfig+0x4b4>)
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425a:	f7fe f939 	bl	80024d0 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004262:	f7fe f935 	bl	80024d0 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e064      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004274:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x452>
 8004280:	e05c      	b.n	800433c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004282:	4b10      	ldr	r3, [pc, #64]	@ (80042c4 <HAL_RCC_OscConfig+0x4b4>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fe f922 	bl	80024d0 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004290:	f7fe f91e 	bl	80024d0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e04d      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <HAL_RCC_OscConfig+0x4ac>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x480>
 80042ae:	e045      	b.n	800433c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d107      	bne.n	80042c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e040      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40007000 	.word	0x40007000
 80042c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004348 <HAL_RCC_OscConfig+0x538>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d030      	beq.n	8004338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d129      	bne.n	8004338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d122      	bne.n	8004338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042f8:	4013      	ands	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004300:	4293      	cmp	r3, r2
 8004302:	d119      	bne.n	8004338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430e:	085b      	lsrs	r3, r3, #1
 8004310:	3b01      	subs	r3, #1
 8004312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004314:	429a      	cmp	r2, r3
 8004316:	d10f      	bne.n	8004338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d107      	bne.n	8004338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40023800 	.word	0x40023800

0800434c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07b      	b.n	8004456 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	d108      	bne.n	8004378 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800436e:	d009      	beq.n	8004384 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	61da      	str	r2, [r3, #28]
 8004376:	e005      	b.n	8004384 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fd fe58 	bl	8002054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004408:	ea42 0103 	orr.w	r1, r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004410:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	f003 0104 	and.w	r1, r3, #4
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	f003 0210 	and.w	r2, r3, #16
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004444:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b088      	sub	sp, #32
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	4613      	mov	r3, r2
 800446c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_SPI_Transmit+0x22>
 800447c:	2302      	movs	r3, #2
 800447e:	e12d      	b.n	80046dc <HAL_SPI_Transmit+0x27e>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004488:	f7fe f822 	bl	80024d0 <HAL_GetTick>
 800448c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800449e:	2302      	movs	r3, #2
 80044a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044a2:	e116      	b.n	80046d2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_Transmit+0x52>
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044b4:	e10d      	b.n	80046d2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2203      	movs	r2, #3
 80044ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	88fa      	ldrh	r2, [r7, #6]
 80044ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044fc:	d10f      	bne.n	800451e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800450c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800451c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004528:	2b40      	cmp	r3, #64	@ 0x40
 800452a:	d007      	beq.n	800453c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800453a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004544:	d14f      	bne.n	80045e6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_SPI_Transmit+0xf6>
 800454e:	8afb      	ldrh	r3, [r7, #22]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d142      	bne.n	80045da <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	881a      	ldrh	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004578:	e02f      	b.n	80045da <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b02      	cmp	r3, #2
 8004586:	d112      	bne.n	80045ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458c:	881a      	ldrh	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004598:	1c9a      	adds	r2, r3, #2
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045ac:	e015      	b.n	80045da <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ae:	f7fd ff8f 	bl	80024d0 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d803      	bhi.n	80045c6 <HAL_SPI_Transmit+0x168>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d102      	bne.n	80045cc <HAL_SPI_Transmit+0x16e>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d106      	bne.n	80045da <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80045d8:	e07b      	b.n	80046d2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1ca      	bne.n	800457a <HAL_SPI_Transmit+0x11c>
 80045e4:	e050      	b.n	8004688 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_SPI_Transmit+0x196>
 80045ee:	8afb      	ldrh	r3, [r7, #22]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d144      	bne.n	800467e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	7812      	ldrb	r2, [r2, #0]
 8004600:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800461a:	e030      	b.n	800467e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b02      	cmp	r3, #2
 8004628:	d113      	bne.n	8004652 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004650:	e015      	b.n	800467e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004652:	f7fd ff3d 	bl	80024d0 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d803      	bhi.n	800466a <HAL_SPI_Transmit+0x20c>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d102      	bne.n	8004670 <HAL_SPI_Transmit+0x212>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800467c:	e029      	b.n	80046d2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1c9      	bne.n	800461c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	6839      	ldr	r1, [r7, #0]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fbed 	bl	8004e6c <SPI_EndRxTxTransaction>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046a6:	2300      	movs	r3, #0
 80046a8:	613b      	str	r3, [r7, #16]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e003      	b.n	80046d2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80046da:	7ffb      	ldrb	r3, [r7, #31]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3720      	adds	r7, #32
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d002      	beq.n	800470a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004704:	2302      	movs	r3, #2
 8004706:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004708:	e0fb      	b.n	8004902 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004712:	d112      	bne.n	800473a <HAL_SPI_Receive+0x56>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10e      	bne.n	800473a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2204      	movs	r2, #4
 8004720:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004724:	88fa      	ldrh	r2, [r7, #6]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f8ef 	bl	8004914 <HAL_SPI_TransmitReceive>
 8004736:	4603      	mov	r3, r0
 8004738:	e0e8      	b.n	800490c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_SPI_Receive+0x64>
 8004744:	2302      	movs	r3, #2
 8004746:	e0e1      	b.n	800490c <HAL_SPI_Receive+0x228>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004750:	f7fd febe 	bl	80024d0 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_SPI_Receive+0x7e>
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d102      	bne.n	8004768 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004766:	e0cc      	b.n	8004902 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2204      	movs	r2, #4
 800476c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	88fa      	ldrh	r2, [r7, #6]
 8004780:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	88fa      	ldrh	r2, [r7, #6]
 8004786:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ae:	d10f      	bne.n	80047d0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047da:	2b40      	cmp	r3, #64	@ 0x40
 80047dc:	d007      	beq.n	80047ee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d16a      	bne.n	80048cc <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80047f6:	e032      	b.n	800485e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b01      	cmp	r3, #1
 8004804:	d115      	bne.n	8004832 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f103 020c 	add.w	r2, r3, #12
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004812:	7812      	ldrb	r2, [r2, #0]
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004830:	e015      	b.n	800485e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004832:	f7fd fe4d 	bl	80024d0 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d803      	bhi.n	800484a <HAL_SPI_Receive+0x166>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d102      	bne.n	8004850 <HAL_SPI_Receive+0x16c>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d106      	bne.n	800485e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800485c:	e051      	b.n	8004902 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1c7      	bne.n	80047f8 <HAL_SPI_Receive+0x114>
 8004868:	e035      	b.n	80048d6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	d113      	bne.n	80048a0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004882:	b292      	uxth	r2, r2
 8004884:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488a:	1c9a      	adds	r2, r3, #2
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800489e:	e015      	b.n	80048cc <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a0:	f7fd fe16 	bl	80024d0 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d803      	bhi.n	80048b8 <HAL_SPI_Receive+0x1d4>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b6:	d102      	bne.n	80048be <HAL_SPI_Receive+0x1da>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80048ca:	e01a      	b.n	8004902 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1c9      	bne.n	800486a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fa60 	bl	8004da0 <SPI_EndRxTransaction>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	75fb      	strb	r3, [r7, #23]
 80048f8:	e003      	b.n	8004902 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800490a:	7dfb      	ldrb	r3, [r7, #23]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08c      	sub	sp, #48	@ 0x30
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004922:	2301      	movs	r3, #1
 8004924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_SPI_TransmitReceive+0x26>
 8004936:	2302      	movs	r3, #2
 8004938:	e198      	b.n	8004c6c <HAL_SPI_TransmitReceive+0x358>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004942:	f7fd fdc5 	bl	80024d0 <HAL_GetTick>
 8004946:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800494e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004958:	887b      	ldrh	r3, [r7, #2]
 800495a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800495c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004960:	2b01      	cmp	r3, #1
 8004962:	d00f      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x70>
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800496a:	d107      	bne.n	800497c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d103      	bne.n	800497c <HAL_SPI_TransmitReceive+0x68>
 8004974:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004978:	2b04      	cmp	r3, #4
 800497a:	d003      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800497c:	2302      	movs	r3, #2
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004982:	e16d      	b.n	8004c60 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x82>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x82>
 8004990:	887b      	ldrh	r3, [r7, #2]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800499c:	e160      	b.n	8004c60 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2205      	movs	r2, #5
 80049ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	887a      	ldrh	r2, [r7, #2]
 80049c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	887a      	ldrh	r2, [r7, #2]
 80049c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	887a      	ldrh	r2, [r7, #2]
 80049d4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	887a      	ldrh	r2, [r7, #2]
 80049da:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f2:	2b40      	cmp	r3, #64	@ 0x40
 80049f4:	d007      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a0e:	d17c      	bne.n	8004b0a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0x10a>
 8004a18:	8b7b      	ldrh	r3, [r7, #26]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d16a      	bne.n	8004af4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a22:	881a      	ldrh	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	1c9a      	adds	r2, r3, #2
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a42:	e057      	b.n	8004af4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d11b      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x176>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d016      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x176>
 8004a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d113      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	881a      	ldrh	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	1c9a      	adds	r2, r3, #2
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d119      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x1b8>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d014      	beq.n	8004acc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aac:	b292      	uxth	r2, r2
 8004aae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004acc:	f7fd fd00 	bl	80024d0 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d80b      	bhi.n	8004af4 <HAL_SPI_TransmitReceive+0x1e0>
 8004adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d007      	beq.n	8004af4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004af2:	e0b5      	b.n	8004c60 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1a2      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x130>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d19d      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x130>
 8004b08:	e080      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_SPI_TransmitReceive+0x204>
 8004b12:	8b7b      	ldrh	r3, [r7, #26]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d16f      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b3e:	e05b      	b.n	8004bf8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d11c      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0x274>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d017      	beq.n	8004b88 <HAL_SPI_TransmitReceive+0x274>
 8004b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d114      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	330c      	adds	r3, #12
 8004b68:	7812      	ldrb	r2, [r2, #0]
 8004b6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d119      	bne.n	8004bca <HAL_SPI_TransmitReceive+0x2b6>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d014      	beq.n	8004bca <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bca:	f7fd fc81 	bl	80024d0 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d803      	bhi.n	8004be2 <HAL_SPI_TransmitReceive+0x2ce>
 8004bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d102      	bne.n	8004be8 <HAL_SPI_TransmitReceive+0x2d4>
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d107      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004bf6:	e033      	b.n	8004c60 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d19e      	bne.n	8004b40 <HAL_SPI_TransmitReceive+0x22c>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d199      	bne.n	8004b40 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f92b 	bl	8004e6c <SPI_EndRxTxTransaction>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d006      	beq.n	8004c2a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004c28:	e01a      	b.n	8004c60 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c56:	e003      	b.n	8004c60 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004c68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3730      	adds	r7, #48	@ 0x30
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c82:	b2db      	uxtb	r3, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ca0:	f7fd fc16 	bl	80024d0 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	4413      	add	r3, r2
 8004cae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cb0:	f7fd fc0e 	bl	80024d0 <HAL_GetTick>
 8004cb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cb6:	4b39      	ldr	r3, [pc, #228]	@ (8004d9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	015b      	lsls	r3, r3, #5
 8004cbc:	0d1b      	lsrs	r3, r3, #20
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	fb02 f303 	mul.w	r3, r2, r3
 8004cc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cc6:	e054      	b.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d050      	beq.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cd0:	f7fd fbfe 	bl	80024d0 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d902      	bls.n	8004ce6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d13d      	bne.n	8004d62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cfe:	d111      	bne.n	8004d24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d08:	d004      	beq.n	8004d14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d12:	d107      	bne.n	8004d24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d2c:	d10f      	bne.n	8004d4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e017      	b.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	bf0c      	ite	eq
 8004d82:	2301      	moveq	r3, #1
 8004d84:	2300      	movne	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d19b      	bne.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3720      	adds	r7, #32
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000000 	.word	0x20000000

08004da0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004db4:	d111      	bne.n	8004dda <SPI_EndRxTransaction+0x3a>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dbe:	d004      	beq.n	8004dca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc8:	d107      	bne.n	8004dda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dd8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004de2:	d12a      	bne.n	8004e3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dec:	d012      	beq.n	8004e14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2200      	movs	r2, #0
 8004df6:	2180      	movs	r1, #128	@ 0x80
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff ff49 	bl	8004c90 <SPI_WaitFlagStateUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d02d      	beq.n	8004e60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e08:	f043 0220 	orr.w	r2, r3, #32
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e026      	b.n	8004e62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f7ff ff36 	bl	8004c90 <SPI_WaitFlagStateUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01a      	beq.n	8004e60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2e:	f043 0220 	orr.w	r2, r3, #32
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e013      	b.n	8004e62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2200      	movs	r2, #0
 8004e42:	2101      	movs	r1, #1
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff ff23 	bl	8004c90 <SPI_WaitFlagStateUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e54:	f043 0220 	orr.w	r2, r3, #32
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e000      	b.n	8004e62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	2102      	movs	r1, #2
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f7ff ff04 	bl	8004c90 <SPI_WaitFlagStateUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e92:	f043 0220 	orr.w	r2, r3, #32
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e032      	b.n	8004f04 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f0c <SPI_EndRxTxTransaction+0xa0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f10 <SPI_EndRxTxTransaction+0xa4>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	0d5b      	lsrs	r3, r3, #21
 8004eaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ebc:	d112      	bne.n	8004ee4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2180      	movs	r1, #128	@ 0x80
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7ff fee1 	bl	8004c90 <SPI_WaitFlagStateUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d016      	beq.n	8004f02 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed8:	f043 0220 	orr.w	r2, r3, #32
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e00f      	b.n	8004f04 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efa:	2b80      	cmp	r3, #128	@ 0x80
 8004efc:	d0f2      	beq.n	8004ee4 <SPI_EndRxTxTransaction+0x78>
 8004efe:	e000      	b.n	8004f02 <SPI_EndRxTxTransaction+0x96>
        break;
 8004f00:	bf00      	nop
  }

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20000000 	.word	0x20000000
 8004f10:	165e9f81 	.word	0x165e9f81

08004f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e042      	b.n	8004fac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fd f8d2 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2224      	movs	r2, #36	@ 0x24
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f973 	bl	8005244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08a      	sub	sp, #40	@ 0x28
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d175      	bne.n	80050c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_UART_Transmit+0x2c>
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e06e      	b.n	80050c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2221      	movs	r2, #33	@ 0x21
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ff2:	f7fd fa6d 	bl	80024d0 <HAL_GetTick>
 8004ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800500c:	d108      	bne.n	8005020 <HAL_UART_Transmit+0x6c>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	e003      	b.n	8005028 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005028:	e02e      	b.n	8005088 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2200      	movs	r2, #0
 8005032:	2180      	movs	r1, #128	@ 0x80
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f848 	bl	80050ca <UART_WaitOnFlagUntilTimeout>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e03a      	b.n	80050c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	3302      	adds	r3, #2
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	e007      	b.n	800507a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	3301      	adds	r3, #1
 8005078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1cb      	bne.n	800502a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	2140      	movs	r1, #64	@ 0x40
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f814 	bl	80050ca <UART_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e006      	b.n	80050c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e000      	b.n	80050c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b086      	sub	sp, #24
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	4613      	mov	r3, r2
 80050d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050da:	e03b      	b.n	8005154 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d037      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e4:	f7fd f9f4 	bl	80024d0 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	6a3a      	ldr	r2, [r7, #32]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d302      	bcc.n	80050fa <UART_WaitOnFlagUntilTimeout+0x30>
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e03a      	b.n	8005174 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d023      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0x8a>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b80      	cmp	r3, #128	@ 0x80
 8005110:	d020      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b40      	cmp	r3, #64	@ 0x40
 8005116:	d01d      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b08      	cmp	r3, #8
 8005124:	d116      	bne.n	8005154 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f81d 	bl	800517c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2208      	movs	r2, #8
 8005146:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e00f      	b.n	8005174 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4013      	ands	r3, r2
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	429a      	cmp	r2, r3
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	429a      	cmp	r2, r3
 8005170:	d0b4      	beq.n	80050dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b095      	sub	sp, #84	@ 0x54
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800519a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80051a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e5      	bne.n	8005184 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3314      	adds	r3, #20
 80051be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3314      	adds	r3, #20
 80051d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e5      	bne.n	80051b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d119      	bne.n	8005228 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	330c      	adds	r3, #12
 80051fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	e853 3f00 	ldrex	r3, [r3]
 8005202:	60bb      	str	r3, [r7, #8]
   return(result);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f023 0310 	bic.w	r3, r3, #16
 800520a:	647b      	str	r3, [r7, #68]	@ 0x44
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005214:	61ba      	str	r2, [r7, #24]
 8005216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6979      	ldr	r1, [r7, #20]
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	613b      	str	r3, [r7, #16]
   return(result);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e5      	bne.n	80051f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005236:	bf00      	nop
 8005238:	3754      	adds	r7, #84	@ 0x54
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005248:	b0c0      	sub	sp, #256	@ 0x100
 800524a:	af00      	add	r7, sp, #0
 800524c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005260:	68d9      	ldr	r1, [r3, #12]
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	ea40 0301 	orr.w	r3, r0, r1
 800526c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	431a      	orrs	r2, r3
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	431a      	orrs	r2, r3
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800529c:	f021 010c 	bic.w	r1, r1, #12
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052aa:	430b      	orrs	r3, r1
 80052ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052be:	6999      	ldr	r1, [r3, #24]
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	ea40 0301 	orr.w	r3, r0, r1
 80052ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005510 <UART_SetConfig+0x2cc>)
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d005      	beq.n	80052e4 <UART_SetConfig+0xa0>
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b8d      	ldr	r3, [pc, #564]	@ (8005514 <UART_SetConfig+0x2d0>)
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d104      	bne.n	80052ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052e4:	f7fe fb50 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 80052e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80052ec:	e003      	b.n	80052f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ee:	f7fe fb37 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 80052f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005300:	f040 810c 	bne.w	800551c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005308:	2200      	movs	r2, #0
 800530a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800530e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005312:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005316:	4622      	mov	r2, r4
 8005318:	462b      	mov	r3, r5
 800531a:	1891      	adds	r1, r2, r2
 800531c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800531e:	415b      	adcs	r3, r3
 8005320:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005322:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005326:	4621      	mov	r1, r4
 8005328:	eb12 0801 	adds.w	r8, r2, r1
 800532c:	4629      	mov	r1, r5
 800532e:	eb43 0901 	adc.w	r9, r3, r1
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800533e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005346:	4690      	mov	r8, r2
 8005348:	4699      	mov	r9, r3
 800534a:	4623      	mov	r3, r4
 800534c:	eb18 0303 	adds.w	r3, r8, r3
 8005350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005354:	462b      	mov	r3, r5
 8005356:	eb49 0303 	adc.w	r3, r9, r3
 800535a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800535e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800536a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800536e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005372:	460b      	mov	r3, r1
 8005374:	18db      	adds	r3, r3, r3
 8005376:	653b      	str	r3, [r7, #80]	@ 0x50
 8005378:	4613      	mov	r3, r2
 800537a:	eb42 0303 	adc.w	r3, r2, r3
 800537e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005380:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005384:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005388:	f7fb fc2e 	bl	8000be8 <__aeabi_uldivmod>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4b61      	ldr	r3, [pc, #388]	@ (8005518 <UART_SetConfig+0x2d4>)
 8005392:	fba3 2302 	umull	r2, r3, r3, r2
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	011c      	lsls	r4, r3, #4
 800539a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800539e:	2200      	movs	r2, #0
 80053a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053ac:	4642      	mov	r2, r8
 80053ae:	464b      	mov	r3, r9
 80053b0:	1891      	adds	r1, r2, r2
 80053b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80053b4:	415b      	adcs	r3, r3
 80053b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80053bc:	4641      	mov	r1, r8
 80053be:	eb12 0a01 	adds.w	sl, r2, r1
 80053c2:	4649      	mov	r1, r9
 80053c4:	eb43 0b01 	adc.w	fp, r3, r1
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053dc:	4692      	mov	sl, r2
 80053de:	469b      	mov	fp, r3
 80053e0:	4643      	mov	r3, r8
 80053e2:	eb1a 0303 	adds.w	r3, sl, r3
 80053e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053ea:	464b      	mov	r3, r9
 80053ec:	eb4b 0303 	adc.w	r3, fp, r3
 80053f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005400:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005404:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005408:	460b      	mov	r3, r1
 800540a:	18db      	adds	r3, r3, r3
 800540c:	643b      	str	r3, [r7, #64]	@ 0x40
 800540e:	4613      	mov	r3, r2
 8005410:	eb42 0303 	adc.w	r3, r2, r3
 8005414:	647b      	str	r3, [r7, #68]	@ 0x44
 8005416:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800541a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800541e:	f7fb fbe3 	bl	8000be8 <__aeabi_uldivmod>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4611      	mov	r1, r2
 8005428:	4b3b      	ldr	r3, [pc, #236]	@ (8005518 <UART_SetConfig+0x2d4>)
 800542a:	fba3 2301 	umull	r2, r3, r3, r1
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	2264      	movs	r2, #100	@ 0x64
 8005432:	fb02 f303 	mul.w	r3, r2, r3
 8005436:	1acb      	subs	r3, r1, r3
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800543e:	4b36      	ldr	r3, [pc, #216]	@ (8005518 <UART_SetConfig+0x2d4>)
 8005440:	fba3 2302 	umull	r2, r3, r3, r2
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800544c:	441c      	add	r4, r3
 800544e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005452:	2200      	movs	r2, #0
 8005454:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005458:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800545c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005460:	4642      	mov	r2, r8
 8005462:	464b      	mov	r3, r9
 8005464:	1891      	adds	r1, r2, r2
 8005466:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005468:	415b      	adcs	r3, r3
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800546c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005470:	4641      	mov	r1, r8
 8005472:	1851      	adds	r1, r2, r1
 8005474:	6339      	str	r1, [r7, #48]	@ 0x30
 8005476:	4649      	mov	r1, r9
 8005478:	414b      	adcs	r3, r1
 800547a:	637b      	str	r3, [r7, #52]	@ 0x34
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005488:	4659      	mov	r1, fp
 800548a:	00cb      	lsls	r3, r1, #3
 800548c:	4651      	mov	r1, sl
 800548e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005492:	4651      	mov	r1, sl
 8005494:	00ca      	lsls	r2, r1, #3
 8005496:	4610      	mov	r0, r2
 8005498:	4619      	mov	r1, r3
 800549a:	4603      	mov	r3, r0
 800549c:	4642      	mov	r2, r8
 800549e:	189b      	adds	r3, r3, r2
 80054a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054a4:	464b      	mov	r3, r9
 80054a6:	460a      	mov	r2, r1
 80054a8:	eb42 0303 	adc.w	r3, r2, r3
 80054ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80054c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054c4:	460b      	mov	r3, r1
 80054c6:	18db      	adds	r3, r3, r3
 80054c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ca:	4613      	mov	r3, r2
 80054cc:	eb42 0303 	adc.w	r3, r2, r3
 80054d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80054da:	f7fb fb85 	bl	8000be8 <__aeabi_uldivmod>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005518 <UART_SetConfig+0x2d4>)
 80054e4:	fba3 1302 	umull	r1, r3, r3, r2
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	2164      	movs	r1, #100	@ 0x64
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	3332      	adds	r3, #50	@ 0x32
 80054f6:	4a08      	ldr	r2, [pc, #32]	@ (8005518 <UART_SetConfig+0x2d4>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	f003 0207 	and.w	r2, r3, #7
 8005502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4422      	add	r2, r4
 800550a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800550c:	e106      	b.n	800571c <UART_SetConfig+0x4d8>
 800550e:	bf00      	nop
 8005510:	40011000 	.word	0x40011000
 8005514:	40011400 	.word	0x40011400
 8005518:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800551c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005520:	2200      	movs	r2, #0
 8005522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005526:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800552a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800552e:	4642      	mov	r2, r8
 8005530:	464b      	mov	r3, r9
 8005532:	1891      	adds	r1, r2, r2
 8005534:	6239      	str	r1, [r7, #32]
 8005536:	415b      	adcs	r3, r3
 8005538:	627b      	str	r3, [r7, #36]	@ 0x24
 800553a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800553e:	4641      	mov	r1, r8
 8005540:	1854      	adds	r4, r2, r1
 8005542:	4649      	mov	r1, r9
 8005544:	eb43 0501 	adc.w	r5, r3, r1
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	00eb      	lsls	r3, r5, #3
 8005552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005556:	00e2      	lsls	r2, r4, #3
 8005558:	4614      	mov	r4, r2
 800555a:	461d      	mov	r5, r3
 800555c:	4643      	mov	r3, r8
 800555e:	18e3      	adds	r3, r4, r3
 8005560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005564:	464b      	mov	r3, r9
 8005566:	eb45 0303 	adc.w	r3, r5, r3
 800556a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800556e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800557a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800558a:	4629      	mov	r1, r5
 800558c:	008b      	lsls	r3, r1, #2
 800558e:	4621      	mov	r1, r4
 8005590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005594:	4621      	mov	r1, r4
 8005596:	008a      	lsls	r2, r1, #2
 8005598:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800559c:	f7fb fb24 	bl	8000be8 <__aeabi_uldivmod>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4b60      	ldr	r3, [pc, #384]	@ (8005728 <UART_SetConfig+0x4e4>)
 80055a6:	fba3 2302 	umull	r2, r3, r3, r2
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	011c      	lsls	r4, r3, #4
 80055ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80055c0:	4642      	mov	r2, r8
 80055c2:	464b      	mov	r3, r9
 80055c4:	1891      	adds	r1, r2, r2
 80055c6:	61b9      	str	r1, [r7, #24]
 80055c8:	415b      	adcs	r3, r3
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055d0:	4641      	mov	r1, r8
 80055d2:	1851      	adds	r1, r2, r1
 80055d4:	6139      	str	r1, [r7, #16]
 80055d6:	4649      	mov	r1, r9
 80055d8:	414b      	adcs	r3, r1
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055e8:	4659      	mov	r1, fp
 80055ea:	00cb      	lsls	r3, r1, #3
 80055ec:	4651      	mov	r1, sl
 80055ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055f2:	4651      	mov	r1, sl
 80055f4:	00ca      	lsls	r2, r1, #3
 80055f6:	4610      	mov	r0, r2
 80055f8:	4619      	mov	r1, r3
 80055fa:	4603      	mov	r3, r0
 80055fc:	4642      	mov	r2, r8
 80055fe:	189b      	adds	r3, r3, r2
 8005600:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005604:	464b      	mov	r3, r9
 8005606:	460a      	mov	r2, r1
 8005608:	eb42 0303 	adc.w	r3, r2, r3
 800560c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	67bb      	str	r3, [r7, #120]	@ 0x78
 800561a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005628:	4649      	mov	r1, r9
 800562a:	008b      	lsls	r3, r1, #2
 800562c:	4641      	mov	r1, r8
 800562e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005632:	4641      	mov	r1, r8
 8005634:	008a      	lsls	r2, r1, #2
 8005636:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800563a:	f7fb fad5 	bl	8000be8 <__aeabi_uldivmod>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4611      	mov	r1, r2
 8005644:	4b38      	ldr	r3, [pc, #224]	@ (8005728 <UART_SetConfig+0x4e4>)
 8005646:	fba3 2301 	umull	r2, r3, r3, r1
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	2264      	movs	r2, #100	@ 0x64
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	1acb      	subs	r3, r1, r3
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	3332      	adds	r3, #50	@ 0x32
 8005658:	4a33      	ldr	r2, [pc, #204]	@ (8005728 <UART_SetConfig+0x4e4>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005664:	441c      	add	r4, r3
 8005666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800566a:	2200      	movs	r2, #0
 800566c:	673b      	str	r3, [r7, #112]	@ 0x70
 800566e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005670:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	1891      	adds	r1, r2, r2
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	415b      	adcs	r3, r3
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005684:	4641      	mov	r1, r8
 8005686:	1851      	adds	r1, r2, r1
 8005688:	6039      	str	r1, [r7, #0]
 800568a:	4649      	mov	r1, r9
 800568c:	414b      	adcs	r3, r1
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800569c:	4659      	mov	r1, fp
 800569e:	00cb      	lsls	r3, r1, #3
 80056a0:	4651      	mov	r1, sl
 80056a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056a6:	4651      	mov	r1, sl
 80056a8:	00ca      	lsls	r2, r1, #3
 80056aa:	4610      	mov	r0, r2
 80056ac:	4619      	mov	r1, r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	4642      	mov	r2, r8
 80056b2:	189b      	adds	r3, r3, r2
 80056b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056b6:	464b      	mov	r3, r9
 80056b8:	460a      	mov	r2, r1
 80056ba:	eb42 0303 	adc.w	r3, r2, r3
 80056be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80056ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80056d8:	4649      	mov	r1, r9
 80056da:	008b      	lsls	r3, r1, #2
 80056dc:	4641      	mov	r1, r8
 80056de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056e2:	4641      	mov	r1, r8
 80056e4:	008a      	lsls	r2, r1, #2
 80056e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80056ea:	f7fb fa7d 	bl	8000be8 <__aeabi_uldivmod>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005728 <UART_SetConfig+0x4e4>)
 80056f4:	fba3 1302 	umull	r1, r3, r3, r2
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	2164      	movs	r1, #100	@ 0x64
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	3332      	adds	r3, #50	@ 0x32
 8005706:	4a08      	ldr	r2, [pc, #32]	@ (8005728 <UART_SetConfig+0x4e4>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	f003 020f 	and.w	r2, r3, #15
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4422      	add	r2, r4
 800571a:	609a      	str	r2, [r3, #8]
}
 800571c:	bf00      	nop
 800571e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005722:	46bd      	mov	sp, r7
 8005724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005728:	51eb851f 	.word	0x51eb851f

0800572c <__cvt>:
 800572c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005730:	ec57 6b10 	vmov	r6, r7, d0
 8005734:	2f00      	cmp	r7, #0
 8005736:	460c      	mov	r4, r1
 8005738:	4619      	mov	r1, r3
 800573a:	463b      	mov	r3, r7
 800573c:	bfbb      	ittet	lt
 800573e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005742:	461f      	movlt	r7, r3
 8005744:	2300      	movge	r3, #0
 8005746:	232d      	movlt	r3, #45	@ 0x2d
 8005748:	700b      	strb	r3, [r1, #0]
 800574a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800574c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005750:	4691      	mov	r9, r2
 8005752:	f023 0820 	bic.w	r8, r3, #32
 8005756:	bfbc      	itt	lt
 8005758:	4632      	movlt	r2, r6
 800575a:	4616      	movlt	r6, r2
 800575c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005760:	d005      	beq.n	800576e <__cvt+0x42>
 8005762:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005766:	d100      	bne.n	800576a <__cvt+0x3e>
 8005768:	3401      	adds	r4, #1
 800576a:	2102      	movs	r1, #2
 800576c:	e000      	b.n	8005770 <__cvt+0x44>
 800576e:	2103      	movs	r1, #3
 8005770:	ab03      	add	r3, sp, #12
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	ab02      	add	r3, sp, #8
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	ec47 6b10 	vmov	d0, r6, r7
 800577c:	4653      	mov	r3, sl
 800577e:	4622      	mov	r2, r4
 8005780:	f000 fe5a 	bl	8006438 <_dtoa_r>
 8005784:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005788:	4605      	mov	r5, r0
 800578a:	d119      	bne.n	80057c0 <__cvt+0x94>
 800578c:	f019 0f01 	tst.w	r9, #1
 8005790:	d00e      	beq.n	80057b0 <__cvt+0x84>
 8005792:	eb00 0904 	add.w	r9, r0, r4
 8005796:	2200      	movs	r2, #0
 8005798:	2300      	movs	r3, #0
 800579a:	4630      	mov	r0, r6
 800579c:	4639      	mov	r1, r7
 800579e:	f7fb f9b3 	bl	8000b08 <__aeabi_dcmpeq>
 80057a2:	b108      	cbz	r0, 80057a8 <__cvt+0x7c>
 80057a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80057a8:	2230      	movs	r2, #48	@ 0x30
 80057aa:	9b03      	ldr	r3, [sp, #12]
 80057ac:	454b      	cmp	r3, r9
 80057ae:	d31e      	bcc.n	80057ee <__cvt+0xc2>
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057b4:	1b5b      	subs	r3, r3, r5
 80057b6:	4628      	mov	r0, r5
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	b004      	add	sp, #16
 80057bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057c4:	eb00 0904 	add.w	r9, r0, r4
 80057c8:	d1e5      	bne.n	8005796 <__cvt+0x6a>
 80057ca:	7803      	ldrb	r3, [r0, #0]
 80057cc:	2b30      	cmp	r3, #48	@ 0x30
 80057ce:	d10a      	bne.n	80057e6 <__cvt+0xba>
 80057d0:	2200      	movs	r2, #0
 80057d2:	2300      	movs	r3, #0
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fb f996 	bl	8000b08 <__aeabi_dcmpeq>
 80057dc:	b918      	cbnz	r0, 80057e6 <__cvt+0xba>
 80057de:	f1c4 0401 	rsb	r4, r4, #1
 80057e2:	f8ca 4000 	str.w	r4, [sl]
 80057e6:	f8da 3000 	ldr.w	r3, [sl]
 80057ea:	4499      	add	r9, r3
 80057ec:	e7d3      	b.n	8005796 <__cvt+0x6a>
 80057ee:	1c59      	adds	r1, r3, #1
 80057f0:	9103      	str	r1, [sp, #12]
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	e7d9      	b.n	80057aa <__cvt+0x7e>

080057f6 <__exponent>:
 80057f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f8:	2900      	cmp	r1, #0
 80057fa:	bfba      	itte	lt
 80057fc:	4249      	neglt	r1, r1
 80057fe:	232d      	movlt	r3, #45	@ 0x2d
 8005800:	232b      	movge	r3, #43	@ 0x2b
 8005802:	2909      	cmp	r1, #9
 8005804:	7002      	strb	r2, [r0, #0]
 8005806:	7043      	strb	r3, [r0, #1]
 8005808:	dd29      	ble.n	800585e <__exponent+0x68>
 800580a:	f10d 0307 	add.w	r3, sp, #7
 800580e:	461d      	mov	r5, r3
 8005810:	270a      	movs	r7, #10
 8005812:	461a      	mov	r2, r3
 8005814:	fbb1 f6f7 	udiv	r6, r1, r7
 8005818:	fb07 1416 	mls	r4, r7, r6, r1
 800581c:	3430      	adds	r4, #48	@ 0x30
 800581e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005822:	460c      	mov	r4, r1
 8005824:	2c63      	cmp	r4, #99	@ 0x63
 8005826:	f103 33ff 	add.w	r3, r3, #4294967295
 800582a:	4631      	mov	r1, r6
 800582c:	dcf1      	bgt.n	8005812 <__exponent+0x1c>
 800582e:	3130      	adds	r1, #48	@ 0x30
 8005830:	1e94      	subs	r4, r2, #2
 8005832:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005836:	1c41      	adds	r1, r0, #1
 8005838:	4623      	mov	r3, r4
 800583a:	42ab      	cmp	r3, r5
 800583c:	d30a      	bcc.n	8005854 <__exponent+0x5e>
 800583e:	f10d 0309 	add.w	r3, sp, #9
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	42ac      	cmp	r4, r5
 8005846:	bf88      	it	hi
 8005848:	2300      	movhi	r3, #0
 800584a:	3302      	adds	r3, #2
 800584c:	4403      	add	r3, r0
 800584e:	1a18      	subs	r0, r3, r0
 8005850:	b003      	add	sp, #12
 8005852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005854:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005858:	f801 6f01 	strb.w	r6, [r1, #1]!
 800585c:	e7ed      	b.n	800583a <__exponent+0x44>
 800585e:	2330      	movs	r3, #48	@ 0x30
 8005860:	3130      	adds	r1, #48	@ 0x30
 8005862:	7083      	strb	r3, [r0, #2]
 8005864:	70c1      	strb	r1, [r0, #3]
 8005866:	1d03      	adds	r3, r0, #4
 8005868:	e7f1      	b.n	800584e <__exponent+0x58>
	...

0800586c <_printf_float>:
 800586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005870:	b08d      	sub	sp, #52	@ 0x34
 8005872:	460c      	mov	r4, r1
 8005874:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005878:	4616      	mov	r6, r2
 800587a:	461f      	mov	r7, r3
 800587c:	4605      	mov	r5, r0
 800587e:	f000 fcdb 	bl	8006238 <_localeconv_r>
 8005882:	6803      	ldr	r3, [r0, #0]
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fa fd12 	bl	80002b0 <strlen>
 800588c:	2300      	movs	r3, #0
 800588e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005890:	f8d8 3000 	ldr.w	r3, [r8]
 8005894:	9005      	str	r0, [sp, #20]
 8005896:	3307      	adds	r3, #7
 8005898:	f023 0307 	bic.w	r3, r3, #7
 800589c:	f103 0208 	add.w	r2, r3, #8
 80058a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058a4:	f8d4 b000 	ldr.w	fp, [r4]
 80058a8:	f8c8 2000 	str.w	r2, [r8]
 80058ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80058b4:	9307      	str	r3, [sp, #28]
 80058b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80058ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80058be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058c2:	4b9c      	ldr	r3, [pc, #624]	@ (8005b34 <_printf_float+0x2c8>)
 80058c4:	f04f 32ff 	mov.w	r2, #4294967295
 80058c8:	f7fb f950 	bl	8000b6c <__aeabi_dcmpun>
 80058cc:	bb70      	cbnz	r0, 800592c <_printf_float+0xc0>
 80058ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058d2:	4b98      	ldr	r3, [pc, #608]	@ (8005b34 <_printf_float+0x2c8>)
 80058d4:	f04f 32ff 	mov.w	r2, #4294967295
 80058d8:	f7fb f92a 	bl	8000b30 <__aeabi_dcmple>
 80058dc:	bb30      	cbnz	r0, 800592c <_printf_float+0xc0>
 80058de:	2200      	movs	r2, #0
 80058e0:	2300      	movs	r3, #0
 80058e2:	4640      	mov	r0, r8
 80058e4:	4649      	mov	r1, r9
 80058e6:	f7fb f919 	bl	8000b1c <__aeabi_dcmplt>
 80058ea:	b110      	cbz	r0, 80058f2 <_printf_float+0x86>
 80058ec:	232d      	movs	r3, #45	@ 0x2d
 80058ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058f2:	4a91      	ldr	r2, [pc, #580]	@ (8005b38 <_printf_float+0x2cc>)
 80058f4:	4b91      	ldr	r3, [pc, #580]	@ (8005b3c <_printf_float+0x2d0>)
 80058f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80058fa:	bf94      	ite	ls
 80058fc:	4690      	movls	r8, r2
 80058fe:	4698      	movhi	r8, r3
 8005900:	2303      	movs	r3, #3
 8005902:	6123      	str	r3, [r4, #16]
 8005904:	f02b 0304 	bic.w	r3, fp, #4
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	f04f 0900 	mov.w	r9, #0
 800590e:	9700      	str	r7, [sp, #0]
 8005910:	4633      	mov	r3, r6
 8005912:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005914:	4621      	mov	r1, r4
 8005916:	4628      	mov	r0, r5
 8005918:	f000 f9d2 	bl	8005cc0 <_printf_common>
 800591c:	3001      	adds	r0, #1
 800591e:	f040 808d 	bne.w	8005a3c <_printf_float+0x1d0>
 8005922:	f04f 30ff 	mov.w	r0, #4294967295
 8005926:	b00d      	add	sp, #52	@ 0x34
 8005928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592c:	4642      	mov	r2, r8
 800592e:	464b      	mov	r3, r9
 8005930:	4640      	mov	r0, r8
 8005932:	4649      	mov	r1, r9
 8005934:	f7fb f91a 	bl	8000b6c <__aeabi_dcmpun>
 8005938:	b140      	cbz	r0, 800594c <_printf_float+0xe0>
 800593a:	464b      	mov	r3, r9
 800593c:	2b00      	cmp	r3, #0
 800593e:	bfbc      	itt	lt
 8005940:	232d      	movlt	r3, #45	@ 0x2d
 8005942:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005946:	4a7e      	ldr	r2, [pc, #504]	@ (8005b40 <_printf_float+0x2d4>)
 8005948:	4b7e      	ldr	r3, [pc, #504]	@ (8005b44 <_printf_float+0x2d8>)
 800594a:	e7d4      	b.n	80058f6 <_printf_float+0x8a>
 800594c:	6863      	ldr	r3, [r4, #4]
 800594e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005952:	9206      	str	r2, [sp, #24]
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	d13b      	bne.n	80059d0 <_printf_float+0x164>
 8005958:	2306      	movs	r3, #6
 800595a:	6063      	str	r3, [r4, #4]
 800595c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005960:	2300      	movs	r3, #0
 8005962:	6022      	str	r2, [r4, #0]
 8005964:	9303      	str	r3, [sp, #12]
 8005966:	ab0a      	add	r3, sp, #40	@ 0x28
 8005968:	e9cd a301 	strd	sl, r3, [sp, #4]
 800596c:	ab09      	add	r3, sp, #36	@ 0x24
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	6861      	ldr	r1, [r4, #4]
 8005972:	ec49 8b10 	vmov	d0, r8, r9
 8005976:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800597a:	4628      	mov	r0, r5
 800597c:	f7ff fed6 	bl	800572c <__cvt>
 8005980:	9b06      	ldr	r3, [sp, #24]
 8005982:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005984:	2b47      	cmp	r3, #71	@ 0x47
 8005986:	4680      	mov	r8, r0
 8005988:	d129      	bne.n	80059de <_printf_float+0x172>
 800598a:	1cc8      	adds	r0, r1, #3
 800598c:	db02      	blt.n	8005994 <_printf_float+0x128>
 800598e:	6863      	ldr	r3, [r4, #4]
 8005990:	4299      	cmp	r1, r3
 8005992:	dd41      	ble.n	8005a18 <_printf_float+0x1ac>
 8005994:	f1aa 0a02 	sub.w	sl, sl, #2
 8005998:	fa5f fa8a 	uxtb.w	sl, sl
 800599c:	3901      	subs	r1, #1
 800599e:	4652      	mov	r2, sl
 80059a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80059a6:	f7ff ff26 	bl	80057f6 <__exponent>
 80059aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059ac:	1813      	adds	r3, r2, r0
 80059ae:	2a01      	cmp	r2, #1
 80059b0:	4681      	mov	r9, r0
 80059b2:	6123      	str	r3, [r4, #16]
 80059b4:	dc02      	bgt.n	80059bc <_printf_float+0x150>
 80059b6:	6822      	ldr	r2, [r4, #0]
 80059b8:	07d2      	lsls	r2, r2, #31
 80059ba:	d501      	bpl.n	80059c0 <_printf_float+0x154>
 80059bc:	3301      	adds	r3, #1
 80059be:	6123      	str	r3, [r4, #16]
 80059c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0a2      	beq.n	800590e <_printf_float+0xa2>
 80059c8:	232d      	movs	r3, #45	@ 0x2d
 80059ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059ce:	e79e      	b.n	800590e <_printf_float+0xa2>
 80059d0:	9a06      	ldr	r2, [sp, #24]
 80059d2:	2a47      	cmp	r2, #71	@ 0x47
 80059d4:	d1c2      	bne.n	800595c <_printf_float+0xf0>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1c0      	bne.n	800595c <_printf_float+0xf0>
 80059da:	2301      	movs	r3, #1
 80059dc:	e7bd      	b.n	800595a <_printf_float+0xee>
 80059de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059e2:	d9db      	bls.n	800599c <_printf_float+0x130>
 80059e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80059e8:	d118      	bne.n	8005a1c <_printf_float+0x1b0>
 80059ea:	2900      	cmp	r1, #0
 80059ec:	6863      	ldr	r3, [r4, #4]
 80059ee:	dd0b      	ble.n	8005a08 <_printf_float+0x19c>
 80059f0:	6121      	str	r1, [r4, #16]
 80059f2:	b913      	cbnz	r3, 80059fa <_printf_float+0x18e>
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	07d0      	lsls	r0, r2, #31
 80059f8:	d502      	bpl.n	8005a00 <_printf_float+0x194>
 80059fa:	3301      	adds	r3, #1
 80059fc:	440b      	add	r3, r1
 80059fe:	6123      	str	r3, [r4, #16]
 8005a00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a02:	f04f 0900 	mov.w	r9, #0
 8005a06:	e7db      	b.n	80059c0 <_printf_float+0x154>
 8005a08:	b913      	cbnz	r3, 8005a10 <_printf_float+0x1a4>
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	07d2      	lsls	r2, r2, #31
 8005a0e:	d501      	bpl.n	8005a14 <_printf_float+0x1a8>
 8005a10:	3302      	adds	r3, #2
 8005a12:	e7f4      	b.n	80059fe <_printf_float+0x192>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e7f2      	b.n	80059fe <_printf_float+0x192>
 8005a18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	db05      	blt.n	8005a2e <_printf_float+0x1c2>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	6121      	str	r1, [r4, #16]
 8005a26:	07d8      	lsls	r0, r3, #31
 8005a28:	d5ea      	bpl.n	8005a00 <_printf_float+0x194>
 8005a2a:	1c4b      	adds	r3, r1, #1
 8005a2c:	e7e7      	b.n	80059fe <_printf_float+0x192>
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	bfd4      	ite	le
 8005a32:	f1c1 0202 	rsble	r2, r1, #2
 8005a36:	2201      	movgt	r2, #1
 8005a38:	4413      	add	r3, r2
 8005a3a:	e7e0      	b.n	80059fe <_printf_float+0x192>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	055a      	lsls	r2, r3, #21
 8005a40:	d407      	bmi.n	8005a52 <_printf_float+0x1e6>
 8005a42:	6923      	ldr	r3, [r4, #16]
 8005a44:	4642      	mov	r2, r8
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d12b      	bne.n	8005aa8 <_printf_float+0x23c>
 8005a50:	e767      	b.n	8005922 <_printf_float+0xb6>
 8005a52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a56:	f240 80dd 	bls.w	8005c14 <_printf_float+0x3a8>
 8005a5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2300      	movs	r3, #0
 8005a62:	f7fb f851 	bl	8000b08 <__aeabi_dcmpeq>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d033      	beq.n	8005ad2 <_printf_float+0x266>
 8005a6a:	4a37      	ldr	r2, [pc, #220]	@ (8005b48 <_printf_float+0x2dc>)
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b8      	blx	r7
 8005a74:	3001      	adds	r0, #1
 8005a76:	f43f af54 	beq.w	8005922 <_printf_float+0xb6>
 8005a7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a7e:	4543      	cmp	r3, r8
 8005a80:	db02      	blt.n	8005a88 <_printf_float+0x21c>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	07d8      	lsls	r0, r3, #31
 8005a86:	d50f      	bpl.n	8005aa8 <_printf_float+0x23c>
 8005a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4628      	mov	r0, r5
 8005a90:	47b8      	blx	r7
 8005a92:	3001      	adds	r0, #1
 8005a94:	f43f af45 	beq.w	8005922 <_printf_float+0xb6>
 8005a98:	f04f 0900 	mov.w	r9, #0
 8005a9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005aa0:	f104 0a1a 	add.w	sl, r4, #26
 8005aa4:	45c8      	cmp	r8, r9
 8005aa6:	dc09      	bgt.n	8005abc <_printf_float+0x250>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	079b      	lsls	r3, r3, #30
 8005aac:	f100 8103 	bmi.w	8005cb6 <_printf_float+0x44a>
 8005ab0:	68e0      	ldr	r0, [r4, #12]
 8005ab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ab4:	4298      	cmp	r0, r3
 8005ab6:	bfb8      	it	lt
 8005ab8:	4618      	movlt	r0, r3
 8005aba:	e734      	b.n	8005926 <_printf_float+0xba>
 8005abc:	2301      	movs	r3, #1
 8005abe:	4652      	mov	r2, sl
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	47b8      	blx	r7
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	f43f af2b 	beq.w	8005922 <_printf_float+0xb6>
 8005acc:	f109 0901 	add.w	r9, r9, #1
 8005ad0:	e7e8      	b.n	8005aa4 <_printf_float+0x238>
 8005ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dc39      	bgt.n	8005b4c <_printf_float+0x2e0>
 8005ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b48 <_printf_float+0x2dc>)
 8005ada:	2301      	movs	r3, #1
 8005adc:	4631      	mov	r1, r6
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	f43f af1d 	beq.w	8005922 <_printf_float+0xb6>
 8005ae8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005aec:	ea59 0303 	orrs.w	r3, r9, r3
 8005af0:	d102      	bne.n	8005af8 <_printf_float+0x28c>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	07d9      	lsls	r1, r3, #31
 8005af6:	d5d7      	bpl.n	8005aa8 <_printf_float+0x23c>
 8005af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005afc:	4631      	mov	r1, r6
 8005afe:	4628      	mov	r0, r5
 8005b00:	47b8      	blx	r7
 8005b02:	3001      	adds	r0, #1
 8005b04:	f43f af0d 	beq.w	8005922 <_printf_float+0xb6>
 8005b08:	f04f 0a00 	mov.w	sl, #0
 8005b0c:	f104 0b1a 	add.w	fp, r4, #26
 8005b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b12:	425b      	negs	r3, r3
 8005b14:	4553      	cmp	r3, sl
 8005b16:	dc01      	bgt.n	8005b1c <_printf_float+0x2b0>
 8005b18:	464b      	mov	r3, r9
 8005b1a:	e793      	b.n	8005a44 <_printf_float+0x1d8>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	465a      	mov	r2, fp
 8005b20:	4631      	mov	r1, r6
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b8      	blx	r7
 8005b26:	3001      	adds	r0, #1
 8005b28:	f43f aefb 	beq.w	8005922 <_printf_float+0xb6>
 8005b2c:	f10a 0a01 	add.w	sl, sl, #1
 8005b30:	e7ee      	b.n	8005b10 <_printf_float+0x2a4>
 8005b32:	bf00      	nop
 8005b34:	7fefffff 	.word	0x7fefffff
 8005b38:	08008480 	.word	0x08008480
 8005b3c:	08008484 	.word	0x08008484
 8005b40:	08008488 	.word	0x08008488
 8005b44:	0800848c 	.word	0x0800848c
 8005b48:	08008490 	.word	0x08008490
 8005b4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b52:	4553      	cmp	r3, sl
 8005b54:	bfa8      	it	ge
 8005b56:	4653      	movge	r3, sl
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	4699      	mov	r9, r3
 8005b5c:	dc36      	bgt.n	8005bcc <_printf_float+0x360>
 8005b5e:	f04f 0b00 	mov.w	fp, #0
 8005b62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b66:	f104 021a 	add.w	r2, r4, #26
 8005b6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b6c:	9306      	str	r3, [sp, #24]
 8005b6e:	eba3 0309 	sub.w	r3, r3, r9
 8005b72:	455b      	cmp	r3, fp
 8005b74:	dc31      	bgt.n	8005bda <_printf_float+0x36e>
 8005b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b78:	459a      	cmp	sl, r3
 8005b7a:	dc3a      	bgt.n	8005bf2 <_printf_float+0x386>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	07da      	lsls	r2, r3, #31
 8005b80:	d437      	bmi.n	8005bf2 <_printf_float+0x386>
 8005b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b84:	ebaa 0903 	sub.w	r9, sl, r3
 8005b88:	9b06      	ldr	r3, [sp, #24]
 8005b8a:	ebaa 0303 	sub.w	r3, sl, r3
 8005b8e:	4599      	cmp	r9, r3
 8005b90:	bfa8      	it	ge
 8005b92:	4699      	movge	r9, r3
 8005b94:	f1b9 0f00 	cmp.w	r9, #0
 8005b98:	dc33      	bgt.n	8005c02 <_printf_float+0x396>
 8005b9a:	f04f 0800 	mov.w	r8, #0
 8005b9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ba2:	f104 0b1a 	add.w	fp, r4, #26
 8005ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba8:	ebaa 0303 	sub.w	r3, sl, r3
 8005bac:	eba3 0309 	sub.w	r3, r3, r9
 8005bb0:	4543      	cmp	r3, r8
 8005bb2:	f77f af79 	ble.w	8005aa8 <_printf_float+0x23c>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	465a      	mov	r2, fp
 8005bba:	4631      	mov	r1, r6
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b8      	blx	r7
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	f43f aeae 	beq.w	8005922 <_printf_float+0xb6>
 8005bc6:	f108 0801 	add.w	r8, r8, #1
 8005bca:	e7ec      	b.n	8005ba6 <_printf_float+0x33a>
 8005bcc:	4642      	mov	r2, r8
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d1c2      	bne.n	8005b5e <_printf_float+0x2f2>
 8005bd8:	e6a3      	b.n	8005922 <_printf_float+0xb6>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	9206      	str	r2, [sp, #24]
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	f43f ae9c 	beq.w	8005922 <_printf_float+0xb6>
 8005bea:	9a06      	ldr	r2, [sp, #24]
 8005bec:	f10b 0b01 	add.w	fp, fp, #1
 8005bf0:	e7bb      	b.n	8005b6a <_printf_float+0x2fe>
 8005bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b8      	blx	r7
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d1c0      	bne.n	8005b82 <_printf_float+0x316>
 8005c00:	e68f      	b.n	8005922 <_printf_float+0xb6>
 8005c02:	9a06      	ldr	r2, [sp, #24]
 8005c04:	464b      	mov	r3, r9
 8005c06:	4442      	add	r2, r8
 8005c08:	4631      	mov	r1, r6
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	47b8      	blx	r7
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d1c3      	bne.n	8005b9a <_printf_float+0x32e>
 8005c12:	e686      	b.n	8005922 <_printf_float+0xb6>
 8005c14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c18:	f1ba 0f01 	cmp.w	sl, #1
 8005c1c:	dc01      	bgt.n	8005c22 <_printf_float+0x3b6>
 8005c1e:	07db      	lsls	r3, r3, #31
 8005c20:	d536      	bpl.n	8005c90 <_printf_float+0x424>
 8005c22:	2301      	movs	r3, #1
 8005c24:	4642      	mov	r2, r8
 8005c26:	4631      	mov	r1, r6
 8005c28:	4628      	mov	r0, r5
 8005c2a:	47b8      	blx	r7
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	f43f ae78 	beq.w	8005922 <_printf_float+0xb6>
 8005c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c36:	4631      	mov	r1, r6
 8005c38:	4628      	mov	r0, r5
 8005c3a:	47b8      	blx	r7
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	f43f ae70 	beq.w	8005922 <_printf_float+0xb6>
 8005c42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c4e:	f7fa ff5b 	bl	8000b08 <__aeabi_dcmpeq>
 8005c52:	b9c0      	cbnz	r0, 8005c86 <_printf_float+0x41a>
 8005c54:	4653      	mov	r3, sl
 8005c56:	f108 0201 	add.w	r2, r8, #1
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	47b8      	blx	r7
 8005c60:	3001      	adds	r0, #1
 8005c62:	d10c      	bne.n	8005c7e <_printf_float+0x412>
 8005c64:	e65d      	b.n	8005922 <_printf_float+0xb6>
 8005c66:	2301      	movs	r3, #1
 8005c68:	465a      	mov	r2, fp
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b8      	blx	r7
 8005c70:	3001      	adds	r0, #1
 8005c72:	f43f ae56 	beq.w	8005922 <_printf_float+0xb6>
 8005c76:	f108 0801 	add.w	r8, r8, #1
 8005c7a:	45d0      	cmp	r8, sl
 8005c7c:	dbf3      	blt.n	8005c66 <_printf_float+0x3fa>
 8005c7e:	464b      	mov	r3, r9
 8005c80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c84:	e6df      	b.n	8005a46 <_printf_float+0x1da>
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	f104 0b1a 	add.w	fp, r4, #26
 8005c8e:	e7f4      	b.n	8005c7a <_printf_float+0x40e>
 8005c90:	2301      	movs	r3, #1
 8005c92:	4642      	mov	r2, r8
 8005c94:	e7e1      	b.n	8005c5a <_printf_float+0x3ee>
 8005c96:	2301      	movs	r3, #1
 8005c98:	464a      	mov	r2, r9
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f43f ae3e 	beq.w	8005922 <_printf_float+0xb6>
 8005ca6:	f108 0801 	add.w	r8, r8, #1
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cae:	1a5b      	subs	r3, r3, r1
 8005cb0:	4543      	cmp	r3, r8
 8005cb2:	dcf0      	bgt.n	8005c96 <_printf_float+0x42a>
 8005cb4:	e6fc      	b.n	8005ab0 <_printf_float+0x244>
 8005cb6:	f04f 0800 	mov.w	r8, #0
 8005cba:	f104 0919 	add.w	r9, r4, #25
 8005cbe:	e7f4      	b.n	8005caa <_printf_float+0x43e>

08005cc0 <_printf_common>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	4698      	mov	r8, r3
 8005cc8:	688a      	ldr	r2, [r1, #8]
 8005cca:	690b      	ldr	r3, [r1, #16]
 8005ccc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	bfb8      	it	lt
 8005cd4:	4613      	movlt	r3, r2
 8005cd6:	6033      	str	r3, [r6, #0]
 8005cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cdc:	4607      	mov	r7, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	b10a      	cbz	r2, 8005ce6 <_printf_common+0x26>
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	6033      	str	r3, [r6, #0]
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	0699      	lsls	r1, r3, #26
 8005cea:	bf42      	ittt	mi
 8005cec:	6833      	ldrmi	r3, [r6, #0]
 8005cee:	3302      	addmi	r3, #2
 8005cf0:	6033      	strmi	r3, [r6, #0]
 8005cf2:	6825      	ldr	r5, [r4, #0]
 8005cf4:	f015 0506 	ands.w	r5, r5, #6
 8005cf8:	d106      	bne.n	8005d08 <_printf_common+0x48>
 8005cfa:	f104 0a19 	add.w	sl, r4, #25
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	6832      	ldr	r2, [r6, #0]
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dc26      	bgt.n	8005d56 <_printf_common+0x96>
 8005d08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	3b00      	subs	r3, #0
 8005d10:	bf18      	it	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	0692      	lsls	r2, r2, #26
 8005d16:	d42b      	bmi.n	8005d70 <_printf_common+0xb0>
 8005d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d1c:	4641      	mov	r1, r8
 8005d1e:	4638      	mov	r0, r7
 8005d20:	47c8      	blx	r9
 8005d22:	3001      	adds	r0, #1
 8005d24:	d01e      	beq.n	8005d64 <_printf_common+0xa4>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	6922      	ldr	r2, [r4, #16]
 8005d2a:	f003 0306 	and.w	r3, r3, #6
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	bf02      	ittt	eq
 8005d32:	68e5      	ldreq	r5, [r4, #12]
 8005d34:	6833      	ldreq	r3, [r6, #0]
 8005d36:	1aed      	subeq	r5, r5, r3
 8005d38:	68a3      	ldr	r3, [r4, #8]
 8005d3a:	bf0c      	ite	eq
 8005d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d40:	2500      	movne	r5, #0
 8005d42:	4293      	cmp	r3, r2
 8005d44:	bfc4      	itt	gt
 8005d46:	1a9b      	subgt	r3, r3, r2
 8005d48:	18ed      	addgt	r5, r5, r3
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	341a      	adds	r4, #26
 8005d4e:	42b5      	cmp	r5, r6
 8005d50:	d11a      	bne.n	8005d88 <_printf_common+0xc8>
 8005d52:	2000      	movs	r0, #0
 8005d54:	e008      	b.n	8005d68 <_printf_common+0xa8>
 8005d56:	2301      	movs	r3, #1
 8005d58:	4652      	mov	r2, sl
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	47c8      	blx	r9
 8005d60:	3001      	adds	r0, #1
 8005d62:	d103      	bne.n	8005d6c <_printf_common+0xac>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	e7c6      	b.n	8005cfe <_printf_common+0x3e>
 8005d70:	18e1      	adds	r1, r4, r3
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	2030      	movs	r0, #48	@ 0x30
 8005d76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d7a:	4422      	add	r2, r4
 8005d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d84:	3302      	adds	r3, #2
 8005d86:	e7c7      	b.n	8005d18 <_printf_common+0x58>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	4638      	mov	r0, r7
 8005d90:	47c8      	blx	r9
 8005d92:	3001      	adds	r0, #1
 8005d94:	d0e6      	beq.n	8005d64 <_printf_common+0xa4>
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7d9      	b.n	8005d4e <_printf_common+0x8e>
	...

08005d9c <_printf_i>:
 8005d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005da0:	7e0f      	ldrb	r7, [r1, #24]
 8005da2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005da4:	2f78      	cmp	r7, #120	@ 0x78
 8005da6:	4691      	mov	r9, r2
 8005da8:	4680      	mov	r8, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	469a      	mov	sl, r3
 8005dae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005db2:	d807      	bhi.n	8005dc4 <_printf_i+0x28>
 8005db4:	2f62      	cmp	r7, #98	@ 0x62
 8005db6:	d80a      	bhi.n	8005dce <_printf_i+0x32>
 8005db8:	2f00      	cmp	r7, #0
 8005dba:	f000 80d2 	beq.w	8005f62 <_printf_i+0x1c6>
 8005dbe:	2f58      	cmp	r7, #88	@ 0x58
 8005dc0:	f000 80b9 	beq.w	8005f36 <_printf_i+0x19a>
 8005dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005dcc:	e03a      	b.n	8005e44 <_printf_i+0xa8>
 8005dce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dd2:	2b15      	cmp	r3, #21
 8005dd4:	d8f6      	bhi.n	8005dc4 <_printf_i+0x28>
 8005dd6:	a101      	add	r1, pc, #4	@ (adr r1, 8005ddc <_printf_i+0x40>)
 8005dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e49 	.word	0x08005e49
 8005de4:	08005dc5 	.word	0x08005dc5
 8005de8:	08005dc5 	.word	0x08005dc5
 8005dec:	08005dc5 	.word	0x08005dc5
 8005df0:	08005dc5 	.word	0x08005dc5
 8005df4:	08005e49 	.word	0x08005e49
 8005df8:	08005dc5 	.word	0x08005dc5
 8005dfc:	08005dc5 	.word	0x08005dc5
 8005e00:	08005dc5 	.word	0x08005dc5
 8005e04:	08005dc5 	.word	0x08005dc5
 8005e08:	08005f49 	.word	0x08005f49
 8005e0c:	08005e73 	.word	0x08005e73
 8005e10:	08005f03 	.word	0x08005f03
 8005e14:	08005dc5 	.word	0x08005dc5
 8005e18:	08005dc5 	.word	0x08005dc5
 8005e1c:	08005f6b 	.word	0x08005f6b
 8005e20:	08005dc5 	.word	0x08005dc5
 8005e24:	08005e73 	.word	0x08005e73
 8005e28:	08005dc5 	.word	0x08005dc5
 8005e2c:	08005dc5 	.word	0x08005dc5
 8005e30:	08005f0b 	.word	0x08005f0b
 8005e34:	6833      	ldr	r3, [r6, #0]
 8005e36:	1d1a      	adds	r2, r3, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6032      	str	r2, [r6, #0]
 8005e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e44:	2301      	movs	r3, #1
 8005e46:	e09d      	b.n	8005f84 <_printf_i+0x1e8>
 8005e48:	6833      	ldr	r3, [r6, #0]
 8005e4a:	6820      	ldr	r0, [r4, #0]
 8005e4c:	1d19      	adds	r1, r3, #4
 8005e4e:	6031      	str	r1, [r6, #0]
 8005e50:	0606      	lsls	r6, r0, #24
 8005e52:	d501      	bpl.n	8005e58 <_printf_i+0xbc>
 8005e54:	681d      	ldr	r5, [r3, #0]
 8005e56:	e003      	b.n	8005e60 <_printf_i+0xc4>
 8005e58:	0645      	lsls	r5, r0, #25
 8005e5a:	d5fb      	bpl.n	8005e54 <_printf_i+0xb8>
 8005e5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	da03      	bge.n	8005e6c <_printf_i+0xd0>
 8005e64:	232d      	movs	r3, #45	@ 0x2d
 8005e66:	426d      	negs	r5, r5
 8005e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e6c:	4859      	ldr	r0, [pc, #356]	@ (8005fd4 <_printf_i+0x238>)
 8005e6e:	230a      	movs	r3, #10
 8005e70:	e011      	b.n	8005e96 <_printf_i+0xfa>
 8005e72:	6821      	ldr	r1, [r4, #0]
 8005e74:	6833      	ldr	r3, [r6, #0]
 8005e76:	0608      	lsls	r0, r1, #24
 8005e78:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e7c:	d402      	bmi.n	8005e84 <_printf_i+0xe8>
 8005e7e:	0649      	lsls	r1, r1, #25
 8005e80:	bf48      	it	mi
 8005e82:	b2ad      	uxthmi	r5, r5
 8005e84:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e86:	4853      	ldr	r0, [pc, #332]	@ (8005fd4 <_printf_i+0x238>)
 8005e88:	6033      	str	r3, [r6, #0]
 8005e8a:	bf14      	ite	ne
 8005e8c:	230a      	movne	r3, #10
 8005e8e:	2308      	moveq	r3, #8
 8005e90:	2100      	movs	r1, #0
 8005e92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e96:	6866      	ldr	r6, [r4, #4]
 8005e98:	60a6      	str	r6, [r4, #8]
 8005e9a:	2e00      	cmp	r6, #0
 8005e9c:	bfa2      	ittt	ge
 8005e9e:	6821      	ldrge	r1, [r4, #0]
 8005ea0:	f021 0104 	bicge.w	r1, r1, #4
 8005ea4:	6021      	strge	r1, [r4, #0]
 8005ea6:	b90d      	cbnz	r5, 8005eac <_printf_i+0x110>
 8005ea8:	2e00      	cmp	r6, #0
 8005eaa:	d04b      	beq.n	8005f44 <_printf_i+0x1a8>
 8005eac:	4616      	mov	r6, r2
 8005eae:	fbb5 f1f3 	udiv	r1, r5, r3
 8005eb2:	fb03 5711 	mls	r7, r3, r1, r5
 8005eb6:	5dc7      	ldrb	r7, [r0, r7]
 8005eb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ebc:	462f      	mov	r7, r5
 8005ebe:	42bb      	cmp	r3, r7
 8005ec0:	460d      	mov	r5, r1
 8005ec2:	d9f4      	bls.n	8005eae <_printf_i+0x112>
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d10b      	bne.n	8005ee0 <_printf_i+0x144>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	07df      	lsls	r7, r3, #31
 8005ecc:	d508      	bpl.n	8005ee0 <_printf_i+0x144>
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	6861      	ldr	r1, [r4, #4]
 8005ed2:	4299      	cmp	r1, r3
 8005ed4:	bfde      	ittt	le
 8005ed6:	2330      	movle	r3, #48	@ 0x30
 8005ed8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005edc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ee0:	1b92      	subs	r2, r2, r6
 8005ee2:	6122      	str	r2, [r4, #16]
 8005ee4:	f8cd a000 	str.w	sl, [sp]
 8005ee8:	464b      	mov	r3, r9
 8005eea:	aa03      	add	r2, sp, #12
 8005eec:	4621      	mov	r1, r4
 8005eee:	4640      	mov	r0, r8
 8005ef0:	f7ff fee6 	bl	8005cc0 <_printf_common>
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d14a      	bne.n	8005f8e <_printf_i+0x1f2>
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	b004      	add	sp, #16
 8005efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	f043 0320 	orr.w	r3, r3, #32
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	4833      	ldr	r0, [pc, #204]	@ (8005fd8 <_printf_i+0x23c>)
 8005f0c:	2778      	movs	r7, #120	@ 0x78
 8005f0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	6831      	ldr	r1, [r6, #0]
 8005f16:	061f      	lsls	r7, r3, #24
 8005f18:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f1c:	d402      	bmi.n	8005f24 <_printf_i+0x188>
 8005f1e:	065f      	lsls	r7, r3, #25
 8005f20:	bf48      	it	mi
 8005f22:	b2ad      	uxthmi	r5, r5
 8005f24:	6031      	str	r1, [r6, #0]
 8005f26:	07d9      	lsls	r1, r3, #31
 8005f28:	bf44      	itt	mi
 8005f2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f2e:	6023      	strmi	r3, [r4, #0]
 8005f30:	b11d      	cbz	r5, 8005f3a <_printf_i+0x19e>
 8005f32:	2310      	movs	r3, #16
 8005f34:	e7ac      	b.n	8005e90 <_printf_i+0xf4>
 8005f36:	4827      	ldr	r0, [pc, #156]	@ (8005fd4 <_printf_i+0x238>)
 8005f38:	e7e9      	b.n	8005f0e <_printf_i+0x172>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	f023 0320 	bic.w	r3, r3, #32
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	e7f6      	b.n	8005f32 <_printf_i+0x196>
 8005f44:	4616      	mov	r6, r2
 8005f46:	e7bd      	b.n	8005ec4 <_printf_i+0x128>
 8005f48:	6833      	ldr	r3, [r6, #0]
 8005f4a:	6825      	ldr	r5, [r4, #0]
 8005f4c:	6961      	ldr	r1, [r4, #20]
 8005f4e:	1d18      	adds	r0, r3, #4
 8005f50:	6030      	str	r0, [r6, #0]
 8005f52:	062e      	lsls	r6, r5, #24
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	d501      	bpl.n	8005f5c <_printf_i+0x1c0>
 8005f58:	6019      	str	r1, [r3, #0]
 8005f5a:	e002      	b.n	8005f62 <_printf_i+0x1c6>
 8005f5c:	0668      	lsls	r0, r5, #25
 8005f5e:	d5fb      	bpl.n	8005f58 <_printf_i+0x1bc>
 8005f60:	8019      	strh	r1, [r3, #0]
 8005f62:	2300      	movs	r3, #0
 8005f64:	6123      	str	r3, [r4, #16]
 8005f66:	4616      	mov	r6, r2
 8005f68:	e7bc      	b.n	8005ee4 <_printf_i+0x148>
 8005f6a:	6833      	ldr	r3, [r6, #0]
 8005f6c:	1d1a      	adds	r2, r3, #4
 8005f6e:	6032      	str	r2, [r6, #0]
 8005f70:	681e      	ldr	r6, [r3, #0]
 8005f72:	6862      	ldr	r2, [r4, #4]
 8005f74:	2100      	movs	r1, #0
 8005f76:	4630      	mov	r0, r6
 8005f78:	f7fa f94a 	bl	8000210 <memchr>
 8005f7c:	b108      	cbz	r0, 8005f82 <_printf_i+0x1e6>
 8005f7e:	1b80      	subs	r0, r0, r6
 8005f80:	6060      	str	r0, [r4, #4]
 8005f82:	6863      	ldr	r3, [r4, #4]
 8005f84:	6123      	str	r3, [r4, #16]
 8005f86:	2300      	movs	r3, #0
 8005f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f8c:	e7aa      	b.n	8005ee4 <_printf_i+0x148>
 8005f8e:	6923      	ldr	r3, [r4, #16]
 8005f90:	4632      	mov	r2, r6
 8005f92:	4649      	mov	r1, r9
 8005f94:	4640      	mov	r0, r8
 8005f96:	47d0      	blx	sl
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d0ad      	beq.n	8005ef8 <_printf_i+0x15c>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	079b      	lsls	r3, r3, #30
 8005fa0:	d413      	bmi.n	8005fca <_printf_i+0x22e>
 8005fa2:	68e0      	ldr	r0, [r4, #12]
 8005fa4:	9b03      	ldr	r3, [sp, #12]
 8005fa6:	4298      	cmp	r0, r3
 8005fa8:	bfb8      	it	lt
 8005faa:	4618      	movlt	r0, r3
 8005fac:	e7a6      	b.n	8005efc <_printf_i+0x160>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	47d0      	blx	sl
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d09d      	beq.n	8005ef8 <_printf_i+0x15c>
 8005fbc:	3501      	adds	r5, #1
 8005fbe:	68e3      	ldr	r3, [r4, #12]
 8005fc0:	9903      	ldr	r1, [sp, #12]
 8005fc2:	1a5b      	subs	r3, r3, r1
 8005fc4:	42ab      	cmp	r3, r5
 8005fc6:	dcf2      	bgt.n	8005fae <_printf_i+0x212>
 8005fc8:	e7eb      	b.n	8005fa2 <_printf_i+0x206>
 8005fca:	2500      	movs	r5, #0
 8005fcc:	f104 0619 	add.w	r6, r4, #25
 8005fd0:	e7f5      	b.n	8005fbe <_printf_i+0x222>
 8005fd2:	bf00      	nop
 8005fd4:	08008492 	.word	0x08008492
 8005fd8:	080084a3 	.word	0x080084a3

08005fdc <std>:
 8005fdc:	2300      	movs	r3, #0
 8005fde:	b510      	push	{r4, lr}
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8005fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fea:	6083      	str	r3, [r0, #8]
 8005fec:	8181      	strh	r1, [r0, #12]
 8005fee:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ff0:	81c2      	strh	r2, [r0, #14]
 8005ff2:	6183      	str	r3, [r0, #24]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	2208      	movs	r2, #8
 8005ff8:	305c      	adds	r0, #92	@ 0x5c
 8005ffa:	f000 f914 	bl	8006226 <memset>
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8006034 <std+0x58>)
 8006000:	6263      	str	r3, [r4, #36]	@ 0x24
 8006002:	4b0d      	ldr	r3, [pc, #52]	@ (8006038 <std+0x5c>)
 8006004:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006006:	4b0d      	ldr	r3, [pc, #52]	@ (800603c <std+0x60>)
 8006008:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800600a:	4b0d      	ldr	r3, [pc, #52]	@ (8006040 <std+0x64>)
 800600c:	6323      	str	r3, [r4, #48]	@ 0x30
 800600e:	4b0d      	ldr	r3, [pc, #52]	@ (8006044 <std+0x68>)
 8006010:	6224      	str	r4, [r4, #32]
 8006012:	429c      	cmp	r4, r3
 8006014:	d006      	beq.n	8006024 <std+0x48>
 8006016:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800601a:	4294      	cmp	r4, r2
 800601c:	d002      	beq.n	8006024 <std+0x48>
 800601e:	33d0      	adds	r3, #208	@ 0xd0
 8006020:	429c      	cmp	r4, r3
 8006022:	d105      	bne.n	8006030 <std+0x54>
 8006024:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800602c:	f000 b978 	b.w	8006320 <__retarget_lock_init_recursive>
 8006030:	bd10      	pop	{r4, pc}
 8006032:	bf00      	nop
 8006034:	080061a1 	.word	0x080061a1
 8006038:	080061c3 	.word	0x080061c3
 800603c:	080061fb 	.word	0x080061fb
 8006040:	0800621f 	.word	0x0800621f
 8006044:	20000364 	.word	0x20000364

08006048 <stdio_exit_handler>:
 8006048:	4a02      	ldr	r2, [pc, #8]	@ (8006054 <stdio_exit_handler+0xc>)
 800604a:	4903      	ldr	r1, [pc, #12]	@ (8006058 <stdio_exit_handler+0x10>)
 800604c:	4803      	ldr	r0, [pc, #12]	@ (800605c <stdio_exit_handler+0x14>)
 800604e:	f000 b869 	b.w	8006124 <_fwalk_sglue>
 8006052:	bf00      	nop
 8006054:	2000000c 	.word	0x2000000c
 8006058:	08007c7d 	.word	0x08007c7d
 800605c:	2000001c 	.word	0x2000001c

08006060 <cleanup_stdio>:
 8006060:	6841      	ldr	r1, [r0, #4]
 8006062:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <cleanup_stdio+0x34>)
 8006064:	4299      	cmp	r1, r3
 8006066:	b510      	push	{r4, lr}
 8006068:	4604      	mov	r4, r0
 800606a:	d001      	beq.n	8006070 <cleanup_stdio+0x10>
 800606c:	f001 fe06 	bl	8007c7c <_fflush_r>
 8006070:	68a1      	ldr	r1, [r4, #8]
 8006072:	4b09      	ldr	r3, [pc, #36]	@ (8006098 <cleanup_stdio+0x38>)
 8006074:	4299      	cmp	r1, r3
 8006076:	d002      	beq.n	800607e <cleanup_stdio+0x1e>
 8006078:	4620      	mov	r0, r4
 800607a:	f001 fdff 	bl	8007c7c <_fflush_r>
 800607e:	68e1      	ldr	r1, [r4, #12]
 8006080:	4b06      	ldr	r3, [pc, #24]	@ (800609c <cleanup_stdio+0x3c>)
 8006082:	4299      	cmp	r1, r3
 8006084:	d004      	beq.n	8006090 <cleanup_stdio+0x30>
 8006086:	4620      	mov	r0, r4
 8006088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800608c:	f001 bdf6 	b.w	8007c7c <_fflush_r>
 8006090:	bd10      	pop	{r4, pc}
 8006092:	bf00      	nop
 8006094:	20000364 	.word	0x20000364
 8006098:	200003cc 	.word	0x200003cc
 800609c:	20000434 	.word	0x20000434

080060a0 <global_stdio_init.part.0>:
 80060a0:	b510      	push	{r4, lr}
 80060a2:	4b0b      	ldr	r3, [pc, #44]	@ (80060d0 <global_stdio_init.part.0+0x30>)
 80060a4:	4c0b      	ldr	r4, [pc, #44]	@ (80060d4 <global_stdio_init.part.0+0x34>)
 80060a6:	4a0c      	ldr	r2, [pc, #48]	@ (80060d8 <global_stdio_init.part.0+0x38>)
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	4620      	mov	r0, r4
 80060ac:	2200      	movs	r2, #0
 80060ae:	2104      	movs	r1, #4
 80060b0:	f7ff ff94 	bl	8005fdc <std>
 80060b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060b8:	2201      	movs	r2, #1
 80060ba:	2109      	movs	r1, #9
 80060bc:	f7ff ff8e 	bl	8005fdc <std>
 80060c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060c4:	2202      	movs	r2, #2
 80060c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ca:	2112      	movs	r1, #18
 80060cc:	f7ff bf86 	b.w	8005fdc <std>
 80060d0:	2000049c 	.word	0x2000049c
 80060d4:	20000364 	.word	0x20000364
 80060d8:	08006049 	.word	0x08006049

080060dc <__sfp_lock_acquire>:
 80060dc:	4801      	ldr	r0, [pc, #4]	@ (80060e4 <__sfp_lock_acquire+0x8>)
 80060de:	f000 b920 	b.w	8006322 <__retarget_lock_acquire_recursive>
 80060e2:	bf00      	nop
 80060e4:	200004a5 	.word	0x200004a5

080060e8 <__sfp_lock_release>:
 80060e8:	4801      	ldr	r0, [pc, #4]	@ (80060f0 <__sfp_lock_release+0x8>)
 80060ea:	f000 b91b 	b.w	8006324 <__retarget_lock_release_recursive>
 80060ee:	bf00      	nop
 80060f0:	200004a5 	.word	0x200004a5

080060f4 <__sinit>:
 80060f4:	b510      	push	{r4, lr}
 80060f6:	4604      	mov	r4, r0
 80060f8:	f7ff fff0 	bl	80060dc <__sfp_lock_acquire>
 80060fc:	6a23      	ldr	r3, [r4, #32]
 80060fe:	b11b      	cbz	r3, 8006108 <__sinit+0x14>
 8006100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006104:	f7ff bff0 	b.w	80060e8 <__sfp_lock_release>
 8006108:	4b04      	ldr	r3, [pc, #16]	@ (800611c <__sinit+0x28>)
 800610a:	6223      	str	r3, [r4, #32]
 800610c:	4b04      	ldr	r3, [pc, #16]	@ (8006120 <__sinit+0x2c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1f5      	bne.n	8006100 <__sinit+0xc>
 8006114:	f7ff ffc4 	bl	80060a0 <global_stdio_init.part.0>
 8006118:	e7f2      	b.n	8006100 <__sinit+0xc>
 800611a:	bf00      	nop
 800611c:	08006061 	.word	0x08006061
 8006120:	2000049c 	.word	0x2000049c

08006124 <_fwalk_sglue>:
 8006124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006128:	4607      	mov	r7, r0
 800612a:	4688      	mov	r8, r1
 800612c:	4614      	mov	r4, r2
 800612e:	2600      	movs	r6, #0
 8006130:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006134:	f1b9 0901 	subs.w	r9, r9, #1
 8006138:	d505      	bpl.n	8006146 <_fwalk_sglue+0x22>
 800613a:	6824      	ldr	r4, [r4, #0]
 800613c:	2c00      	cmp	r4, #0
 800613e:	d1f7      	bne.n	8006130 <_fwalk_sglue+0xc>
 8006140:	4630      	mov	r0, r6
 8006142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d907      	bls.n	800615c <_fwalk_sglue+0x38>
 800614c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006150:	3301      	adds	r3, #1
 8006152:	d003      	beq.n	800615c <_fwalk_sglue+0x38>
 8006154:	4629      	mov	r1, r5
 8006156:	4638      	mov	r0, r7
 8006158:	47c0      	blx	r8
 800615a:	4306      	orrs	r6, r0
 800615c:	3568      	adds	r5, #104	@ 0x68
 800615e:	e7e9      	b.n	8006134 <_fwalk_sglue+0x10>

08006160 <siprintf>:
 8006160:	b40e      	push	{r1, r2, r3}
 8006162:	b500      	push	{lr}
 8006164:	b09c      	sub	sp, #112	@ 0x70
 8006166:	ab1d      	add	r3, sp, #116	@ 0x74
 8006168:	9002      	str	r0, [sp, #8]
 800616a:	9006      	str	r0, [sp, #24]
 800616c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006170:	4809      	ldr	r0, [pc, #36]	@ (8006198 <siprintf+0x38>)
 8006172:	9107      	str	r1, [sp, #28]
 8006174:	9104      	str	r1, [sp, #16]
 8006176:	4909      	ldr	r1, [pc, #36]	@ (800619c <siprintf+0x3c>)
 8006178:	f853 2b04 	ldr.w	r2, [r3], #4
 800617c:	9105      	str	r1, [sp, #20]
 800617e:	6800      	ldr	r0, [r0, #0]
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	a902      	add	r1, sp, #8
 8006184:	f001 fbfa 	bl	800797c <_svfiprintf_r>
 8006188:	9b02      	ldr	r3, [sp, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	b01c      	add	sp, #112	@ 0x70
 8006190:	f85d eb04 	ldr.w	lr, [sp], #4
 8006194:	b003      	add	sp, #12
 8006196:	4770      	bx	lr
 8006198:	20000018 	.word	0x20000018
 800619c:	ffff0208 	.word	0xffff0208

080061a0 <__sread>:
 80061a0:	b510      	push	{r4, lr}
 80061a2:	460c      	mov	r4, r1
 80061a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a8:	f000 f86c 	bl	8006284 <_read_r>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	bfab      	itete	ge
 80061b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061b2:	89a3      	ldrhlt	r3, [r4, #12]
 80061b4:	181b      	addge	r3, r3, r0
 80061b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061ba:	bfac      	ite	ge
 80061bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061be:	81a3      	strhlt	r3, [r4, #12]
 80061c0:	bd10      	pop	{r4, pc}

080061c2 <__swrite>:
 80061c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c6:	461f      	mov	r7, r3
 80061c8:	898b      	ldrh	r3, [r1, #12]
 80061ca:	05db      	lsls	r3, r3, #23
 80061cc:	4605      	mov	r5, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	4616      	mov	r6, r2
 80061d2:	d505      	bpl.n	80061e0 <__swrite+0x1e>
 80061d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d8:	2302      	movs	r3, #2
 80061da:	2200      	movs	r2, #0
 80061dc:	f000 f840 	bl	8006260 <_lseek_r>
 80061e0:	89a3      	ldrh	r3, [r4, #12]
 80061e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061ea:	81a3      	strh	r3, [r4, #12]
 80061ec:	4632      	mov	r2, r6
 80061ee:	463b      	mov	r3, r7
 80061f0:	4628      	mov	r0, r5
 80061f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061f6:	f000 b857 	b.w	80062a8 <_write_r>

080061fa <__sseek>:
 80061fa:	b510      	push	{r4, lr}
 80061fc:	460c      	mov	r4, r1
 80061fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006202:	f000 f82d 	bl	8006260 <_lseek_r>
 8006206:	1c43      	adds	r3, r0, #1
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	bf15      	itete	ne
 800620c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800620e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006212:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006216:	81a3      	strheq	r3, [r4, #12]
 8006218:	bf18      	it	ne
 800621a:	81a3      	strhne	r3, [r4, #12]
 800621c:	bd10      	pop	{r4, pc}

0800621e <__sclose>:
 800621e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006222:	f000 b80d 	b.w	8006240 <_close_r>

08006226 <memset>:
 8006226:	4402      	add	r2, r0
 8006228:	4603      	mov	r3, r0
 800622a:	4293      	cmp	r3, r2
 800622c:	d100      	bne.n	8006230 <memset+0xa>
 800622e:	4770      	bx	lr
 8006230:	f803 1b01 	strb.w	r1, [r3], #1
 8006234:	e7f9      	b.n	800622a <memset+0x4>
	...

08006238 <_localeconv_r>:
 8006238:	4800      	ldr	r0, [pc, #0]	@ (800623c <_localeconv_r+0x4>)
 800623a:	4770      	bx	lr
 800623c:	20000158 	.word	0x20000158

08006240 <_close_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4d06      	ldr	r5, [pc, #24]	@ (800625c <_close_r+0x1c>)
 8006244:	2300      	movs	r3, #0
 8006246:	4604      	mov	r4, r0
 8006248:	4608      	mov	r0, r1
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	f7fc f834 	bl	80022b8 <_close>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_close_r+0x1a>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_close_r+0x1a>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	200004a0 	.word	0x200004a0

08006260 <_lseek_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4d07      	ldr	r5, [pc, #28]	@ (8006280 <_lseek_r+0x20>)
 8006264:	4604      	mov	r4, r0
 8006266:	4608      	mov	r0, r1
 8006268:	4611      	mov	r1, r2
 800626a:	2200      	movs	r2, #0
 800626c:	602a      	str	r2, [r5, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	f7fc f849 	bl	8002306 <_lseek>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d102      	bne.n	800627e <_lseek_r+0x1e>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	b103      	cbz	r3, 800627e <_lseek_r+0x1e>
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	200004a0 	.word	0x200004a0

08006284 <_read_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4d07      	ldr	r5, [pc, #28]	@ (80062a4 <_read_r+0x20>)
 8006288:	4604      	mov	r4, r0
 800628a:	4608      	mov	r0, r1
 800628c:	4611      	mov	r1, r2
 800628e:	2200      	movs	r2, #0
 8006290:	602a      	str	r2, [r5, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	f7fb ffd7 	bl	8002246 <_read>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <_read_r+0x1e>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	b103      	cbz	r3, 80062a2 <_read_r+0x1e>
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	200004a0 	.word	0x200004a0

080062a8 <_write_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4d07      	ldr	r5, [pc, #28]	@ (80062c8 <_write_r+0x20>)
 80062ac:	4604      	mov	r4, r0
 80062ae:	4608      	mov	r0, r1
 80062b0:	4611      	mov	r1, r2
 80062b2:	2200      	movs	r2, #0
 80062b4:	602a      	str	r2, [r5, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f7fb ffe2 	bl	8002280 <_write>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_write_r+0x1e>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_write_r+0x1e>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	200004a0 	.word	0x200004a0

080062cc <__errno>:
 80062cc:	4b01      	ldr	r3, [pc, #4]	@ (80062d4 <__errno+0x8>)
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000018 	.word	0x20000018

080062d8 <__libc_init_array>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	4d0d      	ldr	r5, [pc, #52]	@ (8006310 <__libc_init_array+0x38>)
 80062dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006314 <__libc_init_array+0x3c>)
 80062de:	1b64      	subs	r4, r4, r5
 80062e0:	10a4      	asrs	r4, r4, #2
 80062e2:	2600      	movs	r6, #0
 80062e4:	42a6      	cmp	r6, r4
 80062e6:	d109      	bne.n	80062fc <__libc_init_array+0x24>
 80062e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006318 <__libc_init_array+0x40>)
 80062ea:	4c0c      	ldr	r4, [pc, #48]	@ (800631c <__libc_init_array+0x44>)
 80062ec:	f002 f864 	bl	80083b8 <_init>
 80062f0:	1b64      	subs	r4, r4, r5
 80062f2:	10a4      	asrs	r4, r4, #2
 80062f4:	2600      	movs	r6, #0
 80062f6:	42a6      	cmp	r6, r4
 80062f8:	d105      	bne.n	8006306 <__libc_init_array+0x2e>
 80062fa:	bd70      	pop	{r4, r5, r6, pc}
 80062fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006300:	4798      	blx	r3
 8006302:	3601      	adds	r6, #1
 8006304:	e7ee      	b.n	80062e4 <__libc_init_array+0xc>
 8006306:	f855 3b04 	ldr.w	r3, [r5], #4
 800630a:	4798      	blx	r3
 800630c:	3601      	adds	r6, #1
 800630e:	e7f2      	b.n	80062f6 <__libc_init_array+0x1e>
 8006310:	080087f8 	.word	0x080087f8
 8006314:	080087f8 	.word	0x080087f8
 8006318:	080087f8 	.word	0x080087f8
 800631c:	080087fc 	.word	0x080087fc

08006320 <__retarget_lock_init_recursive>:
 8006320:	4770      	bx	lr

08006322 <__retarget_lock_acquire_recursive>:
 8006322:	4770      	bx	lr

08006324 <__retarget_lock_release_recursive>:
 8006324:	4770      	bx	lr

08006326 <quorem>:
 8006326:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632a:	6903      	ldr	r3, [r0, #16]
 800632c:	690c      	ldr	r4, [r1, #16]
 800632e:	42a3      	cmp	r3, r4
 8006330:	4607      	mov	r7, r0
 8006332:	db7e      	blt.n	8006432 <quorem+0x10c>
 8006334:	3c01      	subs	r4, #1
 8006336:	f101 0814 	add.w	r8, r1, #20
 800633a:	00a3      	lsls	r3, r4, #2
 800633c:	f100 0514 	add.w	r5, r0, #20
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800634c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006350:	3301      	adds	r3, #1
 8006352:	429a      	cmp	r2, r3
 8006354:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006358:	fbb2 f6f3 	udiv	r6, r2, r3
 800635c:	d32e      	bcc.n	80063bc <quorem+0x96>
 800635e:	f04f 0a00 	mov.w	sl, #0
 8006362:	46c4      	mov	ip, r8
 8006364:	46ae      	mov	lr, r5
 8006366:	46d3      	mov	fp, sl
 8006368:	f85c 3b04 	ldr.w	r3, [ip], #4
 800636c:	b298      	uxth	r0, r3
 800636e:	fb06 a000 	mla	r0, r6, r0, sl
 8006372:	0c02      	lsrs	r2, r0, #16
 8006374:	0c1b      	lsrs	r3, r3, #16
 8006376:	fb06 2303 	mla	r3, r6, r3, r2
 800637a:	f8de 2000 	ldr.w	r2, [lr]
 800637e:	b280      	uxth	r0, r0
 8006380:	b292      	uxth	r2, r2
 8006382:	1a12      	subs	r2, r2, r0
 8006384:	445a      	add	r2, fp
 8006386:	f8de 0000 	ldr.w	r0, [lr]
 800638a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800638e:	b29b      	uxth	r3, r3
 8006390:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006394:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006398:	b292      	uxth	r2, r2
 800639a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800639e:	45e1      	cmp	r9, ip
 80063a0:	f84e 2b04 	str.w	r2, [lr], #4
 80063a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063a8:	d2de      	bcs.n	8006368 <quorem+0x42>
 80063aa:	9b00      	ldr	r3, [sp, #0]
 80063ac:	58eb      	ldr	r3, [r5, r3]
 80063ae:	b92b      	cbnz	r3, 80063bc <quorem+0x96>
 80063b0:	9b01      	ldr	r3, [sp, #4]
 80063b2:	3b04      	subs	r3, #4
 80063b4:	429d      	cmp	r5, r3
 80063b6:	461a      	mov	r2, r3
 80063b8:	d32f      	bcc.n	800641a <quorem+0xf4>
 80063ba:	613c      	str	r4, [r7, #16]
 80063bc:	4638      	mov	r0, r7
 80063be:	f001 f979 	bl	80076b4 <__mcmp>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	db25      	blt.n	8006412 <quorem+0xec>
 80063c6:	4629      	mov	r1, r5
 80063c8:	2000      	movs	r0, #0
 80063ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80063ce:	f8d1 c000 	ldr.w	ip, [r1]
 80063d2:	fa1f fe82 	uxth.w	lr, r2
 80063d6:	fa1f f38c 	uxth.w	r3, ip
 80063da:	eba3 030e 	sub.w	r3, r3, lr
 80063de:	4403      	add	r3, r0
 80063e0:	0c12      	lsrs	r2, r2, #16
 80063e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80063e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063f0:	45c1      	cmp	r9, r8
 80063f2:	f841 3b04 	str.w	r3, [r1], #4
 80063f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80063fa:	d2e6      	bcs.n	80063ca <quorem+0xa4>
 80063fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006400:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006404:	b922      	cbnz	r2, 8006410 <quorem+0xea>
 8006406:	3b04      	subs	r3, #4
 8006408:	429d      	cmp	r5, r3
 800640a:	461a      	mov	r2, r3
 800640c:	d30b      	bcc.n	8006426 <quorem+0x100>
 800640e:	613c      	str	r4, [r7, #16]
 8006410:	3601      	adds	r6, #1
 8006412:	4630      	mov	r0, r6
 8006414:	b003      	add	sp, #12
 8006416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	3b04      	subs	r3, #4
 800641e:	2a00      	cmp	r2, #0
 8006420:	d1cb      	bne.n	80063ba <quorem+0x94>
 8006422:	3c01      	subs	r4, #1
 8006424:	e7c6      	b.n	80063b4 <quorem+0x8e>
 8006426:	6812      	ldr	r2, [r2, #0]
 8006428:	3b04      	subs	r3, #4
 800642a:	2a00      	cmp	r2, #0
 800642c:	d1ef      	bne.n	800640e <quorem+0xe8>
 800642e:	3c01      	subs	r4, #1
 8006430:	e7ea      	b.n	8006408 <quorem+0xe2>
 8006432:	2000      	movs	r0, #0
 8006434:	e7ee      	b.n	8006414 <quorem+0xee>
	...

08006438 <_dtoa_r>:
 8006438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643c:	69c7      	ldr	r7, [r0, #28]
 800643e:	b099      	sub	sp, #100	@ 0x64
 8006440:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006444:	ec55 4b10 	vmov	r4, r5, d0
 8006448:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800644a:	9109      	str	r1, [sp, #36]	@ 0x24
 800644c:	4683      	mov	fp, r0
 800644e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006450:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006452:	b97f      	cbnz	r7, 8006474 <_dtoa_r+0x3c>
 8006454:	2010      	movs	r0, #16
 8006456:	f000 fdfd 	bl	8007054 <malloc>
 800645a:	4602      	mov	r2, r0
 800645c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006460:	b920      	cbnz	r0, 800646c <_dtoa_r+0x34>
 8006462:	4ba7      	ldr	r3, [pc, #668]	@ (8006700 <_dtoa_r+0x2c8>)
 8006464:	21ef      	movs	r1, #239	@ 0xef
 8006466:	48a7      	ldr	r0, [pc, #668]	@ (8006704 <_dtoa_r+0x2cc>)
 8006468:	f001 fc68 	bl	8007d3c <__assert_func>
 800646c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006470:	6007      	str	r7, [r0, #0]
 8006472:	60c7      	str	r7, [r0, #12]
 8006474:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006478:	6819      	ldr	r1, [r3, #0]
 800647a:	b159      	cbz	r1, 8006494 <_dtoa_r+0x5c>
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	604a      	str	r2, [r1, #4]
 8006480:	2301      	movs	r3, #1
 8006482:	4093      	lsls	r3, r2
 8006484:	608b      	str	r3, [r1, #8]
 8006486:	4658      	mov	r0, fp
 8006488:	f000 feda 	bl	8007240 <_Bfree>
 800648c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	1e2b      	subs	r3, r5, #0
 8006496:	bfb9      	ittee	lt
 8006498:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800649c:	9303      	strlt	r3, [sp, #12]
 800649e:	2300      	movge	r3, #0
 80064a0:	6033      	strge	r3, [r6, #0]
 80064a2:	9f03      	ldr	r7, [sp, #12]
 80064a4:	4b98      	ldr	r3, [pc, #608]	@ (8006708 <_dtoa_r+0x2d0>)
 80064a6:	bfbc      	itt	lt
 80064a8:	2201      	movlt	r2, #1
 80064aa:	6032      	strlt	r2, [r6, #0]
 80064ac:	43bb      	bics	r3, r7
 80064ae:	d112      	bne.n	80064d6 <_dtoa_r+0x9e>
 80064b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80064b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064bc:	4323      	orrs	r3, r4
 80064be:	f000 854d 	beq.w	8006f5c <_dtoa_r+0xb24>
 80064c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80064c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800671c <_dtoa_r+0x2e4>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 854f 	beq.w	8006f6c <_dtoa_r+0xb34>
 80064ce:	f10a 0303 	add.w	r3, sl, #3
 80064d2:	f000 bd49 	b.w	8006f68 <_dtoa_r+0xb30>
 80064d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064da:	2200      	movs	r2, #0
 80064dc:	ec51 0b17 	vmov	r0, r1, d7
 80064e0:	2300      	movs	r3, #0
 80064e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80064e6:	f7fa fb0f 	bl	8000b08 <__aeabi_dcmpeq>
 80064ea:	4680      	mov	r8, r0
 80064ec:	b158      	cbz	r0, 8006506 <_dtoa_r+0xce>
 80064ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80064f0:	2301      	movs	r3, #1
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80064f6:	b113      	cbz	r3, 80064fe <_dtoa_r+0xc6>
 80064f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80064fa:	4b84      	ldr	r3, [pc, #528]	@ (800670c <_dtoa_r+0x2d4>)
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006720 <_dtoa_r+0x2e8>
 8006502:	f000 bd33 	b.w	8006f6c <_dtoa_r+0xb34>
 8006506:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800650a:	aa16      	add	r2, sp, #88	@ 0x58
 800650c:	a917      	add	r1, sp, #92	@ 0x5c
 800650e:	4658      	mov	r0, fp
 8006510:	f001 f980 	bl	8007814 <__d2b>
 8006514:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006518:	4681      	mov	r9, r0
 800651a:	2e00      	cmp	r6, #0
 800651c:	d077      	beq.n	800660e <_dtoa_r+0x1d6>
 800651e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006520:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800652c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006530:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006534:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006538:	4619      	mov	r1, r3
 800653a:	2200      	movs	r2, #0
 800653c:	4b74      	ldr	r3, [pc, #464]	@ (8006710 <_dtoa_r+0x2d8>)
 800653e:	f7f9 fec3 	bl	80002c8 <__aeabi_dsub>
 8006542:	a369      	add	r3, pc, #420	@ (adr r3, 80066e8 <_dtoa_r+0x2b0>)
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f7fa f876 	bl	8000638 <__aeabi_dmul>
 800654c:	a368      	add	r3, pc, #416	@ (adr r3, 80066f0 <_dtoa_r+0x2b8>)
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	f7f9 febb 	bl	80002cc <__adddf3>
 8006556:	4604      	mov	r4, r0
 8006558:	4630      	mov	r0, r6
 800655a:	460d      	mov	r5, r1
 800655c:	f7fa f802 	bl	8000564 <__aeabi_i2d>
 8006560:	a365      	add	r3, pc, #404	@ (adr r3, 80066f8 <_dtoa_r+0x2c0>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f7fa f867 	bl	8000638 <__aeabi_dmul>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4620      	mov	r0, r4
 8006570:	4629      	mov	r1, r5
 8006572:	f7f9 feab 	bl	80002cc <__adddf3>
 8006576:	4604      	mov	r4, r0
 8006578:	460d      	mov	r5, r1
 800657a:	f7fa fb0d 	bl	8000b98 <__aeabi_d2iz>
 800657e:	2200      	movs	r2, #0
 8006580:	4607      	mov	r7, r0
 8006582:	2300      	movs	r3, #0
 8006584:	4620      	mov	r0, r4
 8006586:	4629      	mov	r1, r5
 8006588:	f7fa fac8 	bl	8000b1c <__aeabi_dcmplt>
 800658c:	b140      	cbz	r0, 80065a0 <_dtoa_r+0x168>
 800658e:	4638      	mov	r0, r7
 8006590:	f7f9 ffe8 	bl	8000564 <__aeabi_i2d>
 8006594:	4622      	mov	r2, r4
 8006596:	462b      	mov	r3, r5
 8006598:	f7fa fab6 	bl	8000b08 <__aeabi_dcmpeq>
 800659c:	b900      	cbnz	r0, 80065a0 <_dtoa_r+0x168>
 800659e:	3f01      	subs	r7, #1
 80065a0:	2f16      	cmp	r7, #22
 80065a2:	d851      	bhi.n	8006648 <_dtoa_r+0x210>
 80065a4:	4b5b      	ldr	r3, [pc, #364]	@ (8006714 <_dtoa_r+0x2dc>)
 80065a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065b2:	f7fa fab3 	bl	8000b1c <__aeabi_dcmplt>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d048      	beq.n	800664c <_dtoa_r+0x214>
 80065ba:	3f01      	subs	r7, #1
 80065bc:	2300      	movs	r3, #0
 80065be:	9312      	str	r3, [sp, #72]	@ 0x48
 80065c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80065c2:	1b9b      	subs	r3, r3, r6
 80065c4:	1e5a      	subs	r2, r3, #1
 80065c6:	bf44      	itt	mi
 80065c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80065cc:	2300      	movmi	r3, #0
 80065ce:	9208      	str	r2, [sp, #32]
 80065d0:	bf54      	ite	pl
 80065d2:	f04f 0800 	movpl.w	r8, #0
 80065d6:	9308      	strmi	r3, [sp, #32]
 80065d8:	2f00      	cmp	r7, #0
 80065da:	db39      	blt.n	8006650 <_dtoa_r+0x218>
 80065dc:	9b08      	ldr	r3, [sp, #32]
 80065de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80065e0:	443b      	add	r3, r7
 80065e2:	9308      	str	r3, [sp, #32]
 80065e4:	2300      	movs	r3, #0
 80065e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80065e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ea:	2b09      	cmp	r3, #9
 80065ec:	d864      	bhi.n	80066b8 <_dtoa_r+0x280>
 80065ee:	2b05      	cmp	r3, #5
 80065f0:	bfc4      	itt	gt
 80065f2:	3b04      	subgt	r3, #4
 80065f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80065f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f8:	f1a3 0302 	sub.w	r3, r3, #2
 80065fc:	bfcc      	ite	gt
 80065fe:	2400      	movgt	r4, #0
 8006600:	2401      	movle	r4, #1
 8006602:	2b03      	cmp	r3, #3
 8006604:	d863      	bhi.n	80066ce <_dtoa_r+0x296>
 8006606:	e8df f003 	tbb	[pc, r3]
 800660a:	372a      	.short	0x372a
 800660c:	5535      	.short	0x5535
 800660e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006612:	441e      	add	r6, r3
 8006614:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006618:	2b20      	cmp	r3, #32
 800661a:	bfc1      	itttt	gt
 800661c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006620:	409f      	lslgt	r7, r3
 8006622:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006626:	fa24 f303 	lsrgt.w	r3, r4, r3
 800662a:	bfd6      	itet	le
 800662c:	f1c3 0320 	rsble	r3, r3, #32
 8006630:	ea47 0003 	orrgt.w	r0, r7, r3
 8006634:	fa04 f003 	lslle.w	r0, r4, r3
 8006638:	f7f9 ff84 	bl	8000544 <__aeabi_ui2d>
 800663c:	2201      	movs	r2, #1
 800663e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006642:	3e01      	subs	r6, #1
 8006644:	9214      	str	r2, [sp, #80]	@ 0x50
 8006646:	e777      	b.n	8006538 <_dtoa_r+0x100>
 8006648:	2301      	movs	r3, #1
 800664a:	e7b8      	b.n	80065be <_dtoa_r+0x186>
 800664c:	9012      	str	r0, [sp, #72]	@ 0x48
 800664e:	e7b7      	b.n	80065c0 <_dtoa_r+0x188>
 8006650:	427b      	negs	r3, r7
 8006652:	930a      	str	r3, [sp, #40]	@ 0x28
 8006654:	2300      	movs	r3, #0
 8006656:	eba8 0807 	sub.w	r8, r8, r7
 800665a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800665c:	e7c4      	b.n	80065e8 <_dtoa_r+0x1b0>
 800665e:	2300      	movs	r3, #0
 8006660:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006664:	2b00      	cmp	r3, #0
 8006666:	dc35      	bgt.n	80066d4 <_dtoa_r+0x29c>
 8006668:	2301      	movs	r3, #1
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	9307      	str	r3, [sp, #28]
 800666e:	461a      	mov	r2, r3
 8006670:	920e      	str	r2, [sp, #56]	@ 0x38
 8006672:	e00b      	b.n	800668c <_dtoa_r+0x254>
 8006674:	2301      	movs	r3, #1
 8006676:	e7f3      	b.n	8006660 <_dtoa_r+0x228>
 8006678:	2300      	movs	r3, #0
 800667a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800667c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	2b01      	cmp	r3, #1
 8006686:	9307      	str	r3, [sp, #28]
 8006688:	bfb8      	it	lt
 800668a:	2301      	movlt	r3, #1
 800668c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006690:	2100      	movs	r1, #0
 8006692:	2204      	movs	r2, #4
 8006694:	f102 0514 	add.w	r5, r2, #20
 8006698:	429d      	cmp	r5, r3
 800669a:	d91f      	bls.n	80066dc <_dtoa_r+0x2a4>
 800669c:	6041      	str	r1, [r0, #4]
 800669e:	4658      	mov	r0, fp
 80066a0:	f000 fd8e 	bl	80071c0 <_Balloc>
 80066a4:	4682      	mov	sl, r0
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d13c      	bne.n	8006724 <_dtoa_r+0x2ec>
 80066aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006718 <_dtoa_r+0x2e0>)
 80066ac:	4602      	mov	r2, r0
 80066ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80066b2:	e6d8      	b.n	8006466 <_dtoa_r+0x2e>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e7e0      	b.n	800667a <_dtoa_r+0x242>
 80066b8:	2401      	movs	r4, #1
 80066ba:	2300      	movs	r3, #0
 80066bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80066be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80066c0:	f04f 33ff 	mov.w	r3, #4294967295
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	9307      	str	r3, [sp, #28]
 80066c8:	2200      	movs	r2, #0
 80066ca:	2312      	movs	r3, #18
 80066cc:	e7d0      	b.n	8006670 <_dtoa_r+0x238>
 80066ce:	2301      	movs	r3, #1
 80066d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066d2:	e7f5      	b.n	80066c0 <_dtoa_r+0x288>
 80066d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	9307      	str	r3, [sp, #28]
 80066da:	e7d7      	b.n	800668c <_dtoa_r+0x254>
 80066dc:	3101      	adds	r1, #1
 80066de:	0052      	lsls	r2, r2, #1
 80066e0:	e7d8      	b.n	8006694 <_dtoa_r+0x25c>
 80066e2:	bf00      	nop
 80066e4:	f3af 8000 	nop.w
 80066e8:	636f4361 	.word	0x636f4361
 80066ec:	3fd287a7 	.word	0x3fd287a7
 80066f0:	8b60c8b3 	.word	0x8b60c8b3
 80066f4:	3fc68a28 	.word	0x3fc68a28
 80066f8:	509f79fb 	.word	0x509f79fb
 80066fc:	3fd34413 	.word	0x3fd34413
 8006700:	080084c1 	.word	0x080084c1
 8006704:	080084d8 	.word	0x080084d8
 8006708:	7ff00000 	.word	0x7ff00000
 800670c:	08008491 	.word	0x08008491
 8006710:	3ff80000 	.word	0x3ff80000
 8006714:	080085d0 	.word	0x080085d0
 8006718:	08008530 	.word	0x08008530
 800671c:	080084bd 	.word	0x080084bd
 8006720:	08008490 	.word	0x08008490
 8006724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006728:	6018      	str	r0, [r3, #0]
 800672a:	9b07      	ldr	r3, [sp, #28]
 800672c:	2b0e      	cmp	r3, #14
 800672e:	f200 80a4 	bhi.w	800687a <_dtoa_r+0x442>
 8006732:	2c00      	cmp	r4, #0
 8006734:	f000 80a1 	beq.w	800687a <_dtoa_r+0x442>
 8006738:	2f00      	cmp	r7, #0
 800673a:	dd33      	ble.n	80067a4 <_dtoa_r+0x36c>
 800673c:	4bad      	ldr	r3, [pc, #692]	@ (80069f4 <_dtoa_r+0x5bc>)
 800673e:	f007 020f 	and.w	r2, r7, #15
 8006742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006746:	ed93 7b00 	vldr	d7, [r3]
 800674a:	05f8      	lsls	r0, r7, #23
 800674c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006750:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006754:	d516      	bpl.n	8006784 <_dtoa_r+0x34c>
 8006756:	4ba8      	ldr	r3, [pc, #672]	@ (80069f8 <_dtoa_r+0x5c0>)
 8006758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800675c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006760:	f7fa f894 	bl	800088c <__aeabi_ddiv>
 8006764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006768:	f004 040f 	and.w	r4, r4, #15
 800676c:	2603      	movs	r6, #3
 800676e:	4da2      	ldr	r5, [pc, #648]	@ (80069f8 <_dtoa_r+0x5c0>)
 8006770:	b954      	cbnz	r4, 8006788 <_dtoa_r+0x350>
 8006772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800677a:	f7fa f887 	bl	800088c <__aeabi_ddiv>
 800677e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006782:	e028      	b.n	80067d6 <_dtoa_r+0x39e>
 8006784:	2602      	movs	r6, #2
 8006786:	e7f2      	b.n	800676e <_dtoa_r+0x336>
 8006788:	07e1      	lsls	r1, r4, #31
 800678a:	d508      	bpl.n	800679e <_dtoa_r+0x366>
 800678c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006790:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006794:	f7f9 ff50 	bl	8000638 <__aeabi_dmul>
 8006798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800679c:	3601      	adds	r6, #1
 800679e:	1064      	asrs	r4, r4, #1
 80067a0:	3508      	adds	r5, #8
 80067a2:	e7e5      	b.n	8006770 <_dtoa_r+0x338>
 80067a4:	f000 80d2 	beq.w	800694c <_dtoa_r+0x514>
 80067a8:	427c      	negs	r4, r7
 80067aa:	4b92      	ldr	r3, [pc, #584]	@ (80069f4 <_dtoa_r+0x5bc>)
 80067ac:	4d92      	ldr	r5, [pc, #584]	@ (80069f8 <_dtoa_r+0x5c0>)
 80067ae:	f004 020f 	and.w	r2, r4, #15
 80067b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067be:	f7f9 ff3b 	bl	8000638 <__aeabi_dmul>
 80067c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c6:	1124      	asrs	r4, r4, #4
 80067c8:	2300      	movs	r3, #0
 80067ca:	2602      	movs	r6, #2
 80067cc:	2c00      	cmp	r4, #0
 80067ce:	f040 80b2 	bne.w	8006936 <_dtoa_r+0x4fe>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1d3      	bne.n	800677e <_dtoa_r+0x346>
 80067d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80067d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 80b7 	beq.w	8006950 <_dtoa_r+0x518>
 80067e2:	4b86      	ldr	r3, [pc, #536]	@ (80069fc <_dtoa_r+0x5c4>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	4620      	mov	r0, r4
 80067e8:	4629      	mov	r1, r5
 80067ea:	f7fa f997 	bl	8000b1c <__aeabi_dcmplt>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	f000 80ae 	beq.w	8006950 <_dtoa_r+0x518>
 80067f4:	9b07      	ldr	r3, [sp, #28]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 80aa 	beq.w	8006950 <_dtoa_r+0x518>
 80067fc:	9b00      	ldr	r3, [sp, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dd37      	ble.n	8006872 <_dtoa_r+0x43a>
 8006802:	1e7b      	subs	r3, r7, #1
 8006804:	9304      	str	r3, [sp, #16]
 8006806:	4620      	mov	r0, r4
 8006808:	4b7d      	ldr	r3, [pc, #500]	@ (8006a00 <_dtoa_r+0x5c8>)
 800680a:	2200      	movs	r2, #0
 800680c:	4629      	mov	r1, r5
 800680e:	f7f9 ff13 	bl	8000638 <__aeabi_dmul>
 8006812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006816:	9c00      	ldr	r4, [sp, #0]
 8006818:	3601      	adds	r6, #1
 800681a:	4630      	mov	r0, r6
 800681c:	f7f9 fea2 	bl	8000564 <__aeabi_i2d>
 8006820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006824:	f7f9 ff08 	bl	8000638 <__aeabi_dmul>
 8006828:	4b76      	ldr	r3, [pc, #472]	@ (8006a04 <_dtoa_r+0x5cc>)
 800682a:	2200      	movs	r2, #0
 800682c:	f7f9 fd4e 	bl	80002cc <__adddf3>
 8006830:	4605      	mov	r5, r0
 8006832:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006836:	2c00      	cmp	r4, #0
 8006838:	f040 808d 	bne.w	8006956 <_dtoa_r+0x51e>
 800683c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006840:	4b71      	ldr	r3, [pc, #452]	@ (8006a08 <_dtoa_r+0x5d0>)
 8006842:	2200      	movs	r2, #0
 8006844:	f7f9 fd40 	bl	80002c8 <__aeabi_dsub>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006850:	462a      	mov	r2, r5
 8006852:	4633      	mov	r3, r6
 8006854:	f7fa f980 	bl	8000b58 <__aeabi_dcmpgt>
 8006858:	2800      	cmp	r0, #0
 800685a:	f040 828b 	bne.w	8006d74 <_dtoa_r+0x93c>
 800685e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006862:	462a      	mov	r2, r5
 8006864:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006868:	f7fa f958 	bl	8000b1c <__aeabi_dcmplt>
 800686c:	2800      	cmp	r0, #0
 800686e:	f040 8128 	bne.w	8006ac2 <_dtoa_r+0x68a>
 8006872:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006876:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800687a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800687c:	2b00      	cmp	r3, #0
 800687e:	f2c0 815a 	blt.w	8006b36 <_dtoa_r+0x6fe>
 8006882:	2f0e      	cmp	r7, #14
 8006884:	f300 8157 	bgt.w	8006b36 <_dtoa_r+0x6fe>
 8006888:	4b5a      	ldr	r3, [pc, #360]	@ (80069f4 <_dtoa_r+0x5bc>)
 800688a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800688e:	ed93 7b00 	vldr	d7, [r3]
 8006892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006894:	2b00      	cmp	r3, #0
 8006896:	ed8d 7b00 	vstr	d7, [sp]
 800689a:	da03      	bge.n	80068a4 <_dtoa_r+0x46c>
 800689c:	9b07      	ldr	r3, [sp, #28]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f340 8101 	ble.w	8006aa6 <_dtoa_r+0x66e>
 80068a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068a8:	4656      	mov	r6, sl
 80068aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068ae:	4620      	mov	r0, r4
 80068b0:	4629      	mov	r1, r5
 80068b2:	f7f9 ffeb 	bl	800088c <__aeabi_ddiv>
 80068b6:	f7fa f96f 	bl	8000b98 <__aeabi_d2iz>
 80068ba:	4680      	mov	r8, r0
 80068bc:	f7f9 fe52 	bl	8000564 <__aeabi_i2d>
 80068c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068c4:	f7f9 feb8 	bl	8000638 <__aeabi_dmul>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4620      	mov	r0, r4
 80068ce:	4629      	mov	r1, r5
 80068d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80068d4:	f7f9 fcf8 	bl	80002c8 <__aeabi_dsub>
 80068d8:	f806 4b01 	strb.w	r4, [r6], #1
 80068dc:	9d07      	ldr	r5, [sp, #28]
 80068de:	eba6 040a 	sub.w	r4, r6, sl
 80068e2:	42a5      	cmp	r5, r4
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	f040 8117 	bne.w	8006b1a <_dtoa_r+0x6e2>
 80068ec:	f7f9 fcee 	bl	80002cc <__adddf3>
 80068f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068f4:	4604      	mov	r4, r0
 80068f6:	460d      	mov	r5, r1
 80068f8:	f7fa f92e 	bl	8000b58 <__aeabi_dcmpgt>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f040 80f9 	bne.w	8006af4 <_dtoa_r+0x6bc>
 8006902:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006906:	4620      	mov	r0, r4
 8006908:	4629      	mov	r1, r5
 800690a:	f7fa f8fd 	bl	8000b08 <__aeabi_dcmpeq>
 800690e:	b118      	cbz	r0, 8006918 <_dtoa_r+0x4e0>
 8006910:	f018 0f01 	tst.w	r8, #1
 8006914:	f040 80ee 	bne.w	8006af4 <_dtoa_r+0x6bc>
 8006918:	4649      	mov	r1, r9
 800691a:	4658      	mov	r0, fp
 800691c:	f000 fc90 	bl	8007240 <_Bfree>
 8006920:	2300      	movs	r3, #0
 8006922:	7033      	strb	r3, [r6, #0]
 8006924:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006926:	3701      	adds	r7, #1
 8006928:	601f      	str	r7, [r3, #0]
 800692a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 831d 	beq.w	8006f6c <_dtoa_r+0xb34>
 8006932:	601e      	str	r6, [r3, #0]
 8006934:	e31a      	b.n	8006f6c <_dtoa_r+0xb34>
 8006936:	07e2      	lsls	r2, r4, #31
 8006938:	d505      	bpl.n	8006946 <_dtoa_r+0x50e>
 800693a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800693e:	f7f9 fe7b 	bl	8000638 <__aeabi_dmul>
 8006942:	3601      	adds	r6, #1
 8006944:	2301      	movs	r3, #1
 8006946:	1064      	asrs	r4, r4, #1
 8006948:	3508      	adds	r5, #8
 800694a:	e73f      	b.n	80067cc <_dtoa_r+0x394>
 800694c:	2602      	movs	r6, #2
 800694e:	e742      	b.n	80067d6 <_dtoa_r+0x39e>
 8006950:	9c07      	ldr	r4, [sp, #28]
 8006952:	9704      	str	r7, [sp, #16]
 8006954:	e761      	b.n	800681a <_dtoa_r+0x3e2>
 8006956:	4b27      	ldr	r3, [pc, #156]	@ (80069f4 <_dtoa_r+0x5bc>)
 8006958:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800695a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800695e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006962:	4454      	add	r4, sl
 8006964:	2900      	cmp	r1, #0
 8006966:	d053      	beq.n	8006a10 <_dtoa_r+0x5d8>
 8006968:	4928      	ldr	r1, [pc, #160]	@ (8006a0c <_dtoa_r+0x5d4>)
 800696a:	2000      	movs	r0, #0
 800696c:	f7f9 ff8e 	bl	800088c <__aeabi_ddiv>
 8006970:	4633      	mov	r3, r6
 8006972:	462a      	mov	r2, r5
 8006974:	f7f9 fca8 	bl	80002c8 <__aeabi_dsub>
 8006978:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800697c:	4656      	mov	r6, sl
 800697e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006982:	f7fa f909 	bl	8000b98 <__aeabi_d2iz>
 8006986:	4605      	mov	r5, r0
 8006988:	f7f9 fdec 	bl	8000564 <__aeabi_i2d>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006994:	f7f9 fc98 	bl	80002c8 <__aeabi_dsub>
 8006998:	3530      	adds	r5, #48	@ 0x30
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069a2:	f806 5b01 	strb.w	r5, [r6], #1
 80069a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069aa:	f7fa f8b7 	bl	8000b1c <__aeabi_dcmplt>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d171      	bne.n	8006a96 <_dtoa_r+0x65e>
 80069b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069b6:	4911      	ldr	r1, [pc, #68]	@ (80069fc <_dtoa_r+0x5c4>)
 80069b8:	2000      	movs	r0, #0
 80069ba:	f7f9 fc85 	bl	80002c8 <__aeabi_dsub>
 80069be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069c2:	f7fa f8ab 	bl	8000b1c <__aeabi_dcmplt>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f040 8095 	bne.w	8006af6 <_dtoa_r+0x6be>
 80069cc:	42a6      	cmp	r6, r4
 80069ce:	f43f af50 	beq.w	8006872 <_dtoa_r+0x43a>
 80069d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006a00 <_dtoa_r+0x5c8>)
 80069d8:	2200      	movs	r2, #0
 80069da:	f7f9 fe2d 	bl	8000638 <__aeabi_dmul>
 80069de:	4b08      	ldr	r3, [pc, #32]	@ (8006a00 <_dtoa_r+0x5c8>)
 80069e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069e4:	2200      	movs	r2, #0
 80069e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ea:	f7f9 fe25 	bl	8000638 <__aeabi_dmul>
 80069ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f2:	e7c4      	b.n	800697e <_dtoa_r+0x546>
 80069f4:	080085d0 	.word	0x080085d0
 80069f8:	080085a8 	.word	0x080085a8
 80069fc:	3ff00000 	.word	0x3ff00000
 8006a00:	40240000 	.word	0x40240000
 8006a04:	401c0000 	.word	0x401c0000
 8006a08:	40140000 	.word	0x40140000
 8006a0c:	3fe00000 	.word	0x3fe00000
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	f7f9 fe10 	bl	8000638 <__aeabi_dmul>
 8006a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006a1e:	4656      	mov	r6, sl
 8006a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a24:	f7fa f8b8 	bl	8000b98 <__aeabi_d2iz>
 8006a28:	4605      	mov	r5, r0
 8006a2a:	f7f9 fd9b 	bl	8000564 <__aeabi_i2d>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a36:	f7f9 fc47 	bl	80002c8 <__aeabi_dsub>
 8006a3a:	3530      	adds	r5, #48	@ 0x30
 8006a3c:	f806 5b01 	strb.w	r5, [r6], #1
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	42a6      	cmp	r6, r4
 8006a46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	d124      	bne.n	8006a9a <_dtoa_r+0x662>
 8006a50:	4bac      	ldr	r3, [pc, #688]	@ (8006d04 <_dtoa_r+0x8cc>)
 8006a52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a56:	f7f9 fc39 	bl	80002cc <__adddf3>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a62:	f7fa f879 	bl	8000b58 <__aeabi_dcmpgt>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d145      	bne.n	8006af6 <_dtoa_r+0x6be>
 8006a6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a6e:	49a5      	ldr	r1, [pc, #660]	@ (8006d04 <_dtoa_r+0x8cc>)
 8006a70:	2000      	movs	r0, #0
 8006a72:	f7f9 fc29 	bl	80002c8 <__aeabi_dsub>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a7e:	f7fa f84d 	bl	8000b1c <__aeabi_dcmplt>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	f43f aef5 	beq.w	8006872 <_dtoa_r+0x43a>
 8006a88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006a8a:	1e73      	subs	r3, r6, #1
 8006a8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a92:	2b30      	cmp	r3, #48	@ 0x30
 8006a94:	d0f8      	beq.n	8006a88 <_dtoa_r+0x650>
 8006a96:	9f04      	ldr	r7, [sp, #16]
 8006a98:	e73e      	b.n	8006918 <_dtoa_r+0x4e0>
 8006a9a:	4b9b      	ldr	r3, [pc, #620]	@ (8006d08 <_dtoa_r+0x8d0>)
 8006a9c:	f7f9 fdcc 	bl	8000638 <__aeabi_dmul>
 8006aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aa4:	e7bc      	b.n	8006a20 <_dtoa_r+0x5e8>
 8006aa6:	d10c      	bne.n	8006ac2 <_dtoa_r+0x68a>
 8006aa8:	4b98      	ldr	r3, [pc, #608]	@ (8006d0c <_dtoa_r+0x8d4>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ab0:	f7f9 fdc2 	bl	8000638 <__aeabi_dmul>
 8006ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ab8:	f7fa f844 	bl	8000b44 <__aeabi_dcmpge>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	f000 8157 	beq.w	8006d70 <_dtoa_r+0x938>
 8006ac2:	2400      	movs	r4, #0
 8006ac4:	4625      	mov	r5, r4
 8006ac6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	9304      	str	r3, [sp, #16]
 8006acc:	4656      	mov	r6, sl
 8006ace:	2700      	movs	r7, #0
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4658      	mov	r0, fp
 8006ad4:	f000 fbb4 	bl	8007240 <_Bfree>
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	d0dc      	beq.n	8006a96 <_dtoa_r+0x65e>
 8006adc:	b12f      	cbz	r7, 8006aea <_dtoa_r+0x6b2>
 8006ade:	42af      	cmp	r7, r5
 8006ae0:	d003      	beq.n	8006aea <_dtoa_r+0x6b2>
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	4658      	mov	r0, fp
 8006ae6:	f000 fbab 	bl	8007240 <_Bfree>
 8006aea:	4629      	mov	r1, r5
 8006aec:	4658      	mov	r0, fp
 8006aee:	f000 fba7 	bl	8007240 <_Bfree>
 8006af2:	e7d0      	b.n	8006a96 <_dtoa_r+0x65e>
 8006af4:	9704      	str	r7, [sp, #16]
 8006af6:	4633      	mov	r3, r6
 8006af8:	461e      	mov	r6, r3
 8006afa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006afe:	2a39      	cmp	r2, #57	@ 0x39
 8006b00:	d107      	bne.n	8006b12 <_dtoa_r+0x6da>
 8006b02:	459a      	cmp	sl, r3
 8006b04:	d1f8      	bne.n	8006af8 <_dtoa_r+0x6c0>
 8006b06:	9a04      	ldr	r2, [sp, #16]
 8006b08:	3201      	adds	r2, #1
 8006b0a:	9204      	str	r2, [sp, #16]
 8006b0c:	2230      	movs	r2, #48	@ 0x30
 8006b0e:	f88a 2000 	strb.w	r2, [sl]
 8006b12:	781a      	ldrb	r2, [r3, #0]
 8006b14:	3201      	adds	r2, #1
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	e7bd      	b.n	8006a96 <_dtoa_r+0x65e>
 8006b1a:	4b7b      	ldr	r3, [pc, #492]	@ (8006d08 <_dtoa_r+0x8d0>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f7f9 fd8b 	bl	8000638 <__aeabi_dmul>
 8006b22:	2200      	movs	r2, #0
 8006b24:	2300      	movs	r3, #0
 8006b26:	4604      	mov	r4, r0
 8006b28:	460d      	mov	r5, r1
 8006b2a:	f7f9 ffed 	bl	8000b08 <__aeabi_dcmpeq>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	f43f aebb 	beq.w	80068aa <_dtoa_r+0x472>
 8006b34:	e6f0      	b.n	8006918 <_dtoa_r+0x4e0>
 8006b36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b38:	2a00      	cmp	r2, #0
 8006b3a:	f000 80db 	beq.w	8006cf4 <_dtoa_r+0x8bc>
 8006b3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b40:	2a01      	cmp	r2, #1
 8006b42:	f300 80bf 	bgt.w	8006cc4 <_dtoa_r+0x88c>
 8006b46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	f000 80b7 	beq.w	8006cbc <_dtoa_r+0x884>
 8006b4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b54:	4646      	mov	r6, r8
 8006b56:	9a08      	ldr	r2, [sp, #32]
 8006b58:	2101      	movs	r1, #1
 8006b5a:	441a      	add	r2, r3
 8006b5c:	4658      	mov	r0, fp
 8006b5e:	4498      	add	r8, r3
 8006b60:	9208      	str	r2, [sp, #32]
 8006b62:	f000 fc21 	bl	80073a8 <__i2b>
 8006b66:	4605      	mov	r5, r0
 8006b68:	b15e      	cbz	r6, 8006b82 <_dtoa_r+0x74a>
 8006b6a:	9b08      	ldr	r3, [sp, #32]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dd08      	ble.n	8006b82 <_dtoa_r+0x74a>
 8006b70:	42b3      	cmp	r3, r6
 8006b72:	9a08      	ldr	r2, [sp, #32]
 8006b74:	bfa8      	it	ge
 8006b76:	4633      	movge	r3, r6
 8006b78:	eba8 0803 	sub.w	r8, r8, r3
 8006b7c:	1af6      	subs	r6, r6, r3
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	9308      	str	r3, [sp, #32]
 8006b82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b84:	b1f3      	cbz	r3, 8006bc4 <_dtoa_r+0x78c>
 8006b86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 80b7 	beq.w	8006cfc <_dtoa_r+0x8c4>
 8006b8e:	b18c      	cbz	r4, 8006bb4 <_dtoa_r+0x77c>
 8006b90:	4629      	mov	r1, r5
 8006b92:	4622      	mov	r2, r4
 8006b94:	4658      	mov	r0, fp
 8006b96:	f000 fcc7 	bl	8007528 <__pow5mult>
 8006b9a:	464a      	mov	r2, r9
 8006b9c:	4601      	mov	r1, r0
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	4658      	mov	r0, fp
 8006ba2:	f000 fc17 	bl	80073d4 <__multiply>
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	9004      	str	r0, [sp, #16]
 8006baa:	4658      	mov	r0, fp
 8006bac:	f000 fb48 	bl	8007240 <_Bfree>
 8006bb0:	9b04      	ldr	r3, [sp, #16]
 8006bb2:	4699      	mov	r9, r3
 8006bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bb6:	1b1a      	subs	r2, r3, r4
 8006bb8:	d004      	beq.n	8006bc4 <_dtoa_r+0x78c>
 8006bba:	4649      	mov	r1, r9
 8006bbc:	4658      	mov	r0, fp
 8006bbe:	f000 fcb3 	bl	8007528 <__pow5mult>
 8006bc2:	4681      	mov	r9, r0
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	f000 fbee 	bl	80073a8 <__i2b>
 8006bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bce:	4604      	mov	r4, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 81cf 	beq.w	8006f74 <_dtoa_r+0xb3c>
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4601      	mov	r1, r0
 8006bda:	4658      	mov	r0, fp
 8006bdc:	f000 fca4 	bl	8007528 <__pow5mult>
 8006be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	4604      	mov	r4, r0
 8006be6:	f300 8095 	bgt.w	8006d14 <_dtoa_r+0x8dc>
 8006bea:	9b02      	ldr	r3, [sp, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f040 8087 	bne.w	8006d00 <_dtoa_r+0x8c8>
 8006bf2:	9b03      	ldr	r3, [sp, #12]
 8006bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f040 8089 	bne.w	8006d10 <_dtoa_r+0x8d8>
 8006bfe:	9b03      	ldr	r3, [sp, #12]
 8006c00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c04:	0d1b      	lsrs	r3, r3, #20
 8006c06:	051b      	lsls	r3, r3, #20
 8006c08:	b12b      	cbz	r3, 8006c16 <_dtoa_r+0x7de>
 8006c0a:	9b08      	ldr	r3, [sp, #32]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	9308      	str	r3, [sp, #32]
 8006c10:	f108 0801 	add.w	r8, r8, #1
 8006c14:	2301      	movs	r3, #1
 8006c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 81b0 	beq.w	8006f80 <_dtoa_r+0xb48>
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c26:	6918      	ldr	r0, [r3, #16]
 8006c28:	f000 fb72 	bl	8007310 <__hi0bits>
 8006c2c:	f1c0 0020 	rsb	r0, r0, #32
 8006c30:	9b08      	ldr	r3, [sp, #32]
 8006c32:	4418      	add	r0, r3
 8006c34:	f010 001f 	ands.w	r0, r0, #31
 8006c38:	d077      	beq.n	8006d2a <_dtoa_r+0x8f2>
 8006c3a:	f1c0 0320 	rsb	r3, r0, #32
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	dd6b      	ble.n	8006d1a <_dtoa_r+0x8e2>
 8006c42:	9b08      	ldr	r3, [sp, #32]
 8006c44:	f1c0 001c 	rsb	r0, r0, #28
 8006c48:	4403      	add	r3, r0
 8006c4a:	4480      	add	r8, r0
 8006c4c:	4406      	add	r6, r0
 8006c4e:	9308      	str	r3, [sp, #32]
 8006c50:	f1b8 0f00 	cmp.w	r8, #0
 8006c54:	dd05      	ble.n	8006c62 <_dtoa_r+0x82a>
 8006c56:	4649      	mov	r1, r9
 8006c58:	4642      	mov	r2, r8
 8006c5a:	4658      	mov	r0, fp
 8006c5c:	f000 fcbe 	bl	80075dc <__lshift>
 8006c60:	4681      	mov	r9, r0
 8006c62:	9b08      	ldr	r3, [sp, #32]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	dd05      	ble.n	8006c74 <_dtoa_r+0x83c>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4658      	mov	r0, fp
 8006c6e:	f000 fcb5 	bl	80075dc <__lshift>
 8006c72:	4604      	mov	r4, r0
 8006c74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d059      	beq.n	8006d2e <_dtoa_r+0x8f6>
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	4648      	mov	r0, r9
 8006c7e:	f000 fd19 	bl	80076b4 <__mcmp>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	da53      	bge.n	8006d2e <_dtoa_r+0x8f6>
 8006c86:	1e7b      	subs	r3, r7, #1
 8006c88:	9304      	str	r3, [sp, #16]
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	220a      	movs	r2, #10
 8006c90:	4658      	mov	r0, fp
 8006c92:	f000 faf7 	bl	8007284 <__multadd>
 8006c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c98:	4681      	mov	r9, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 8172 	beq.w	8006f84 <_dtoa_r+0xb4c>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	220a      	movs	r2, #10
 8006ca6:	4658      	mov	r0, fp
 8006ca8:	f000 faec 	bl	8007284 <__multadd>
 8006cac:	9b00      	ldr	r3, [sp, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	dc67      	bgt.n	8006d84 <_dtoa_r+0x94c>
 8006cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	dc41      	bgt.n	8006d3e <_dtoa_r+0x906>
 8006cba:	e063      	b.n	8006d84 <_dtoa_r+0x94c>
 8006cbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006cbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006cc2:	e746      	b.n	8006b52 <_dtoa_r+0x71a>
 8006cc4:	9b07      	ldr	r3, [sp, #28]
 8006cc6:	1e5c      	subs	r4, r3, #1
 8006cc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cca:	42a3      	cmp	r3, r4
 8006ccc:	bfbf      	itttt	lt
 8006cce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006cd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006cd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006cd4:	1ae3      	sublt	r3, r4, r3
 8006cd6:	bfb4      	ite	lt
 8006cd8:	18d2      	addlt	r2, r2, r3
 8006cda:	1b1c      	subge	r4, r3, r4
 8006cdc:	9b07      	ldr	r3, [sp, #28]
 8006cde:	bfbc      	itt	lt
 8006ce0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006ce2:	2400      	movlt	r4, #0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	bfb5      	itete	lt
 8006ce8:	eba8 0603 	sublt.w	r6, r8, r3
 8006cec:	9b07      	ldrge	r3, [sp, #28]
 8006cee:	2300      	movlt	r3, #0
 8006cf0:	4646      	movge	r6, r8
 8006cf2:	e730      	b.n	8006b56 <_dtoa_r+0x71e>
 8006cf4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006cf6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006cf8:	4646      	mov	r6, r8
 8006cfa:	e735      	b.n	8006b68 <_dtoa_r+0x730>
 8006cfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cfe:	e75c      	b.n	8006bba <_dtoa_r+0x782>
 8006d00:	2300      	movs	r3, #0
 8006d02:	e788      	b.n	8006c16 <_dtoa_r+0x7de>
 8006d04:	3fe00000 	.word	0x3fe00000
 8006d08:	40240000 	.word	0x40240000
 8006d0c:	40140000 	.word	0x40140000
 8006d10:	9b02      	ldr	r3, [sp, #8]
 8006d12:	e780      	b.n	8006c16 <_dtoa_r+0x7de>
 8006d14:	2300      	movs	r3, #0
 8006d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d18:	e782      	b.n	8006c20 <_dtoa_r+0x7e8>
 8006d1a:	d099      	beq.n	8006c50 <_dtoa_r+0x818>
 8006d1c:	9a08      	ldr	r2, [sp, #32]
 8006d1e:	331c      	adds	r3, #28
 8006d20:	441a      	add	r2, r3
 8006d22:	4498      	add	r8, r3
 8006d24:	441e      	add	r6, r3
 8006d26:	9208      	str	r2, [sp, #32]
 8006d28:	e792      	b.n	8006c50 <_dtoa_r+0x818>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	e7f6      	b.n	8006d1c <_dtoa_r+0x8e4>
 8006d2e:	9b07      	ldr	r3, [sp, #28]
 8006d30:	9704      	str	r7, [sp, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	dc20      	bgt.n	8006d78 <_dtoa_r+0x940>
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	dd1e      	ble.n	8006d7c <_dtoa_r+0x944>
 8006d3e:	9b00      	ldr	r3, [sp, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f47f aec0 	bne.w	8006ac6 <_dtoa_r+0x68e>
 8006d46:	4621      	mov	r1, r4
 8006d48:	2205      	movs	r2, #5
 8006d4a:	4658      	mov	r0, fp
 8006d4c:	f000 fa9a 	bl	8007284 <__multadd>
 8006d50:	4601      	mov	r1, r0
 8006d52:	4604      	mov	r4, r0
 8006d54:	4648      	mov	r0, r9
 8006d56:	f000 fcad 	bl	80076b4 <__mcmp>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	f77f aeb3 	ble.w	8006ac6 <_dtoa_r+0x68e>
 8006d60:	4656      	mov	r6, sl
 8006d62:	2331      	movs	r3, #49	@ 0x31
 8006d64:	f806 3b01 	strb.w	r3, [r6], #1
 8006d68:	9b04      	ldr	r3, [sp, #16]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	9304      	str	r3, [sp, #16]
 8006d6e:	e6ae      	b.n	8006ace <_dtoa_r+0x696>
 8006d70:	9c07      	ldr	r4, [sp, #28]
 8006d72:	9704      	str	r7, [sp, #16]
 8006d74:	4625      	mov	r5, r4
 8006d76:	e7f3      	b.n	8006d60 <_dtoa_r+0x928>
 8006d78:	9b07      	ldr	r3, [sp, #28]
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 8104 	beq.w	8006f8c <_dtoa_r+0xb54>
 8006d84:	2e00      	cmp	r6, #0
 8006d86:	dd05      	ble.n	8006d94 <_dtoa_r+0x95c>
 8006d88:	4629      	mov	r1, r5
 8006d8a:	4632      	mov	r2, r6
 8006d8c:	4658      	mov	r0, fp
 8006d8e:	f000 fc25 	bl	80075dc <__lshift>
 8006d92:	4605      	mov	r5, r0
 8006d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d05a      	beq.n	8006e50 <_dtoa_r+0xa18>
 8006d9a:	6869      	ldr	r1, [r5, #4]
 8006d9c:	4658      	mov	r0, fp
 8006d9e:	f000 fa0f 	bl	80071c0 <_Balloc>
 8006da2:	4606      	mov	r6, r0
 8006da4:	b928      	cbnz	r0, 8006db2 <_dtoa_r+0x97a>
 8006da6:	4b84      	ldr	r3, [pc, #528]	@ (8006fb8 <_dtoa_r+0xb80>)
 8006da8:	4602      	mov	r2, r0
 8006daa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006dae:	f7ff bb5a 	b.w	8006466 <_dtoa_r+0x2e>
 8006db2:	692a      	ldr	r2, [r5, #16]
 8006db4:	3202      	adds	r2, #2
 8006db6:	0092      	lsls	r2, r2, #2
 8006db8:	f105 010c 	add.w	r1, r5, #12
 8006dbc:	300c      	adds	r0, #12
 8006dbe:	f000 ffaf 	bl	8007d20 <memcpy>
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4658      	mov	r0, fp
 8006dc8:	f000 fc08 	bl	80075dc <__lshift>
 8006dcc:	f10a 0301 	add.w	r3, sl, #1
 8006dd0:	9307      	str	r3, [sp, #28]
 8006dd2:	9b00      	ldr	r3, [sp, #0]
 8006dd4:	4453      	add	r3, sl
 8006dd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dd8:	9b02      	ldr	r3, [sp, #8]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	462f      	mov	r7, r5
 8006de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006de2:	4605      	mov	r5, r0
 8006de4:	9b07      	ldr	r3, [sp, #28]
 8006de6:	4621      	mov	r1, r4
 8006de8:	3b01      	subs	r3, #1
 8006dea:	4648      	mov	r0, r9
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	f7ff fa9a 	bl	8006326 <quorem>
 8006df2:	4639      	mov	r1, r7
 8006df4:	9002      	str	r0, [sp, #8]
 8006df6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006dfa:	4648      	mov	r0, r9
 8006dfc:	f000 fc5a 	bl	80076b4 <__mcmp>
 8006e00:	462a      	mov	r2, r5
 8006e02:	9008      	str	r0, [sp, #32]
 8006e04:	4621      	mov	r1, r4
 8006e06:	4658      	mov	r0, fp
 8006e08:	f000 fc70 	bl	80076ec <__mdiff>
 8006e0c:	68c2      	ldr	r2, [r0, #12]
 8006e0e:	4606      	mov	r6, r0
 8006e10:	bb02      	cbnz	r2, 8006e54 <_dtoa_r+0xa1c>
 8006e12:	4601      	mov	r1, r0
 8006e14:	4648      	mov	r0, r9
 8006e16:	f000 fc4d 	bl	80076b4 <__mcmp>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4658      	mov	r0, fp
 8006e20:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e22:	f000 fa0d 	bl	8007240 <_Bfree>
 8006e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e2a:	9e07      	ldr	r6, [sp, #28]
 8006e2c:	ea43 0102 	orr.w	r1, r3, r2
 8006e30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e32:	4319      	orrs	r1, r3
 8006e34:	d110      	bne.n	8006e58 <_dtoa_r+0xa20>
 8006e36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e3a:	d029      	beq.n	8006e90 <_dtoa_r+0xa58>
 8006e3c:	9b08      	ldr	r3, [sp, #32]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	dd02      	ble.n	8006e48 <_dtoa_r+0xa10>
 8006e42:	9b02      	ldr	r3, [sp, #8]
 8006e44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006e48:	9b00      	ldr	r3, [sp, #0]
 8006e4a:	f883 8000 	strb.w	r8, [r3]
 8006e4e:	e63f      	b.n	8006ad0 <_dtoa_r+0x698>
 8006e50:	4628      	mov	r0, r5
 8006e52:	e7bb      	b.n	8006dcc <_dtoa_r+0x994>
 8006e54:	2201      	movs	r2, #1
 8006e56:	e7e1      	b.n	8006e1c <_dtoa_r+0x9e4>
 8006e58:	9b08      	ldr	r3, [sp, #32]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	db04      	blt.n	8006e68 <_dtoa_r+0xa30>
 8006e5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e60:	430b      	orrs	r3, r1
 8006e62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e64:	430b      	orrs	r3, r1
 8006e66:	d120      	bne.n	8006eaa <_dtoa_r+0xa72>
 8006e68:	2a00      	cmp	r2, #0
 8006e6a:	dded      	ble.n	8006e48 <_dtoa_r+0xa10>
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	2201      	movs	r2, #1
 8006e70:	4658      	mov	r0, fp
 8006e72:	f000 fbb3 	bl	80075dc <__lshift>
 8006e76:	4621      	mov	r1, r4
 8006e78:	4681      	mov	r9, r0
 8006e7a:	f000 fc1b 	bl	80076b4 <__mcmp>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	dc03      	bgt.n	8006e8a <_dtoa_r+0xa52>
 8006e82:	d1e1      	bne.n	8006e48 <_dtoa_r+0xa10>
 8006e84:	f018 0f01 	tst.w	r8, #1
 8006e88:	d0de      	beq.n	8006e48 <_dtoa_r+0xa10>
 8006e8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e8e:	d1d8      	bne.n	8006e42 <_dtoa_r+0xa0a>
 8006e90:	9a00      	ldr	r2, [sp, #0]
 8006e92:	2339      	movs	r3, #57	@ 0x39
 8006e94:	7013      	strb	r3, [r2, #0]
 8006e96:	4633      	mov	r3, r6
 8006e98:	461e      	mov	r6, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ea0:	2a39      	cmp	r2, #57	@ 0x39
 8006ea2:	d052      	beq.n	8006f4a <_dtoa_r+0xb12>
 8006ea4:	3201      	adds	r2, #1
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	e612      	b.n	8006ad0 <_dtoa_r+0x698>
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	dd07      	ble.n	8006ebe <_dtoa_r+0xa86>
 8006eae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006eb2:	d0ed      	beq.n	8006e90 <_dtoa_r+0xa58>
 8006eb4:	9a00      	ldr	r2, [sp, #0]
 8006eb6:	f108 0301 	add.w	r3, r8, #1
 8006eba:	7013      	strb	r3, [r2, #0]
 8006ebc:	e608      	b.n	8006ad0 <_dtoa_r+0x698>
 8006ebe:	9b07      	ldr	r3, [sp, #28]
 8006ec0:	9a07      	ldr	r2, [sp, #28]
 8006ec2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006ec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d028      	beq.n	8006f1e <_dtoa_r+0xae6>
 8006ecc:	4649      	mov	r1, r9
 8006ece:	2300      	movs	r3, #0
 8006ed0:	220a      	movs	r2, #10
 8006ed2:	4658      	mov	r0, fp
 8006ed4:	f000 f9d6 	bl	8007284 <__multadd>
 8006ed8:	42af      	cmp	r7, r5
 8006eda:	4681      	mov	r9, r0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	f04f 020a 	mov.w	r2, #10
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	d107      	bne.n	8006efa <_dtoa_r+0xac2>
 8006eea:	f000 f9cb 	bl	8007284 <__multadd>
 8006eee:	4607      	mov	r7, r0
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	9b07      	ldr	r3, [sp, #28]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	9307      	str	r3, [sp, #28]
 8006ef8:	e774      	b.n	8006de4 <_dtoa_r+0x9ac>
 8006efa:	f000 f9c3 	bl	8007284 <__multadd>
 8006efe:	4629      	mov	r1, r5
 8006f00:	4607      	mov	r7, r0
 8006f02:	2300      	movs	r3, #0
 8006f04:	220a      	movs	r2, #10
 8006f06:	4658      	mov	r0, fp
 8006f08:	f000 f9bc 	bl	8007284 <__multadd>
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	e7f0      	b.n	8006ef2 <_dtoa_r+0xaba>
 8006f10:	9b00      	ldr	r3, [sp, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bfcc      	ite	gt
 8006f16:	461e      	movgt	r6, r3
 8006f18:	2601      	movle	r6, #1
 8006f1a:	4456      	add	r6, sl
 8006f1c:	2700      	movs	r7, #0
 8006f1e:	4649      	mov	r1, r9
 8006f20:	2201      	movs	r2, #1
 8006f22:	4658      	mov	r0, fp
 8006f24:	f000 fb5a 	bl	80075dc <__lshift>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4681      	mov	r9, r0
 8006f2c:	f000 fbc2 	bl	80076b4 <__mcmp>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	dcb0      	bgt.n	8006e96 <_dtoa_r+0xa5e>
 8006f34:	d102      	bne.n	8006f3c <_dtoa_r+0xb04>
 8006f36:	f018 0f01 	tst.w	r8, #1
 8006f3a:	d1ac      	bne.n	8006e96 <_dtoa_r+0xa5e>
 8006f3c:	4633      	mov	r3, r6
 8006f3e:	461e      	mov	r6, r3
 8006f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f44:	2a30      	cmp	r2, #48	@ 0x30
 8006f46:	d0fa      	beq.n	8006f3e <_dtoa_r+0xb06>
 8006f48:	e5c2      	b.n	8006ad0 <_dtoa_r+0x698>
 8006f4a:	459a      	cmp	sl, r3
 8006f4c:	d1a4      	bne.n	8006e98 <_dtoa_r+0xa60>
 8006f4e:	9b04      	ldr	r3, [sp, #16]
 8006f50:	3301      	adds	r3, #1
 8006f52:	9304      	str	r3, [sp, #16]
 8006f54:	2331      	movs	r3, #49	@ 0x31
 8006f56:	f88a 3000 	strb.w	r3, [sl]
 8006f5a:	e5b9      	b.n	8006ad0 <_dtoa_r+0x698>
 8006f5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006fbc <_dtoa_r+0xb84>
 8006f62:	b11b      	cbz	r3, 8006f6c <_dtoa_r+0xb34>
 8006f64:	f10a 0308 	add.w	r3, sl, #8
 8006f68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	b019      	add	sp, #100	@ 0x64
 8006f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	f77f ae37 	ble.w	8006bea <_dtoa_r+0x7b2>
 8006f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f80:	2001      	movs	r0, #1
 8006f82:	e655      	b.n	8006c30 <_dtoa_r+0x7f8>
 8006f84:	9b00      	ldr	r3, [sp, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f77f aed6 	ble.w	8006d38 <_dtoa_r+0x900>
 8006f8c:	4656      	mov	r6, sl
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4648      	mov	r0, r9
 8006f92:	f7ff f9c8 	bl	8006326 <quorem>
 8006f96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f9a:	f806 8b01 	strb.w	r8, [r6], #1
 8006f9e:	9b00      	ldr	r3, [sp, #0]
 8006fa0:	eba6 020a 	sub.w	r2, r6, sl
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	ddb3      	ble.n	8006f10 <_dtoa_r+0xad8>
 8006fa8:	4649      	mov	r1, r9
 8006faa:	2300      	movs	r3, #0
 8006fac:	220a      	movs	r2, #10
 8006fae:	4658      	mov	r0, fp
 8006fb0:	f000 f968 	bl	8007284 <__multadd>
 8006fb4:	4681      	mov	r9, r0
 8006fb6:	e7ea      	b.n	8006f8e <_dtoa_r+0xb56>
 8006fb8:	08008530 	.word	0x08008530
 8006fbc:	080084b4 	.word	0x080084b4

08006fc0 <_free_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	d041      	beq.n	800704c <_free_r+0x8c>
 8006fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fcc:	1f0c      	subs	r4, r1, #4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bfb8      	it	lt
 8006fd2:	18e4      	addlt	r4, r4, r3
 8006fd4:	f000 f8e8 	bl	80071a8 <__malloc_lock>
 8006fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8007050 <_free_r+0x90>)
 8006fda:	6813      	ldr	r3, [r2, #0]
 8006fdc:	b933      	cbnz	r3, 8006fec <_free_r+0x2c>
 8006fde:	6063      	str	r3, [r4, #4]
 8006fe0:	6014      	str	r4, [r2, #0]
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fe8:	f000 b8e4 	b.w	80071b4 <__malloc_unlock>
 8006fec:	42a3      	cmp	r3, r4
 8006fee:	d908      	bls.n	8007002 <_free_r+0x42>
 8006ff0:	6820      	ldr	r0, [r4, #0]
 8006ff2:	1821      	adds	r1, r4, r0
 8006ff4:	428b      	cmp	r3, r1
 8006ff6:	bf01      	itttt	eq
 8006ff8:	6819      	ldreq	r1, [r3, #0]
 8006ffa:	685b      	ldreq	r3, [r3, #4]
 8006ffc:	1809      	addeq	r1, r1, r0
 8006ffe:	6021      	streq	r1, [r4, #0]
 8007000:	e7ed      	b.n	8006fde <_free_r+0x1e>
 8007002:	461a      	mov	r2, r3
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	b10b      	cbz	r3, 800700c <_free_r+0x4c>
 8007008:	42a3      	cmp	r3, r4
 800700a:	d9fa      	bls.n	8007002 <_free_r+0x42>
 800700c:	6811      	ldr	r1, [r2, #0]
 800700e:	1850      	adds	r0, r2, r1
 8007010:	42a0      	cmp	r0, r4
 8007012:	d10b      	bne.n	800702c <_free_r+0x6c>
 8007014:	6820      	ldr	r0, [r4, #0]
 8007016:	4401      	add	r1, r0
 8007018:	1850      	adds	r0, r2, r1
 800701a:	4283      	cmp	r3, r0
 800701c:	6011      	str	r1, [r2, #0]
 800701e:	d1e0      	bne.n	8006fe2 <_free_r+0x22>
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	6053      	str	r3, [r2, #4]
 8007026:	4408      	add	r0, r1
 8007028:	6010      	str	r0, [r2, #0]
 800702a:	e7da      	b.n	8006fe2 <_free_r+0x22>
 800702c:	d902      	bls.n	8007034 <_free_r+0x74>
 800702e:	230c      	movs	r3, #12
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	e7d6      	b.n	8006fe2 <_free_r+0x22>
 8007034:	6820      	ldr	r0, [r4, #0]
 8007036:	1821      	adds	r1, r4, r0
 8007038:	428b      	cmp	r3, r1
 800703a:	bf04      	itt	eq
 800703c:	6819      	ldreq	r1, [r3, #0]
 800703e:	685b      	ldreq	r3, [r3, #4]
 8007040:	6063      	str	r3, [r4, #4]
 8007042:	bf04      	itt	eq
 8007044:	1809      	addeq	r1, r1, r0
 8007046:	6021      	streq	r1, [r4, #0]
 8007048:	6054      	str	r4, [r2, #4]
 800704a:	e7ca      	b.n	8006fe2 <_free_r+0x22>
 800704c:	bd38      	pop	{r3, r4, r5, pc}
 800704e:	bf00      	nop
 8007050:	200004ac 	.word	0x200004ac

08007054 <malloc>:
 8007054:	4b02      	ldr	r3, [pc, #8]	@ (8007060 <malloc+0xc>)
 8007056:	4601      	mov	r1, r0
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	f000 b825 	b.w	80070a8 <_malloc_r>
 800705e:	bf00      	nop
 8007060:	20000018 	.word	0x20000018

08007064 <sbrk_aligned>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	4e0f      	ldr	r6, [pc, #60]	@ (80070a4 <sbrk_aligned+0x40>)
 8007068:	460c      	mov	r4, r1
 800706a:	6831      	ldr	r1, [r6, #0]
 800706c:	4605      	mov	r5, r0
 800706e:	b911      	cbnz	r1, 8007076 <sbrk_aligned+0x12>
 8007070:	f000 fe46 	bl	8007d00 <_sbrk_r>
 8007074:	6030      	str	r0, [r6, #0]
 8007076:	4621      	mov	r1, r4
 8007078:	4628      	mov	r0, r5
 800707a:	f000 fe41 	bl	8007d00 <_sbrk_r>
 800707e:	1c43      	adds	r3, r0, #1
 8007080:	d103      	bne.n	800708a <sbrk_aligned+0x26>
 8007082:	f04f 34ff 	mov.w	r4, #4294967295
 8007086:	4620      	mov	r0, r4
 8007088:	bd70      	pop	{r4, r5, r6, pc}
 800708a:	1cc4      	adds	r4, r0, #3
 800708c:	f024 0403 	bic.w	r4, r4, #3
 8007090:	42a0      	cmp	r0, r4
 8007092:	d0f8      	beq.n	8007086 <sbrk_aligned+0x22>
 8007094:	1a21      	subs	r1, r4, r0
 8007096:	4628      	mov	r0, r5
 8007098:	f000 fe32 	bl	8007d00 <_sbrk_r>
 800709c:	3001      	adds	r0, #1
 800709e:	d1f2      	bne.n	8007086 <sbrk_aligned+0x22>
 80070a0:	e7ef      	b.n	8007082 <sbrk_aligned+0x1e>
 80070a2:	bf00      	nop
 80070a4:	200004a8 	.word	0x200004a8

080070a8 <_malloc_r>:
 80070a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ac:	1ccd      	adds	r5, r1, #3
 80070ae:	f025 0503 	bic.w	r5, r5, #3
 80070b2:	3508      	adds	r5, #8
 80070b4:	2d0c      	cmp	r5, #12
 80070b6:	bf38      	it	cc
 80070b8:	250c      	movcc	r5, #12
 80070ba:	2d00      	cmp	r5, #0
 80070bc:	4606      	mov	r6, r0
 80070be:	db01      	blt.n	80070c4 <_malloc_r+0x1c>
 80070c0:	42a9      	cmp	r1, r5
 80070c2:	d904      	bls.n	80070ce <_malloc_r+0x26>
 80070c4:	230c      	movs	r3, #12
 80070c6:	6033      	str	r3, [r6, #0]
 80070c8:	2000      	movs	r0, #0
 80070ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071a4 <_malloc_r+0xfc>
 80070d2:	f000 f869 	bl	80071a8 <__malloc_lock>
 80070d6:	f8d8 3000 	ldr.w	r3, [r8]
 80070da:	461c      	mov	r4, r3
 80070dc:	bb44      	cbnz	r4, 8007130 <_malloc_r+0x88>
 80070de:	4629      	mov	r1, r5
 80070e0:	4630      	mov	r0, r6
 80070e2:	f7ff ffbf 	bl	8007064 <sbrk_aligned>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	4604      	mov	r4, r0
 80070ea:	d158      	bne.n	800719e <_malloc_r+0xf6>
 80070ec:	f8d8 4000 	ldr.w	r4, [r8]
 80070f0:	4627      	mov	r7, r4
 80070f2:	2f00      	cmp	r7, #0
 80070f4:	d143      	bne.n	800717e <_malloc_r+0xd6>
 80070f6:	2c00      	cmp	r4, #0
 80070f8:	d04b      	beq.n	8007192 <_malloc_r+0xea>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	4639      	mov	r1, r7
 80070fe:	4630      	mov	r0, r6
 8007100:	eb04 0903 	add.w	r9, r4, r3
 8007104:	f000 fdfc 	bl	8007d00 <_sbrk_r>
 8007108:	4581      	cmp	r9, r0
 800710a:	d142      	bne.n	8007192 <_malloc_r+0xea>
 800710c:	6821      	ldr	r1, [r4, #0]
 800710e:	1a6d      	subs	r5, r5, r1
 8007110:	4629      	mov	r1, r5
 8007112:	4630      	mov	r0, r6
 8007114:	f7ff ffa6 	bl	8007064 <sbrk_aligned>
 8007118:	3001      	adds	r0, #1
 800711a:	d03a      	beq.n	8007192 <_malloc_r+0xea>
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	442b      	add	r3, r5
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	f8d8 3000 	ldr.w	r3, [r8]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	bb62      	cbnz	r2, 8007184 <_malloc_r+0xdc>
 800712a:	f8c8 7000 	str.w	r7, [r8]
 800712e:	e00f      	b.n	8007150 <_malloc_r+0xa8>
 8007130:	6822      	ldr	r2, [r4, #0]
 8007132:	1b52      	subs	r2, r2, r5
 8007134:	d420      	bmi.n	8007178 <_malloc_r+0xd0>
 8007136:	2a0b      	cmp	r2, #11
 8007138:	d917      	bls.n	800716a <_malloc_r+0xc2>
 800713a:	1961      	adds	r1, r4, r5
 800713c:	42a3      	cmp	r3, r4
 800713e:	6025      	str	r5, [r4, #0]
 8007140:	bf18      	it	ne
 8007142:	6059      	strne	r1, [r3, #4]
 8007144:	6863      	ldr	r3, [r4, #4]
 8007146:	bf08      	it	eq
 8007148:	f8c8 1000 	streq.w	r1, [r8]
 800714c:	5162      	str	r2, [r4, r5]
 800714e:	604b      	str	r3, [r1, #4]
 8007150:	4630      	mov	r0, r6
 8007152:	f000 f82f 	bl	80071b4 <__malloc_unlock>
 8007156:	f104 000b 	add.w	r0, r4, #11
 800715a:	1d23      	adds	r3, r4, #4
 800715c:	f020 0007 	bic.w	r0, r0, #7
 8007160:	1ac2      	subs	r2, r0, r3
 8007162:	bf1c      	itt	ne
 8007164:	1a1b      	subne	r3, r3, r0
 8007166:	50a3      	strne	r3, [r4, r2]
 8007168:	e7af      	b.n	80070ca <_malloc_r+0x22>
 800716a:	6862      	ldr	r2, [r4, #4]
 800716c:	42a3      	cmp	r3, r4
 800716e:	bf0c      	ite	eq
 8007170:	f8c8 2000 	streq.w	r2, [r8]
 8007174:	605a      	strne	r2, [r3, #4]
 8007176:	e7eb      	b.n	8007150 <_malloc_r+0xa8>
 8007178:	4623      	mov	r3, r4
 800717a:	6864      	ldr	r4, [r4, #4]
 800717c:	e7ae      	b.n	80070dc <_malloc_r+0x34>
 800717e:	463c      	mov	r4, r7
 8007180:	687f      	ldr	r7, [r7, #4]
 8007182:	e7b6      	b.n	80070f2 <_malloc_r+0x4a>
 8007184:	461a      	mov	r2, r3
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	42a3      	cmp	r3, r4
 800718a:	d1fb      	bne.n	8007184 <_malloc_r+0xdc>
 800718c:	2300      	movs	r3, #0
 800718e:	6053      	str	r3, [r2, #4]
 8007190:	e7de      	b.n	8007150 <_malloc_r+0xa8>
 8007192:	230c      	movs	r3, #12
 8007194:	6033      	str	r3, [r6, #0]
 8007196:	4630      	mov	r0, r6
 8007198:	f000 f80c 	bl	80071b4 <__malloc_unlock>
 800719c:	e794      	b.n	80070c8 <_malloc_r+0x20>
 800719e:	6005      	str	r5, [r0, #0]
 80071a0:	e7d6      	b.n	8007150 <_malloc_r+0xa8>
 80071a2:	bf00      	nop
 80071a4:	200004ac 	.word	0x200004ac

080071a8 <__malloc_lock>:
 80071a8:	4801      	ldr	r0, [pc, #4]	@ (80071b0 <__malloc_lock+0x8>)
 80071aa:	f7ff b8ba 	b.w	8006322 <__retarget_lock_acquire_recursive>
 80071ae:	bf00      	nop
 80071b0:	200004a4 	.word	0x200004a4

080071b4 <__malloc_unlock>:
 80071b4:	4801      	ldr	r0, [pc, #4]	@ (80071bc <__malloc_unlock+0x8>)
 80071b6:	f7ff b8b5 	b.w	8006324 <__retarget_lock_release_recursive>
 80071ba:	bf00      	nop
 80071bc:	200004a4 	.word	0x200004a4

080071c0 <_Balloc>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	69c6      	ldr	r6, [r0, #28]
 80071c4:	4604      	mov	r4, r0
 80071c6:	460d      	mov	r5, r1
 80071c8:	b976      	cbnz	r6, 80071e8 <_Balloc+0x28>
 80071ca:	2010      	movs	r0, #16
 80071cc:	f7ff ff42 	bl	8007054 <malloc>
 80071d0:	4602      	mov	r2, r0
 80071d2:	61e0      	str	r0, [r4, #28]
 80071d4:	b920      	cbnz	r0, 80071e0 <_Balloc+0x20>
 80071d6:	4b18      	ldr	r3, [pc, #96]	@ (8007238 <_Balloc+0x78>)
 80071d8:	4818      	ldr	r0, [pc, #96]	@ (800723c <_Balloc+0x7c>)
 80071da:	216b      	movs	r1, #107	@ 0x6b
 80071dc:	f000 fdae 	bl	8007d3c <__assert_func>
 80071e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071e4:	6006      	str	r6, [r0, #0]
 80071e6:	60c6      	str	r6, [r0, #12]
 80071e8:	69e6      	ldr	r6, [r4, #28]
 80071ea:	68f3      	ldr	r3, [r6, #12]
 80071ec:	b183      	cbz	r3, 8007210 <_Balloc+0x50>
 80071ee:	69e3      	ldr	r3, [r4, #28]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071f6:	b9b8      	cbnz	r0, 8007228 <_Balloc+0x68>
 80071f8:	2101      	movs	r1, #1
 80071fa:	fa01 f605 	lsl.w	r6, r1, r5
 80071fe:	1d72      	adds	r2, r6, #5
 8007200:	0092      	lsls	r2, r2, #2
 8007202:	4620      	mov	r0, r4
 8007204:	f000 fdb8 	bl	8007d78 <_calloc_r>
 8007208:	b160      	cbz	r0, 8007224 <_Balloc+0x64>
 800720a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800720e:	e00e      	b.n	800722e <_Balloc+0x6e>
 8007210:	2221      	movs	r2, #33	@ 0x21
 8007212:	2104      	movs	r1, #4
 8007214:	4620      	mov	r0, r4
 8007216:	f000 fdaf 	bl	8007d78 <_calloc_r>
 800721a:	69e3      	ldr	r3, [r4, #28]
 800721c:	60f0      	str	r0, [r6, #12]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e4      	bne.n	80071ee <_Balloc+0x2e>
 8007224:	2000      	movs	r0, #0
 8007226:	bd70      	pop	{r4, r5, r6, pc}
 8007228:	6802      	ldr	r2, [r0, #0]
 800722a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800722e:	2300      	movs	r3, #0
 8007230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007234:	e7f7      	b.n	8007226 <_Balloc+0x66>
 8007236:	bf00      	nop
 8007238:	080084c1 	.word	0x080084c1
 800723c:	08008541 	.word	0x08008541

08007240 <_Bfree>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	69c6      	ldr	r6, [r0, #28]
 8007244:	4605      	mov	r5, r0
 8007246:	460c      	mov	r4, r1
 8007248:	b976      	cbnz	r6, 8007268 <_Bfree+0x28>
 800724a:	2010      	movs	r0, #16
 800724c:	f7ff ff02 	bl	8007054 <malloc>
 8007250:	4602      	mov	r2, r0
 8007252:	61e8      	str	r0, [r5, #28]
 8007254:	b920      	cbnz	r0, 8007260 <_Bfree+0x20>
 8007256:	4b09      	ldr	r3, [pc, #36]	@ (800727c <_Bfree+0x3c>)
 8007258:	4809      	ldr	r0, [pc, #36]	@ (8007280 <_Bfree+0x40>)
 800725a:	218f      	movs	r1, #143	@ 0x8f
 800725c:	f000 fd6e 	bl	8007d3c <__assert_func>
 8007260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007264:	6006      	str	r6, [r0, #0]
 8007266:	60c6      	str	r6, [r0, #12]
 8007268:	b13c      	cbz	r4, 800727a <_Bfree+0x3a>
 800726a:	69eb      	ldr	r3, [r5, #28]
 800726c:	6862      	ldr	r2, [r4, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007274:	6021      	str	r1, [r4, #0]
 8007276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800727a:	bd70      	pop	{r4, r5, r6, pc}
 800727c:	080084c1 	.word	0x080084c1
 8007280:	08008541 	.word	0x08008541

08007284 <__multadd>:
 8007284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007288:	690d      	ldr	r5, [r1, #16]
 800728a:	4607      	mov	r7, r0
 800728c:	460c      	mov	r4, r1
 800728e:	461e      	mov	r6, r3
 8007290:	f101 0c14 	add.w	ip, r1, #20
 8007294:	2000      	movs	r0, #0
 8007296:	f8dc 3000 	ldr.w	r3, [ip]
 800729a:	b299      	uxth	r1, r3
 800729c:	fb02 6101 	mla	r1, r2, r1, r6
 80072a0:	0c1e      	lsrs	r6, r3, #16
 80072a2:	0c0b      	lsrs	r3, r1, #16
 80072a4:	fb02 3306 	mla	r3, r2, r6, r3
 80072a8:	b289      	uxth	r1, r1
 80072aa:	3001      	adds	r0, #1
 80072ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072b0:	4285      	cmp	r5, r0
 80072b2:	f84c 1b04 	str.w	r1, [ip], #4
 80072b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072ba:	dcec      	bgt.n	8007296 <__multadd+0x12>
 80072bc:	b30e      	cbz	r6, 8007302 <__multadd+0x7e>
 80072be:	68a3      	ldr	r3, [r4, #8]
 80072c0:	42ab      	cmp	r3, r5
 80072c2:	dc19      	bgt.n	80072f8 <__multadd+0x74>
 80072c4:	6861      	ldr	r1, [r4, #4]
 80072c6:	4638      	mov	r0, r7
 80072c8:	3101      	adds	r1, #1
 80072ca:	f7ff ff79 	bl	80071c0 <_Balloc>
 80072ce:	4680      	mov	r8, r0
 80072d0:	b928      	cbnz	r0, 80072de <__multadd+0x5a>
 80072d2:	4602      	mov	r2, r0
 80072d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007308 <__multadd+0x84>)
 80072d6:	480d      	ldr	r0, [pc, #52]	@ (800730c <__multadd+0x88>)
 80072d8:	21ba      	movs	r1, #186	@ 0xba
 80072da:	f000 fd2f 	bl	8007d3c <__assert_func>
 80072de:	6922      	ldr	r2, [r4, #16]
 80072e0:	3202      	adds	r2, #2
 80072e2:	f104 010c 	add.w	r1, r4, #12
 80072e6:	0092      	lsls	r2, r2, #2
 80072e8:	300c      	adds	r0, #12
 80072ea:	f000 fd19 	bl	8007d20 <memcpy>
 80072ee:	4621      	mov	r1, r4
 80072f0:	4638      	mov	r0, r7
 80072f2:	f7ff ffa5 	bl	8007240 <_Bfree>
 80072f6:	4644      	mov	r4, r8
 80072f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072fc:	3501      	adds	r5, #1
 80072fe:	615e      	str	r6, [r3, #20]
 8007300:	6125      	str	r5, [r4, #16]
 8007302:	4620      	mov	r0, r4
 8007304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007308:	08008530 	.word	0x08008530
 800730c:	08008541 	.word	0x08008541

08007310 <__hi0bits>:
 8007310:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007314:	4603      	mov	r3, r0
 8007316:	bf36      	itet	cc
 8007318:	0403      	lslcc	r3, r0, #16
 800731a:	2000      	movcs	r0, #0
 800731c:	2010      	movcc	r0, #16
 800731e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007322:	bf3c      	itt	cc
 8007324:	021b      	lslcc	r3, r3, #8
 8007326:	3008      	addcc	r0, #8
 8007328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800732c:	bf3c      	itt	cc
 800732e:	011b      	lslcc	r3, r3, #4
 8007330:	3004      	addcc	r0, #4
 8007332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007336:	bf3c      	itt	cc
 8007338:	009b      	lslcc	r3, r3, #2
 800733a:	3002      	addcc	r0, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	db05      	blt.n	800734c <__hi0bits+0x3c>
 8007340:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007344:	f100 0001 	add.w	r0, r0, #1
 8007348:	bf08      	it	eq
 800734a:	2020      	moveq	r0, #32
 800734c:	4770      	bx	lr

0800734e <__lo0bits>:
 800734e:	6803      	ldr	r3, [r0, #0]
 8007350:	4602      	mov	r2, r0
 8007352:	f013 0007 	ands.w	r0, r3, #7
 8007356:	d00b      	beq.n	8007370 <__lo0bits+0x22>
 8007358:	07d9      	lsls	r1, r3, #31
 800735a:	d421      	bmi.n	80073a0 <__lo0bits+0x52>
 800735c:	0798      	lsls	r0, r3, #30
 800735e:	bf49      	itett	mi
 8007360:	085b      	lsrmi	r3, r3, #1
 8007362:	089b      	lsrpl	r3, r3, #2
 8007364:	2001      	movmi	r0, #1
 8007366:	6013      	strmi	r3, [r2, #0]
 8007368:	bf5c      	itt	pl
 800736a:	6013      	strpl	r3, [r2, #0]
 800736c:	2002      	movpl	r0, #2
 800736e:	4770      	bx	lr
 8007370:	b299      	uxth	r1, r3
 8007372:	b909      	cbnz	r1, 8007378 <__lo0bits+0x2a>
 8007374:	0c1b      	lsrs	r3, r3, #16
 8007376:	2010      	movs	r0, #16
 8007378:	b2d9      	uxtb	r1, r3
 800737a:	b909      	cbnz	r1, 8007380 <__lo0bits+0x32>
 800737c:	3008      	adds	r0, #8
 800737e:	0a1b      	lsrs	r3, r3, #8
 8007380:	0719      	lsls	r1, r3, #28
 8007382:	bf04      	itt	eq
 8007384:	091b      	lsreq	r3, r3, #4
 8007386:	3004      	addeq	r0, #4
 8007388:	0799      	lsls	r1, r3, #30
 800738a:	bf04      	itt	eq
 800738c:	089b      	lsreq	r3, r3, #2
 800738e:	3002      	addeq	r0, #2
 8007390:	07d9      	lsls	r1, r3, #31
 8007392:	d403      	bmi.n	800739c <__lo0bits+0x4e>
 8007394:	085b      	lsrs	r3, r3, #1
 8007396:	f100 0001 	add.w	r0, r0, #1
 800739a:	d003      	beq.n	80073a4 <__lo0bits+0x56>
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	4770      	bx	lr
 80073a0:	2000      	movs	r0, #0
 80073a2:	4770      	bx	lr
 80073a4:	2020      	movs	r0, #32
 80073a6:	4770      	bx	lr

080073a8 <__i2b>:
 80073a8:	b510      	push	{r4, lr}
 80073aa:	460c      	mov	r4, r1
 80073ac:	2101      	movs	r1, #1
 80073ae:	f7ff ff07 	bl	80071c0 <_Balloc>
 80073b2:	4602      	mov	r2, r0
 80073b4:	b928      	cbnz	r0, 80073c2 <__i2b+0x1a>
 80073b6:	4b05      	ldr	r3, [pc, #20]	@ (80073cc <__i2b+0x24>)
 80073b8:	4805      	ldr	r0, [pc, #20]	@ (80073d0 <__i2b+0x28>)
 80073ba:	f240 1145 	movw	r1, #325	@ 0x145
 80073be:	f000 fcbd 	bl	8007d3c <__assert_func>
 80073c2:	2301      	movs	r3, #1
 80073c4:	6144      	str	r4, [r0, #20]
 80073c6:	6103      	str	r3, [r0, #16]
 80073c8:	bd10      	pop	{r4, pc}
 80073ca:	bf00      	nop
 80073cc:	08008530 	.word	0x08008530
 80073d0:	08008541 	.word	0x08008541

080073d4 <__multiply>:
 80073d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d8:	4614      	mov	r4, r2
 80073da:	690a      	ldr	r2, [r1, #16]
 80073dc:	6923      	ldr	r3, [r4, #16]
 80073de:	429a      	cmp	r2, r3
 80073e0:	bfa8      	it	ge
 80073e2:	4623      	movge	r3, r4
 80073e4:	460f      	mov	r7, r1
 80073e6:	bfa4      	itt	ge
 80073e8:	460c      	movge	r4, r1
 80073ea:	461f      	movge	r7, r3
 80073ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80073f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80073f4:	68a3      	ldr	r3, [r4, #8]
 80073f6:	6861      	ldr	r1, [r4, #4]
 80073f8:	eb0a 0609 	add.w	r6, sl, r9
 80073fc:	42b3      	cmp	r3, r6
 80073fe:	b085      	sub	sp, #20
 8007400:	bfb8      	it	lt
 8007402:	3101      	addlt	r1, #1
 8007404:	f7ff fedc 	bl	80071c0 <_Balloc>
 8007408:	b930      	cbnz	r0, 8007418 <__multiply+0x44>
 800740a:	4602      	mov	r2, r0
 800740c:	4b44      	ldr	r3, [pc, #272]	@ (8007520 <__multiply+0x14c>)
 800740e:	4845      	ldr	r0, [pc, #276]	@ (8007524 <__multiply+0x150>)
 8007410:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007414:	f000 fc92 	bl	8007d3c <__assert_func>
 8007418:	f100 0514 	add.w	r5, r0, #20
 800741c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007420:	462b      	mov	r3, r5
 8007422:	2200      	movs	r2, #0
 8007424:	4543      	cmp	r3, r8
 8007426:	d321      	bcc.n	800746c <__multiply+0x98>
 8007428:	f107 0114 	add.w	r1, r7, #20
 800742c:	f104 0214 	add.w	r2, r4, #20
 8007430:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007434:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007438:	9302      	str	r3, [sp, #8]
 800743a:	1b13      	subs	r3, r2, r4
 800743c:	3b15      	subs	r3, #21
 800743e:	f023 0303 	bic.w	r3, r3, #3
 8007442:	3304      	adds	r3, #4
 8007444:	f104 0715 	add.w	r7, r4, #21
 8007448:	42ba      	cmp	r2, r7
 800744a:	bf38      	it	cc
 800744c:	2304      	movcc	r3, #4
 800744e:	9301      	str	r3, [sp, #4]
 8007450:	9b02      	ldr	r3, [sp, #8]
 8007452:	9103      	str	r1, [sp, #12]
 8007454:	428b      	cmp	r3, r1
 8007456:	d80c      	bhi.n	8007472 <__multiply+0x9e>
 8007458:	2e00      	cmp	r6, #0
 800745a:	dd03      	ble.n	8007464 <__multiply+0x90>
 800745c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007460:	2b00      	cmp	r3, #0
 8007462:	d05b      	beq.n	800751c <__multiply+0x148>
 8007464:	6106      	str	r6, [r0, #16]
 8007466:	b005      	add	sp, #20
 8007468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746c:	f843 2b04 	str.w	r2, [r3], #4
 8007470:	e7d8      	b.n	8007424 <__multiply+0x50>
 8007472:	f8b1 a000 	ldrh.w	sl, [r1]
 8007476:	f1ba 0f00 	cmp.w	sl, #0
 800747a:	d024      	beq.n	80074c6 <__multiply+0xf2>
 800747c:	f104 0e14 	add.w	lr, r4, #20
 8007480:	46a9      	mov	r9, r5
 8007482:	f04f 0c00 	mov.w	ip, #0
 8007486:	f85e 7b04 	ldr.w	r7, [lr], #4
 800748a:	f8d9 3000 	ldr.w	r3, [r9]
 800748e:	fa1f fb87 	uxth.w	fp, r7
 8007492:	b29b      	uxth	r3, r3
 8007494:	fb0a 330b 	mla	r3, sl, fp, r3
 8007498:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800749c:	f8d9 7000 	ldr.w	r7, [r9]
 80074a0:	4463      	add	r3, ip
 80074a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80074aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074b4:	4572      	cmp	r2, lr
 80074b6:	f849 3b04 	str.w	r3, [r9], #4
 80074ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074be:	d8e2      	bhi.n	8007486 <__multiply+0xb2>
 80074c0:	9b01      	ldr	r3, [sp, #4]
 80074c2:	f845 c003 	str.w	ip, [r5, r3]
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80074cc:	3104      	adds	r1, #4
 80074ce:	f1b9 0f00 	cmp.w	r9, #0
 80074d2:	d021      	beq.n	8007518 <__multiply+0x144>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	f104 0c14 	add.w	ip, r4, #20
 80074da:	46ae      	mov	lr, r5
 80074dc:	f04f 0a00 	mov.w	sl, #0
 80074e0:	f8bc b000 	ldrh.w	fp, [ip]
 80074e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80074e8:	fb09 770b 	mla	r7, r9, fp, r7
 80074ec:	4457      	add	r7, sl
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074f4:	f84e 3b04 	str.w	r3, [lr], #4
 80074f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80074fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007500:	f8be 3000 	ldrh.w	r3, [lr]
 8007504:	fb09 330a 	mla	r3, r9, sl, r3
 8007508:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800750c:	4562      	cmp	r2, ip
 800750e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007512:	d8e5      	bhi.n	80074e0 <__multiply+0x10c>
 8007514:	9f01      	ldr	r7, [sp, #4]
 8007516:	51eb      	str	r3, [r5, r7]
 8007518:	3504      	adds	r5, #4
 800751a:	e799      	b.n	8007450 <__multiply+0x7c>
 800751c:	3e01      	subs	r6, #1
 800751e:	e79b      	b.n	8007458 <__multiply+0x84>
 8007520:	08008530 	.word	0x08008530
 8007524:	08008541 	.word	0x08008541

08007528 <__pow5mult>:
 8007528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800752c:	4615      	mov	r5, r2
 800752e:	f012 0203 	ands.w	r2, r2, #3
 8007532:	4607      	mov	r7, r0
 8007534:	460e      	mov	r6, r1
 8007536:	d007      	beq.n	8007548 <__pow5mult+0x20>
 8007538:	4c25      	ldr	r4, [pc, #148]	@ (80075d0 <__pow5mult+0xa8>)
 800753a:	3a01      	subs	r2, #1
 800753c:	2300      	movs	r3, #0
 800753e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007542:	f7ff fe9f 	bl	8007284 <__multadd>
 8007546:	4606      	mov	r6, r0
 8007548:	10ad      	asrs	r5, r5, #2
 800754a:	d03d      	beq.n	80075c8 <__pow5mult+0xa0>
 800754c:	69fc      	ldr	r4, [r7, #28]
 800754e:	b97c      	cbnz	r4, 8007570 <__pow5mult+0x48>
 8007550:	2010      	movs	r0, #16
 8007552:	f7ff fd7f 	bl	8007054 <malloc>
 8007556:	4602      	mov	r2, r0
 8007558:	61f8      	str	r0, [r7, #28]
 800755a:	b928      	cbnz	r0, 8007568 <__pow5mult+0x40>
 800755c:	4b1d      	ldr	r3, [pc, #116]	@ (80075d4 <__pow5mult+0xac>)
 800755e:	481e      	ldr	r0, [pc, #120]	@ (80075d8 <__pow5mult+0xb0>)
 8007560:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007564:	f000 fbea 	bl	8007d3c <__assert_func>
 8007568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800756c:	6004      	str	r4, [r0, #0]
 800756e:	60c4      	str	r4, [r0, #12]
 8007570:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007578:	b94c      	cbnz	r4, 800758e <__pow5mult+0x66>
 800757a:	f240 2171 	movw	r1, #625	@ 0x271
 800757e:	4638      	mov	r0, r7
 8007580:	f7ff ff12 	bl	80073a8 <__i2b>
 8007584:	2300      	movs	r3, #0
 8007586:	f8c8 0008 	str.w	r0, [r8, #8]
 800758a:	4604      	mov	r4, r0
 800758c:	6003      	str	r3, [r0, #0]
 800758e:	f04f 0900 	mov.w	r9, #0
 8007592:	07eb      	lsls	r3, r5, #31
 8007594:	d50a      	bpl.n	80075ac <__pow5mult+0x84>
 8007596:	4631      	mov	r1, r6
 8007598:	4622      	mov	r2, r4
 800759a:	4638      	mov	r0, r7
 800759c:	f7ff ff1a 	bl	80073d4 <__multiply>
 80075a0:	4631      	mov	r1, r6
 80075a2:	4680      	mov	r8, r0
 80075a4:	4638      	mov	r0, r7
 80075a6:	f7ff fe4b 	bl	8007240 <_Bfree>
 80075aa:	4646      	mov	r6, r8
 80075ac:	106d      	asrs	r5, r5, #1
 80075ae:	d00b      	beq.n	80075c8 <__pow5mult+0xa0>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	b938      	cbnz	r0, 80075c4 <__pow5mult+0x9c>
 80075b4:	4622      	mov	r2, r4
 80075b6:	4621      	mov	r1, r4
 80075b8:	4638      	mov	r0, r7
 80075ba:	f7ff ff0b 	bl	80073d4 <__multiply>
 80075be:	6020      	str	r0, [r4, #0]
 80075c0:	f8c0 9000 	str.w	r9, [r0]
 80075c4:	4604      	mov	r4, r0
 80075c6:	e7e4      	b.n	8007592 <__pow5mult+0x6a>
 80075c8:	4630      	mov	r0, r6
 80075ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ce:	bf00      	nop
 80075d0:	0800859c 	.word	0x0800859c
 80075d4:	080084c1 	.word	0x080084c1
 80075d8:	08008541 	.word	0x08008541

080075dc <__lshift>:
 80075dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e0:	460c      	mov	r4, r1
 80075e2:	6849      	ldr	r1, [r1, #4]
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075ea:	68a3      	ldr	r3, [r4, #8]
 80075ec:	4607      	mov	r7, r0
 80075ee:	4691      	mov	r9, r2
 80075f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075f4:	f108 0601 	add.w	r6, r8, #1
 80075f8:	42b3      	cmp	r3, r6
 80075fa:	db0b      	blt.n	8007614 <__lshift+0x38>
 80075fc:	4638      	mov	r0, r7
 80075fe:	f7ff fddf 	bl	80071c0 <_Balloc>
 8007602:	4605      	mov	r5, r0
 8007604:	b948      	cbnz	r0, 800761a <__lshift+0x3e>
 8007606:	4602      	mov	r2, r0
 8007608:	4b28      	ldr	r3, [pc, #160]	@ (80076ac <__lshift+0xd0>)
 800760a:	4829      	ldr	r0, [pc, #164]	@ (80076b0 <__lshift+0xd4>)
 800760c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007610:	f000 fb94 	bl	8007d3c <__assert_func>
 8007614:	3101      	adds	r1, #1
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	e7ee      	b.n	80075f8 <__lshift+0x1c>
 800761a:	2300      	movs	r3, #0
 800761c:	f100 0114 	add.w	r1, r0, #20
 8007620:	f100 0210 	add.w	r2, r0, #16
 8007624:	4618      	mov	r0, r3
 8007626:	4553      	cmp	r3, sl
 8007628:	db33      	blt.n	8007692 <__lshift+0xb6>
 800762a:	6920      	ldr	r0, [r4, #16]
 800762c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007630:	f104 0314 	add.w	r3, r4, #20
 8007634:	f019 091f 	ands.w	r9, r9, #31
 8007638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800763c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007640:	d02b      	beq.n	800769a <__lshift+0xbe>
 8007642:	f1c9 0e20 	rsb	lr, r9, #32
 8007646:	468a      	mov	sl, r1
 8007648:	2200      	movs	r2, #0
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	fa00 f009 	lsl.w	r0, r0, r9
 8007650:	4310      	orrs	r0, r2
 8007652:	f84a 0b04 	str.w	r0, [sl], #4
 8007656:	f853 2b04 	ldr.w	r2, [r3], #4
 800765a:	459c      	cmp	ip, r3
 800765c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007660:	d8f3      	bhi.n	800764a <__lshift+0x6e>
 8007662:	ebac 0304 	sub.w	r3, ip, r4
 8007666:	3b15      	subs	r3, #21
 8007668:	f023 0303 	bic.w	r3, r3, #3
 800766c:	3304      	adds	r3, #4
 800766e:	f104 0015 	add.w	r0, r4, #21
 8007672:	4584      	cmp	ip, r0
 8007674:	bf38      	it	cc
 8007676:	2304      	movcc	r3, #4
 8007678:	50ca      	str	r2, [r1, r3]
 800767a:	b10a      	cbz	r2, 8007680 <__lshift+0xa4>
 800767c:	f108 0602 	add.w	r6, r8, #2
 8007680:	3e01      	subs	r6, #1
 8007682:	4638      	mov	r0, r7
 8007684:	612e      	str	r6, [r5, #16]
 8007686:	4621      	mov	r1, r4
 8007688:	f7ff fdda 	bl	8007240 <_Bfree>
 800768c:	4628      	mov	r0, r5
 800768e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007692:	f842 0f04 	str.w	r0, [r2, #4]!
 8007696:	3301      	adds	r3, #1
 8007698:	e7c5      	b.n	8007626 <__lshift+0x4a>
 800769a:	3904      	subs	r1, #4
 800769c:	f853 2b04 	ldr.w	r2, [r3], #4
 80076a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80076a4:	459c      	cmp	ip, r3
 80076a6:	d8f9      	bhi.n	800769c <__lshift+0xc0>
 80076a8:	e7ea      	b.n	8007680 <__lshift+0xa4>
 80076aa:	bf00      	nop
 80076ac:	08008530 	.word	0x08008530
 80076b0:	08008541 	.word	0x08008541

080076b4 <__mcmp>:
 80076b4:	690a      	ldr	r2, [r1, #16]
 80076b6:	4603      	mov	r3, r0
 80076b8:	6900      	ldr	r0, [r0, #16]
 80076ba:	1a80      	subs	r0, r0, r2
 80076bc:	b530      	push	{r4, r5, lr}
 80076be:	d10e      	bne.n	80076de <__mcmp+0x2a>
 80076c0:	3314      	adds	r3, #20
 80076c2:	3114      	adds	r1, #20
 80076c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076d4:	4295      	cmp	r5, r2
 80076d6:	d003      	beq.n	80076e0 <__mcmp+0x2c>
 80076d8:	d205      	bcs.n	80076e6 <__mcmp+0x32>
 80076da:	f04f 30ff 	mov.w	r0, #4294967295
 80076de:	bd30      	pop	{r4, r5, pc}
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	d3f3      	bcc.n	80076cc <__mcmp+0x18>
 80076e4:	e7fb      	b.n	80076de <__mcmp+0x2a>
 80076e6:	2001      	movs	r0, #1
 80076e8:	e7f9      	b.n	80076de <__mcmp+0x2a>
	...

080076ec <__mdiff>:
 80076ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	4689      	mov	r9, r1
 80076f2:	4606      	mov	r6, r0
 80076f4:	4611      	mov	r1, r2
 80076f6:	4648      	mov	r0, r9
 80076f8:	4614      	mov	r4, r2
 80076fa:	f7ff ffdb 	bl	80076b4 <__mcmp>
 80076fe:	1e05      	subs	r5, r0, #0
 8007700:	d112      	bne.n	8007728 <__mdiff+0x3c>
 8007702:	4629      	mov	r1, r5
 8007704:	4630      	mov	r0, r6
 8007706:	f7ff fd5b 	bl	80071c0 <_Balloc>
 800770a:	4602      	mov	r2, r0
 800770c:	b928      	cbnz	r0, 800771a <__mdiff+0x2e>
 800770e:	4b3f      	ldr	r3, [pc, #252]	@ (800780c <__mdiff+0x120>)
 8007710:	f240 2137 	movw	r1, #567	@ 0x237
 8007714:	483e      	ldr	r0, [pc, #248]	@ (8007810 <__mdiff+0x124>)
 8007716:	f000 fb11 	bl	8007d3c <__assert_func>
 800771a:	2301      	movs	r3, #1
 800771c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007720:	4610      	mov	r0, r2
 8007722:	b003      	add	sp, #12
 8007724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007728:	bfbc      	itt	lt
 800772a:	464b      	movlt	r3, r9
 800772c:	46a1      	movlt	r9, r4
 800772e:	4630      	mov	r0, r6
 8007730:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007734:	bfba      	itte	lt
 8007736:	461c      	movlt	r4, r3
 8007738:	2501      	movlt	r5, #1
 800773a:	2500      	movge	r5, #0
 800773c:	f7ff fd40 	bl	80071c0 <_Balloc>
 8007740:	4602      	mov	r2, r0
 8007742:	b918      	cbnz	r0, 800774c <__mdiff+0x60>
 8007744:	4b31      	ldr	r3, [pc, #196]	@ (800780c <__mdiff+0x120>)
 8007746:	f240 2145 	movw	r1, #581	@ 0x245
 800774a:	e7e3      	b.n	8007714 <__mdiff+0x28>
 800774c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007750:	6926      	ldr	r6, [r4, #16]
 8007752:	60c5      	str	r5, [r0, #12]
 8007754:	f109 0310 	add.w	r3, r9, #16
 8007758:	f109 0514 	add.w	r5, r9, #20
 800775c:	f104 0e14 	add.w	lr, r4, #20
 8007760:	f100 0b14 	add.w	fp, r0, #20
 8007764:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007768:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	46d9      	mov	r9, fp
 8007770:	f04f 0c00 	mov.w	ip, #0
 8007774:	9b01      	ldr	r3, [sp, #4]
 8007776:	f85e 0b04 	ldr.w	r0, [lr], #4
 800777a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	fa1f f38a 	uxth.w	r3, sl
 8007784:	4619      	mov	r1, r3
 8007786:	b283      	uxth	r3, r0
 8007788:	1acb      	subs	r3, r1, r3
 800778a:	0c00      	lsrs	r0, r0, #16
 800778c:	4463      	add	r3, ip
 800778e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007792:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007796:	b29b      	uxth	r3, r3
 8007798:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800779c:	4576      	cmp	r6, lr
 800779e:	f849 3b04 	str.w	r3, [r9], #4
 80077a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077a6:	d8e5      	bhi.n	8007774 <__mdiff+0x88>
 80077a8:	1b33      	subs	r3, r6, r4
 80077aa:	3b15      	subs	r3, #21
 80077ac:	f023 0303 	bic.w	r3, r3, #3
 80077b0:	3415      	adds	r4, #21
 80077b2:	3304      	adds	r3, #4
 80077b4:	42a6      	cmp	r6, r4
 80077b6:	bf38      	it	cc
 80077b8:	2304      	movcc	r3, #4
 80077ba:	441d      	add	r5, r3
 80077bc:	445b      	add	r3, fp
 80077be:	461e      	mov	r6, r3
 80077c0:	462c      	mov	r4, r5
 80077c2:	4544      	cmp	r4, r8
 80077c4:	d30e      	bcc.n	80077e4 <__mdiff+0xf8>
 80077c6:	f108 0103 	add.w	r1, r8, #3
 80077ca:	1b49      	subs	r1, r1, r5
 80077cc:	f021 0103 	bic.w	r1, r1, #3
 80077d0:	3d03      	subs	r5, #3
 80077d2:	45a8      	cmp	r8, r5
 80077d4:	bf38      	it	cc
 80077d6:	2100      	movcc	r1, #0
 80077d8:	440b      	add	r3, r1
 80077da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077de:	b191      	cbz	r1, 8007806 <__mdiff+0x11a>
 80077e0:	6117      	str	r7, [r2, #16]
 80077e2:	e79d      	b.n	8007720 <__mdiff+0x34>
 80077e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80077e8:	46e6      	mov	lr, ip
 80077ea:	0c08      	lsrs	r0, r1, #16
 80077ec:	fa1c fc81 	uxtah	ip, ip, r1
 80077f0:	4471      	add	r1, lr
 80077f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80077f6:	b289      	uxth	r1, r1
 80077f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077fc:	f846 1b04 	str.w	r1, [r6], #4
 8007800:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007804:	e7dd      	b.n	80077c2 <__mdiff+0xd6>
 8007806:	3f01      	subs	r7, #1
 8007808:	e7e7      	b.n	80077da <__mdiff+0xee>
 800780a:	bf00      	nop
 800780c:	08008530 	.word	0x08008530
 8007810:	08008541 	.word	0x08008541

08007814 <__d2b>:
 8007814:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007818:	460f      	mov	r7, r1
 800781a:	2101      	movs	r1, #1
 800781c:	ec59 8b10 	vmov	r8, r9, d0
 8007820:	4616      	mov	r6, r2
 8007822:	f7ff fccd 	bl	80071c0 <_Balloc>
 8007826:	4604      	mov	r4, r0
 8007828:	b930      	cbnz	r0, 8007838 <__d2b+0x24>
 800782a:	4602      	mov	r2, r0
 800782c:	4b23      	ldr	r3, [pc, #140]	@ (80078bc <__d2b+0xa8>)
 800782e:	4824      	ldr	r0, [pc, #144]	@ (80078c0 <__d2b+0xac>)
 8007830:	f240 310f 	movw	r1, #783	@ 0x30f
 8007834:	f000 fa82 	bl	8007d3c <__assert_func>
 8007838:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800783c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007840:	b10d      	cbz	r5, 8007846 <__d2b+0x32>
 8007842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	f1b8 0300 	subs.w	r3, r8, #0
 800784c:	d023      	beq.n	8007896 <__d2b+0x82>
 800784e:	4668      	mov	r0, sp
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	f7ff fd7c 	bl	800734e <__lo0bits>
 8007856:	e9dd 1200 	ldrd	r1, r2, [sp]
 800785a:	b1d0      	cbz	r0, 8007892 <__d2b+0x7e>
 800785c:	f1c0 0320 	rsb	r3, r0, #32
 8007860:	fa02 f303 	lsl.w	r3, r2, r3
 8007864:	430b      	orrs	r3, r1
 8007866:	40c2      	lsrs	r2, r0
 8007868:	6163      	str	r3, [r4, #20]
 800786a:	9201      	str	r2, [sp, #4]
 800786c:	9b01      	ldr	r3, [sp, #4]
 800786e:	61a3      	str	r3, [r4, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	bf0c      	ite	eq
 8007874:	2201      	moveq	r2, #1
 8007876:	2202      	movne	r2, #2
 8007878:	6122      	str	r2, [r4, #16]
 800787a:	b1a5      	cbz	r5, 80078a6 <__d2b+0x92>
 800787c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007880:	4405      	add	r5, r0
 8007882:	603d      	str	r5, [r7, #0]
 8007884:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007888:	6030      	str	r0, [r6, #0]
 800788a:	4620      	mov	r0, r4
 800788c:	b003      	add	sp, #12
 800788e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007892:	6161      	str	r1, [r4, #20]
 8007894:	e7ea      	b.n	800786c <__d2b+0x58>
 8007896:	a801      	add	r0, sp, #4
 8007898:	f7ff fd59 	bl	800734e <__lo0bits>
 800789c:	9b01      	ldr	r3, [sp, #4]
 800789e:	6163      	str	r3, [r4, #20]
 80078a0:	3020      	adds	r0, #32
 80078a2:	2201      	movs	r2, #1
 80078a4:	e7e8      	b.n	8007878 <__d2b+0x64>
 80078a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80078ae:	6038      	str	r0, [r7, #0]
 80078b0:	6918      	ldr	r0, [r3, #16]
 80078b2:	f7ff fd2d 	bl	8007310 <__hi0bits>
 80078b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078ba:	e7e5      	b.n	8007888 <__d2b+0x74>
 80078bc:	08008530 	.word	0x08008530
 80078c0:	08008541 	.word	0x08008541

080078c4 <__ssputs_r>:
 80078c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c8:	688e      	ldr	r6, [r1, #8]
 80078ca:	461f      	mov	r7, r3
 80078cc:	42be      	cmp	r6, r7
 80078ce:	680b      	ldr	r3, [r1, #0]
 80078d0:	4682      	mov	sl, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	4690      	mov	r8, r2
 80078d6:	d82d      	bhi.n	8007934 <__ssputs_r+0x70>
 80078d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078e0:	d026      	beq.n	8007930 <__ssputs_r+0x6c>
 80078e2:	6965      	ldr	r5, [r4, #20]
 80078e4:	6909      	ldr	r1, [r1, #16]
 80078e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078ea:	eba3 0901 	sub.w	r9, r3, r1
 80078ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078f2:	1c7b      	adds	r3, r7, #1
 80078f4:	444b      	add	r3, r9
 80078f6:	106d      	asrs	r5, r5, #1
 80078f8:	429d      	cmp	r5, r3
 80078fa:	bf38      	it	cc
 80078fc:	461d      	movcc	r5, r3
 80078fe:	0553      	lsls	r3, r2, #21
 8007900:	d527      	bpl.n	8007952 <__ssputs_r+0x8e>
 8007902:	4629      	mov	r1, r5
 8007904:	f7ff fbd0 	bl	80070a8 <_malloc_r>
 8007908:	4606      	mov	r6, r0
 800790a:	b360      	cbz	r0, 8007966 <__ssputs_r+0xa2>
 800790c:	6921      	ldr	r1, [r4, #16]
 800790e:	464a      	mov	r2, r9
 8007910:	f000 fa06 	bl	8007d20 <memcpy>
 8007914:	89a3      	ldrh	r3, [r4, #12]
 8007916:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800791a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	6126      	str	r6, [r4, #16]
 8007922:	6165      	str	r5, [r4, #20]
 8007924:	444e      	add	r6, r9
 8007926:	eba5 0509 	sub.w	r5, r5, r9
 800792a:	6026      	str	r6, [r4, #0]
 800792c:	60a5      	str	r5, [r4, #8]
 800792e:	463e      	mov	r6, r7
 8007930:	42be      	cmp	r6, r7
 8007932:	d900      	bls.n	8007936 <__ssputs_r+0x72>
 8007934:	463e      	mov	r6, r7
 8007936:	6820      	ldr	r0, [r4, #0]
 8007938:	4632      	mov	r2, r6
 800793a:	4641      	mov	r1, r8
 800793c:	f000 f9c6 	bl	8007ccc <memmove>
 8007940:	68a3      	ldr	r3, [r4, #8]
 8007942:	1b9b      	subs	r3, r3, r6
 8007944:	60a3      	str	r3, [r4, #8]
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	4433      	add	r3, r6
 800794a:	6023      	str	r3, [r4, #0]
 800794c:	2000      	movs	r0, #0
 800794e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007952:	462a      	mov	r2, r5
 8007954:	f000 fa36 	bl	8007dc4 <_realloc_r>
 8007958:	4606      	mov	r6, r0
 800795a:	2800      	cmp	r0, #0
 800795c:	d1e0      	bne.n	8007920 <__ssputs_r+0x5c>
 800795e:	6921      	ldr	r1, [r4, #16]
 8007960:	4650      	mov	r0, sl
 8007962:	f7ff fb2d 	bl	8006fc0 <_free_r>
 8007966:	230c      	movs	r3, #12
 8007968:	f8ca 3000 	str.w	r3, [sl]
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e7e9      	b.n	800794e <__ssputs_r+0x8a>
	...

0800797c <_svfiprintf_r>:
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	4698      	mov	r8, r3
 8007982:	898b      	ldrh	r3, [r1, #12]
 8007984:	061b      	lsls	r3, r3, #24
 8007986:	b09d      	sub	sp, #116	@ 0x74
 8007988:	4607      	mov	r7, r0
 800798a:	460d      	mov	r5, r1
 800798c:	4614      	mov	r4, r2
 800798e:	d510      	bpl.n	80079b2 <_svfiprintf_r+0x36>
 8007990:	690b      	ldr	r3, [r1, #16]
 8007992:	b973      	cbnz	r3, 80079b2 <_svfiprintf_r+0x36>
 8007994:	2140      	movs	r1, #64	@ 0x40
 8007996:	f7ff fb87 	bl	80070a8 <_malloc_r>
 800799a:	6028      	str	r0, [r5, #0]
 800799c:	6128      	str	r0, [r5, #16]
 800799e:	b930      	cbnz	r0, 80079ae <_svfiprintf_r+0x32>
 80079a0:	230c      	movs	r3, #12
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	b01d      	add	sp, #116	@ 0x74
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	2340      	movs	r3, #64	@ 0x40
 80079b0:	616b      	str	r3, [r5, #20]
 80079b2:	2300      	movs	r3, #0
 80079b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80079b6:	2320      	movs	r3, #32
 80079b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c0:	2330      	movs	r3, #48	@ 0x30
 80079c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b60 <_svfiprintf_r+0x1e4>
 80079c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079ca:	f04f 0901 	mov.w	r9, #1
 80079ce:	4623      	mov	r3, r4
 80079d0:	469a      	mov	sl, r3
 80079d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d6:	b10a      	cbz	r2, 80079dc <_svfiprintf_r+0x60>
 80079d8:	2a25      	cmp	r2, #37	@ 0x25
 80079da:	d1f9      	bne.n	80079d0 <_svfiprintf_r+0x54>
 80079dc:	ebba 0b04 	subs.w	fp, sl, r4
 80079e0:	d00b      	beq.n	80079fa <_svfiprintf_r+0x7e>
 80079e2:	465b      	mov	r3, fp
 80079e4:	4622      	mov	r2, r4
 80079e6:	4629      	mov	r1, r5
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7ff ff6b 	bl	80078c4 <__ssputs_r>
 80079ee:	3001      	adds	r0, #1
 80079f0:	f000 80a7 	beq.w	8007b42 <_svfiprintf_r+0x1c6>
 80079f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079f6:	445a      	add	r2, fp
 80079f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80079fa:	f89a 3000 	ldrb.w	r3, [sl]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 809f 	beq.w	8007b42 <_svfiprintf_r+0x1c6>
 8007a04:	2300      	movs	r3, #0
 8007a06:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a0e:	f10a 0a01 	add.w	sl, sl, #1
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	9307      	str	r3, [sp, #28]
 8007a16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a1c:	4654      	mov	r4, sl
 8007a1e:	2205      	movs	r2, #5
 8007a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a24:	484e      	ldr	r0, [pc, #312]	@ (8007b60 <_svfiprintf_r+0x1e4>)
 8007a26:	f7f8 fbf3 	bl	8000210 <memchr>
 8007a2a:	9a04      	ldr	r2, [sp, #16]
 8007a2c:	b9d8      	cbnz	r0, 8007a66 <_svfiprintf_r+0xea>
 8007a2e:	06d0      	lsls	r0, r2, #27
 8007a30:	bf44      	itt	mi
 8007a32:	2320      	movmi	r3, #32
 8007a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a38:	0711      	lsls	r1, r2, #28
 8007a3a:	bf44      	itt	mi
 8007a3c:	232b      	movmi	r3, #43	@ 0x2b
 8007a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a42:	f89a 3000 	ldrb.w	r3, [sl]
 8007a46:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a48:	d015      	beq.n	8007a76 <_svfiprintf_r+0xfa>
 8007a4a:	9a07      	ldr	r2, [sp, #28]
 8007a4c:	4654      	mov	r4, sl
 8007a4e:	2000      	movs	r0, #0
 8007a50:	f04f 0c0a 	mov.w	ip, #10
 8007a54:	4621      	mov	r1, r4
 8007a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a5a:	3b30      	subs	r3, #48	@ 0x30
 8007a5c:	2b09      	cmp	r3, #9
 8007a5e:	d94b      	bls.n	8007af8 <_svfiprintf_r+0x17c>
 8007a60:	b1b0      	cbz	r0, 8007a90 <_svfiprintf_r+0x114>
 8007a62:	9207      	str	r2, [sp, #28]
 8007a64:	e014      	b.n	8007a90 <_svfiprintf_r+0x114>
 8007a66:	eba0 0308 	sub.w	r3, r0, r8
 8007a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	46a2      	mov	sl, r4
 8007a74:	e7d2      	b.n	8007a1c <_svfiprintf_r+0xa0>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	1d19      	adds	r1, r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	9103      	str	r1, [sp, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bfbb      	ittet	lt
 8007a82:	425b      	neglt	r3, r3
 8007a84:	f042 0202 	orrlt.w	r2, r2, #2
 8007a88:	9307      	strge	r3, [sp, #28]
 8007a8a:	9307      	strlt	r3, [sp, #28]
 8007a8c:	bfb8      	it	lt
 8007a8e:	9204      	strlt	r2, [sp, #16]
 8007a90:	7823      	ldrb	r3, [r4, #0]
 8007a92:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a94:	d10a      	bne.n	8007aac <_svfiprintf_r+0x130>
 8007a96:	7863      	ldrb	r3, [r4, #1]
 8007a98:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a9a:	d132      	bne.n	8007b02 <_svfiprintf_r+0x186>
 8007a9c:	9b03      	ldr	r3, [sp, #12]
 8007a9e:	1d1a      	adds	r2, r3, #4
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	9203      	str	r2, [sp, #12]
 8007aa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007aa8:	3402      	adds	r4, #2
 8007aaa:	9305      	str	r3, [sp, #20]
 8007aac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b70 <_svfiprintf_r+0x1f4>
 8007ab0:	7821      	ldrb	r1, [r4, #0]
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	4650      	mov	r0, sl
 8007ab6:	f7f8 fbab 	bl	8000210 <memchr>
 8007aba:	b138      	cbz	r0, 8007acc <_svfiprintf_r+0x150>
 8007abc:	9b04      	ldr	r3, [sp, #16]
 8007abe:	eba0 000a 	sub.w	r0, r0, sl
 8007ac2:	2240      	movs	r2, #64	@ 0x40
 8007ac4:	4082      	lsls	r2, r0
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	3401      	adds	r4, #1
 8007aca:	9304      	str	r3, [sp, #16]
 8007acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad0:	4824      	ldr	r0, [pc, #144]	@ (8007b64 <_svfiprintf_r+0x1e8>)
 8007ad2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ad6:	2206      	movs	r2, #6
 8007ad8:	f7f8 fb9a 	bl	8000210 <memchr>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d036      	beq.n	8007b4e <_svfiprintf_r+0x1d2>
 8007ae0:	4b21      	ldr	r3, [pc, #132]	@ (8007b68 <_svfiprintf_r+0x1ec>)
 8007ae2:	bb1b      	cbnz	r3, 8007b2c <_svfiprintf_r+0x1b0>
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	3307      	adds	r3, #7
 8007ae8:	f023 0307 	bic.w	r3, r3, #7
 8007aec:	3308      	adds	r3, #8
 8007aee:	9303      	str	r3, [sp, #12]
 8007af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af2:	4433      	add	r3, r6
 8007af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af6:	e76a      	b.n	80079ce <_svfiprintf_r+0x52>
 8007af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007afc:	460c      	mov	r4, r1
 8007afe:	2001      	movs	r0, #1
 8007b00:	e7a8      	b.n	8007a54 <_svfiprintf_r+0xd8>
 8007b02:	2300      	movs	r3, #0
 8007b04:	3401      	adds	r4, #1
 8007b06:	9305      	str	r3, [sp, #20]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	f04f 0c0a 	mov.w	ip, #10
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b14:	3a30      	subs	r2, #48	@ 0x30
 8007b16:	2a09      	cmp	r2, #9
 8007b18:	d903      	bls.n	8007b22 <_svfiprintf_r+0x1a6>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0c6      	beq.n	8007aac <_svfiprintf_r+0x130>
 8007b1e:	9105      	str	r1, [sp, #20]
 8007b20:	e7c4      	b.n	8007aac <_svfiprintf_r+0x130>
 8007b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b26:	4604      	mov	r4, r0
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e7f0      	b.n	8007b0e <_svfiprintf_r+0x192>
 8007b2c:	ab03      	add	r3, sp, #12
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	462a      	mov	r2, r5
 8007b32:	4b0e      	ldr	r3, [pc, #56]	@ (8007b6c <_svfiprintf_r+0x1f0>)
 8007b34:	a904      	add	r1, sp, #16
 8007b36:	4638      	mov	r0, r7
 8007b38:	f7fd fe98 	bl	800586c <_printf_float>
 8007b3c:	1c42      	adds	r2, r0, #1
 8007b3e:	4606      	mov	r6, r0
 8007b40:	d1d6      	bne.n	8007af0 <_svfiprintf_r+0x174>
 8007b42:	89ab      	ldrh	r3, [r5, #12]
 8007b44:	065b      	lsls	r3, r3, #25
 8007b46:	f53f af2d 	bmi.w	80079a4 <_svfiprintf_r+0x28>
 8007b4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b4c:	e72c      	b.n	80079a8 <_svfiprintf_r+0x2c>
 8007b4e:	ab03      	add	r3, sp, #12
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	462a      	mov	r2, r5
 8007b54:	4b05      	ldr	r3, [pc, #20]	@ (8007b6c <_svfiprintf_r+0x1f0>)
 8007b56:	a904      	add	r1, sp, #16
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7fe f91f 	bl	8005d9c <_printf_i>
 8007b5e:	e7ed      	b.n	8007b3c <_svfiprintf_r+0x1c0>
 8007b60:	08008698 	.word	0x08008698
 8007b64:	080086a2 	.word	0x080086a2
 8007b68:	0800586d 	.word	0x0800586d
 8007b6c:	080078c5 	.word	0x080078c5
 8007b70:	0800869e 	.word	0x0800869e

08007b74 <__sflush_r>:
 8007b74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7c:	0716      	lsls	r6, r2, #28
 8007b7e:	4605      	mov	r5, r0
 8007b80:	460c      	mov	r4, r1
 8007b82:	d454      	bmi.n	8007c2e <__sflush_r+0xba>
 8007b84:	684b      	ldr	r3, [r1, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	dc02      	bgt.n	8007b90 <__sflush_r+0x1c>
 8007b8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dd48      	ble.n	8007c22 <__sflush_r+0xae>
 8007b90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	d045      	beq.n	8007c22 <__sflush_r+0xae>
 8007b96:	2300      	movs	r3, #0
 8007b98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b9c:	682f      	ldr	r7, [r5, #0]
 8007b9e:	6a21      	ldr	r1, [r4, #32]
 8007ba0:	602b      	str	r3, [r5, #0]
 8007ba2:	d030      	beq.n	8007c06 <__sflush_r+0x92>
 8007ba4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	0759      	lsls	r1, r3, #29
 8007baa:	d505      	bpl.n	8007bb8 <__sflush_r+0x44>
 8007bac:	6863      	ldr	r3, [r4, #4]
 8007bae:	1ad2      	subs	r2, r2, r3
 8007bb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bb2:	b10b      	cbz	r3, 8007bb8 <__sflush_r+0x44>
 8007bb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	2300      	movs	r3, #0
 8007bba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bbc:	6a21      	ldr	r1, [r4, #32]
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	47b0      	blx	r6
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	d106      	bne.n	8007bd6 <__sflush_r+0x62>
 8007bc8:	6829      	ldr	r1, [r5, #0]
 8007bca:	291d      	cmp	r1, #29
 8007bcc:	d82b      	bhi.n	8007c26 <__sflush_r+0xb2>
 8007bce:	4a2a      	ldr	r2, [pc, #168]	@ (8007c78 <__sflush_r+0x104>)
 8007bd0:	410a      	asrs	r2, r1
 8007bd2:	07d6      	lsls	r6, r2, #31
 8007bd4:	d427      	bmi.n	8007c26 <__sflush_r+0xb2>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	6062      	str	r2, [r4, #4]
 8007bda:	04d9      	lsls	r1, r3, #19
 8007bdc:	6922      	ldr	r2, [r4, #16]
 8007bde:	6022      	str	r2, [r4, #0]
 8007be0:	d504      	bpl.n	8007bec <__sflush_r+0x78>
 8007be2:	1c42      	adds	r2, r0, #1
 8007be4:	d101      	bne.n	8007bea <__sflush_r+0x76>
 8007be6:	682b      	ldr	r3, [r5, #0]
 8007be8:	b903      	cbnz	r3, 8007bec <__sflush_r+0x78>
 8007bea:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bee:	602f      	str	r7, [r5, #0]
 8007bf0:	b1b9      	cbz	r1, 8007c22 <__sflush_r+0xae>
 8007bf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bf6:	4299      	cmp	r1, r3
 8007bf8:	d002      	beq.n	8007c00 <__sflush_r+0x8c>
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f7ff f9e0 	bl	8006fc0 <_free_r>
 8007c00:	2300      	movs	r3, #0
 8007c02:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c04:	e00d      	b.n	8007c22 <__sflush_r+0xae>
 8007c06:	2301      	movs	r3, #1
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b0      	blx	r6
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	1c50      	adds	r0, r2, #1
 8007c10:	d1c9      	bne.n	8007ba6 <__sflush_r+0x32>
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0c6      	beq.n	8007ba6 <__sflush_r+0x32>
 8007c18:	2b1d      	cmp	r3, #29
 8007c1a:	d001      	beq.n	8007c20 <__sflush_r+0xac>
 8007c1c:	2b16      	cmp	r3, #22
 8007c1e:	d11e      	bne.n	8007c5e <__sflush_r+0xea>
 8007c20:	602f      	str	r7, [r5, #0]
 8007c22:	2000      	movs	r0, #0
 8007c24:	e022      	b.n	8007c6c <__sflush_r+0xf8>
 8007c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c2a:	b21b      	sxth	r3, r3
 8007c2c:	e01b      	b.n	8007c66 <__sflush_r+0xf2>
 8007c2e:	690f      	ldr	r7, [r1, #16]
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	d0f6      	beq.n	8007c22 <__sflush_r+0xae>
 8007c34:	0793      	lsls	r3, r2, #30
 8007c36:	680e      	ldr	r6, [r1, #0]
 8007c38:	bf08      	it	eq
 8007c3a:	694b      	ldreq	r3, [r1, #20]
 8007c3c:	600f      	str	r7, [r1, #0]
 8007c3e:	bf18      	it	ne
 8007c40:	2300      	movne	r3, #0
 8007c42:	eba6 0807 	sub.w	r8, r6, r7
 8007c46:	608b      	str	r3, [r1, #8]
 8007c48:	f1b8 0f00 	cmp.w	r8, #0
 8007c4c:	dde9      	ble.n	8007c22 <__sflush_r+0xae>
 8007c4e:	6a21      	ldr	r1, [r4, #32]
 8007c50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c52:	4643      	mov	r3, r8
 8007c54:	463a      	mov	r2, r7
 8007c56:	4628      	mov	r0, r5
 8007c58:	47b0      	blx	r6
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	dc08      	bgt.n	8007c70 <__sflush_r+0xfc>
 8007c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c66:	81a3      	strh	r3, [r4, #12]
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c70:	4407      	add	r7, r0
 8007c72:	eba8 0800 	sub.w	r8, r8, r0
 8007c76:	e7e7      	b.n	8007c48 <__sflush_r+0xd4>
 8007c78:	dfbffffe 	.word	0xdfbffffe

08007c7c <_fflush_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	690b      	ldr	r3, [r1, #16]
 8007c80:	4605      	mov	r5, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	b913      	cbnz	r3, 8007c8c <_fflush_r+0x10>
 8007c86:	2500      	movs	r5, #0
 8007c88:	4628      	mov	r0, r5
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	b118      	cbz	r0, 8007c96 <_fflush_r+0x1a>
 8007c8e:	6a03      	ldr	r3, [r0, #32]
 8007c90:	b90b      	cbnz	r3, 8007c96 <_fflush_r+0x1a>
 8007c92:	f7fe fa2f 	bl	80060f4 <__sinit>
 8007c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0f3      	beq.n	8007c86 <_fflush_r+0xa>
 8007c9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ca0:	07d0      	lsls	r0, r2, #31
 8007ca2:	d404      	bmi.n	8007cae <_fflush_r+0x32>
 8007ca4:	0599      	lsls	r1, r3, #22
 8007ca6:	d402      	bmi.n	8007cae <_fflush_r+0x32>
 8007ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007caa:	f7fe fb3a 	bl	8006322 <__retarget_lock_acquire_recursive>
 8007cae:	4628      	mov	r0, r5
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	f7ff ff5f 	bl	8007b74 <__sflush_r>
 8007cb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cb8:	07da      	lsls	r2, r3, #31
 8007cba:	4605      	mov	r5, r0
 8007cbc:	d4e4      	bmi.n	8007c88 <_fflush_r+0xc>
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	059b      	lsls	r3, r3, #22
 8007cc2:	d4e1      	bmi.n	8007c88 <_fflush_r+0xc>
 8007cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cc6:	f7fe fb2d 	bl	8006324 <__retarget_lock_release_recursive>
 8007cca:	e7dd      	b.n	8007c88 <_fflush_r+0xc>

08007ccc <memmove>:
 8007ccc:	4288      	cmp	r0, r1
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	eb01 0402 	add.w	r4, r1, r2
 8007cd4:	d902      	bls.n	8007cdc <memmove+0x10>
 8007cd6:	4284      	cmp	r4, r0
 8007cd8:	4623      	mov	r3, r4
 8007cda:	d807      	bhi.n	8007cec <memmove+0x20>
 8007cdc:	1e43      	subs	r3, r0, #1
 8007cde:	42a1      	cmp	r1, r4
 8007ce0:	d008      	beq.n	8007cf4 <memmove+0x28>
 8007ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cea:	e7f8      	b.n	8007cde <memmove+0x12>
 8007cec:	4402      	add	r2, r0
 8007cee:	4601      	mov	r1, r0
 8007cf0:	428a      	cmp	r2, r1
 8007cf2:	d100      	bne.n	8007cf6 <memmove+0x2a>
 8007cf4:	bd10      	pop	{r4, pc}
 8007cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cfe:	e7f7      	b.n	8007cf0 <memmove+0x24>

08007d00 <_sbrk_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4d06      	ldr	r5, [pc, #24]	@ (8007d1c <_sbrk_r+0x1c>)
 8007d04:	2300      	movs	r3, #0
 8007d06:	4604      	mov	r4, r0
 8007d08:	4608      	mov	r0, r1
 8007d0a:	602b      	str	r3, [r5, #0]
 8007d0c:	f7fa fb08 	bl	8002320 <_sbrk>
 8007d10:	1c43      	adds	r3, r0, #1
 8007d12:	d102      	bne.n	8007d1a <_sbrk_r+0x1a>
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	b103      	cbz	r3, 8007d1a <_sbrk_r+0x1a>
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	bd38      	pop	{r3, r4, r5, pc}
 8007d1c:	200004a0 	.word	0x200004a0

08007d20 <memcpy>:
 8007d20:	440a      	add	r2, r1
 8007d22:	4291      	cmp	r1, r2
 8007d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d28:	d100      	bne.n	8007d2c <memcpy+0xc>
 8007d2a:	4770      	bx	lr
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d36:	4291      	cmp	r1, r2
 8007d38:	d1f9      	bne.n	8007d2e <memcpy+0xe>
 8007d3a:	bd10      	pop	{r4, pc}

08007d3c <__assert_func>:
 8007d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d3e:	4614      	mov	r4, r2
 8007d40:	461a      	mov	r2, r3
 8007d42:	4b09      	ldr	r3, [pc, #36]	@ (8007d68 <__assert_func+0x2c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4605      	mov	r5, r0
 8007d48:	68d8      	ldr	r0, [r3, #12]
 8007d4a:	b954      	cbnz	r4, 8007d62 <__assert_func+0x26>
 8007d4c:	4b07      	ldr	r3, [pc, #28]	@ (8007d6c <__assert_func+0x30>)
 8007d4e:	461c      	mov	r4, r3
 8007d50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d54:	9100      	str	r1, [sp, #0]
 8007d56:	462b      	mov	r3, r5
 8007d58:	4905      	ldr	r1, [pc, #20]	@ (8007d70 <__assert_func+0x34>)
 8007d5a:	f000 f86f 	bl	8007e3c <fiprintf>
 8007d5e:	f000 f87f 	bl	8007e60 <abort>
 8007d62:	4b04      	ldr	r3, [pc, #16]	@ (8007d74 <__assert_func+0x38>)
 8007d64:	e7f4      	b.n	8007d50 <__assert_func+0x14>
 8007d66:	bf00      	nop
 8007d68:	20000018 	.word	0x20000018
 8007d6c:	080086ee 	.word	0x080086ee
 8007d70:	080086c0 	.word	0x080086c0
 8007d74:	080086b3 	.word	0x080086b3

08007d78 <_calloc_r>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	fba1 5402 	umull	r5, r4, r1, r2
 8007d7e:	b93c      	cbnz	r4, 8007d90 <_calloc_r+0x18>
 8007d80:	4629      	mov	r1, r5
 8007d82:	f7ff f991 	bl	80070a8 <_malloc_r>
 8007d86:	4606      	mov	r6, r0
 8007d88:	b928      	cbnz	r0, 8007d96 <_calloc_r+0x1e>
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}
 8007d90:	220c      	movs	r2, #12
 8007d92:	6002      	str	r2, [r0, #0]
 8007d94:	e7f9      	b.n	8007d8a <_calloc_r+0x12>
 8007d96:	462a      	mov	r2, r5
 8007d98:	4621      	mov	r1, r4
 8007d9a:	f7fe fa44 	bl	8006226 <memset>
 8007d9e:	e7f5      	b.n	8007d8c <_calloc_r+0x14>

08007da0 <__ascii_mbtowc>:
 8007da0:	b082      	sub	sp, #8
 8007da2:	b901      	cbnz	r1, 8007da6 <__ascii_mbtowc+0x6>
 8007da4:	a901      	add	r1, sp, #4
 8007da6:	b142      	cbz	r2, 8007dba <__ascii_mbtowc+0x1a>
 8007da8:	b14b      	cbz	r3, 8007dbe <__ascii_mbtowc+0x1e>
 8007daa:	7813      	ldrb	r3, [r2, #0]
 8007dac:	600b      	str	r3, [r1, #0]
 8007dae:	7812      	ldrb	r2, [r2, #0]
 8007db0:	1e10      	subs	r0, r2, #0
 8007db2:	bf18      	it	ne
 8007db4:	2001      	movne	r0, #1
 8007db6:	b002      	add	sp, #8
 8007db8:	4770      	bx	lr
 8007dba:	4610      	mov	r0, r2
 8007dbc:	e7fb      	b.n	8007db6 <__ascii_mbtowc+0x16>
 8007dbe:	f06f 0001 	mvn.w	r0, #1
 8007dc2:	e7f8      	b.n	8007db6 <__ascii_mbtowc+0x16>

08007dc4 <_realloc_r>:
 8007dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc8:	4680      	mov	r8, r0
 8007dca:	4615      	mov	r5, r2
 8007dcc:	460c      	mov	r4, r1
 8007dce:	b921      	cbnz	r1, 8007dda <_realloc_r+0x16>
 8007dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	f7ff b967 	b.w	80070a8 <_malloc_r>
 8007dda:	b92a      	cbnz	r2, 8007de8 <_realloc_r+0x24>
 8007ddc:	f7ff f8f0 	bl	8006fc0 <_free_r>
 8007de0:	2400      	movs	r4, #0
 8007de2:	4620      	mov	r0, r4
 8007de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de8:	f000 f841 	bl	8007e6e <_malloc_usable_size_r>
 8007dec:	4285      	cmp	r5, r0
 8007dee:	4606      	mov	r6, r0
 8007df0:	d802      	bhi.n	8007df8 <_realloc_r+0x34>
 8007df2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007df6:	d8f4      	bhi.n	8007de2 <_realloc_r+0x1e>
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	f7ff f954 	bl	80070a8 <_malloc_r>
 8007e00:	4607      	mov	r7, r0
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d0ec      	beq.n	8007de0 <_realloc_r+0x1c>
 8007e06:	42b5      	cmp	r5, r6
 8007e08:	462a      	mov	r2, r5
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	bf28      	it	cs
 8007e0e:	4632      	movcs	r2, r6
 8007e10:	f7ff ff86 	bl	8007d20 <memcpy>
 8007e14:	4621      	mov	r1, r4
 8007e16:	4640      	mov	r0, r8
 8007e18:	f7ff f8d2 	bl	8006fc0 <_free_r>
 8007e1c:	463c      	mov	r4, r7
 8007e1e:	e7e0      	b.n	8007de2 <_realloc_r+0x1e>

08007e20 <__ascii_wctomb>:
 8007e20:	4603      	mov	r3, r0
 8007e22:	4608      	mov	r0, r1
 8007e24:	b141      	cbz	r1, 8007e38 <__ascii_wctomb+0x18>
 8007e26:	2aff      	cmp	r2, #255	@ 0xff
 8007e28:	d904      	bls.n	8007e34 <__ascii_wctomb+0x14>
 8007e2a:	228a      	movs	r2, #138	@ 0x8a
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e32:	4770      	bx	lr
 8007e34:	700a      	strb	r2, [r1, #0]
 8007e36:	2001      	movs	r0, #1
 8007e38:	4770      	bx	lr
	...

08007e3c <fiprintf>:
 8007e3c:	b40e      	push	{r1, r2, r3}
 8007e3e:	b503      	push	{r0, r1, lr}
 8007e40:	4601      	mov	r1, r0
 8007e42:	ab03      	add	r3, sp, #12
 8007e44:	4805      	ldr	r0, [pc, #20]	@ (8007e5c <fiprintf+0x20>)
 8007e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e4a:	6800      	ldr	r0, [r0, #0]
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	f000 f83f 	bl	8007ed0 <_vfiprintf_r>
 8007e52:	b002      	add	sp, #8
 8007e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e58:	b003      	add	sp, #12
 8007e5a:	4770      	bx	lr
 8007e5c:	20000018 	.word	0x20000018

08007e60 <abort>:
 8007e60:	b508      	push	{r3, lr}
 8007e62:	2006      	movs	r0, #6
 8007e64:	f000 fa08 	bl	8008278 <raise>
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f7fa f9e1 	bl	8002230 <_exit>

08007e6e <_malloc_usable_size_r>:
 8007e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e72:	1f18      	subs	r0, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bfbc      	itt	lt
 8007e78:	580b      	ldrlt	r3, [r1, r0]
 8007e7a:	18c0      	addlt	r0, r0, r3
 8007e7c:	4770      	bx	lr

08007e7e <__sfputc_r>:
 8007e7e:	6893      	ldr	r3, [r2, #8]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	b410      	push	{r4}
 8007e86:	6093      	str	r3, [r2, #8]
 8007e88:	da08      	bge.n	8007e9c <__sfputc_r+0x1e>
 8007e8a:	6994      	ldr	r4, [r2, #24]
 8007e8c:	42a3      	cmp	r3, r4
 8007e8e:	db01      	blt.n	8007e94 <__sfputc_r+0x16>
 8007e90:	290a      	cmp	r1, #10
 8007e92:	d103      	bne.n	8007e9c <__sfputc_r+0x1e>
 8007e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e98:	f000 b932 	b.w	8008100 <__swbuf_r>
 8007e9c:	6813      	ldr	r3, [r2, #0]
 8007e9e:	1c58      	adds	r0, r3, #1
 8007ea0:	6010      	str	r0, [r2, #0]
 8007ea2:	7019      	strb	r1, [r3, #0]
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <__sfputs_r>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	4606      	mov	r6, r0
 8007eb0:	460f      	mov	r7, r1
 8007eb2:	4614      	mov	r4, r2
 8007eb4:	18d5      	adds	r5, r2, r3
 8007eb6:	42ac      	cmp	r4, r5
 8007eb8:	d101      	bne.n	8007ebe <__sfputs_r+0x12>
 8007eba:	2000      	movs	r0, #0
 8007ebc:	e007      	b.n	8007ece <__sfputs_r+0x22>
 8007ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec2:	463a      	mov	r2, r7
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f7ff ffda 	bl	8007e7e <__sfputc_r>
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	d1f3      	bne.n	8007eb6 <__sfputs_r+0xa>
 8007ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ed0 <_vfiprintf_r>:
 8007ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed4:	460d      	mov	r5, r1
 8007ed6:	b09d      	sub	sp, #116	@ 0x74
 8007ed8:	4614      	mov	r4, r2
 8007eda:	4698      	mov	r8, r3
 8007edc:	4606      	mov	r6, r0
 8007ede:	b118      	cbz	r0, 8007ee8 <_vfiprintf_r+0x18>
 8007ee0:	6a03      	ldr	r3, [r0, #32]
 8007ee2:	b90b      	cbnz	r3, 8007ee8 <_vfiprintf_r+0x18>
 8007ee4:	f7fe f906 	bl	80060f4 <__sinit>
 8007ee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eea:	07d9      	lsls	r1, r3, #31
 8007eec:	d405      	bmi.n	8007efa <_vfiprintf_r+0x2a>
 8007eee:	89ab      	ldrh	r3, [r5, #12]
 8007ef0:	059a      	lsls	r2, r3, #22
 8007ef2:	d402      	bmi.n	8007efa <_vfiprintf_r+0x2a>
 8007ef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ef6:	f7fe fa14 	bl	8006322 <__retarget_lock_acquire_recursive>
 8007efa:	89ab      	ldrh	r3, [r5, #12]
 8007efc:	071b      	lsls	r3, r3, #28
 8007efe:	d501      	bpl.n	8007f04 <_vfiprintf_r+0x34>
 8007f00:	692b      	ldr	r3, [r5, #16]
 8007f02:	b99b      	cbnz	r3, 8007f2c <_vfiprintf_r+0x5c>
 8007f04:	4629      	mov	r1, r5
 8007f06:	4630      	mov	r0, r6
 8007f08:	f000 f938 	bl	800817c <__swsetup_r>
 8007f0c:	b170      	cbz	r0, 8007f2c <_vfiprintf_r+0x5c>
 8007f0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f10:	07dc      	lsls	r4, r3, #31
 8007f12:	d504      	bpl.n	8007f1e <_vfiprintf_r+0x4e>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	b01d      	add	sp, #116	@ 0x74
 8007f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1e:	89ab      	ldrh	r3, [r5, #12]
 8007f20:	0598      	lsls	r0, r3, #22
 8007f22:	d4f7      	bmi.n	8007f14 <_vfiprintf_r+0x44>
 8007f24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f26:	f7fe f9fd 	bl	8006324 <__retarget_lock_release_recursive>
 8007f2a:	e7f3      	b.n	8007f14 <_vfiprintf_r+0x44>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f30:	2320      	movs	r3, #32
 8007f32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f3a:	2330      	movs	r3, #48	@ 0x30
 8007f3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80080ec <_vfiprintf_r+0x21c>
 8007f40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f44:	f04f 0901 	mov.w	r9, #1
 8007f48:	4623      	mov	r3, r4
 8007f4a:	469a      	mov	sl, r3
 8007f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f50:	b10a      	cbz	r2, 8007f56 <_vfiprintf_r+0x86>
 8007f52:	2a25      	cmp	r2, #37	@ 0x25
 8007f54:	d1f9      	bne.n	8007f4a <_vfiprintf_r+0x7a>
 8007f56:	ebba 0b04 	subs.w	fp, sl, r4
 8007f5a:	d00b      	beq.n	8007f74 <_vfiprintf_r+0xa4>
 8007f5c:	465b      	mov	r3, fp
 8007f5e:	4622      	mov	r2, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7ff ffa2 	bl	8007eac <__sfputs_r>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	f000 80a7 	beq.w	80080bc <_vfiprintf_r+0x1ec>
 8007f6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f70:	445a      	add	r2, fp
 8007f72:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f74:	f89a 3000 	ldrb.w	r3, [sl]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 809f 	beq.w	80080bc <_vfiprintf_r+0x1ec>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f04f 32ff 	mov.w	r2, #4294967295
 8007f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f88:	f10a 0a01 	add.w	sl, sl, #1
 8007f8c:	9304      	str	r3, [sp, #16]
 8007f8e:	9307      	str	r3, [sp, #28]
 8007f90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f94:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f96:	4654      	mov	r4, sl
 8007f98:	2205      	movs	r2, #5
 8007f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f9e:	4853      	ldr	r0, [pc, #332]	@ (80080ec <_vfiprintf_r+0x21c>)
 8007fa0:	f7f8 f936 	bl	8000210 <memchr>
 8007fa4:	9a04      	ldr	r2, [sp, #16]
 8007fa6:	b9d8      	cbnz	r0, 8007fe0 <_vfiprintf_r+0x110>
 8007fa8:	06d1      	lsls	r1, r2, #27
 8007faa:	bf44      	itt	mi
 8007fac:	2320      	movmi	r3, #32
 8007fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fb2:	0713      	lsls	r3, r2, #28
 8007fb4:	bf44      	itt	mi
 8007fb6:	232b      	movmi	r3, #43	@ 0x2b
 8007fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fc2:	d015      	beq.n	8007ff0 <_vfiprintf_r+0x120>
 8007fc4:	9a07      	ldr	r2, [sp, #28]
 8007fc6:	4654      	mov	r4, sl
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f04f 0c0a 	mov.w	ip, #10
 8007fce:	4621      	mov	r1, r4
 8007fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fd4:	3b30      	subs	r3, #48	@ 0x30
 8007fd6:	2b09      	cmp	r3, #9
 8007fd8:	d94b      	bls.n	8008072 <_vfiprintf_r+0x1a2>
 8007fda:	b1b0      	cbz	r0, 800800a <_vfiprintf_r+0x13a>
 8007fdc:	9207      	str	r2, [sp, #28]
 8007fde:	e014      	b.n	800800a <_vfiprintf_r+0x13a>
 8007fe0:	eba0 0308 	sub.w	r3, r0, r8
 8007fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	9304      	str	r3, [sp, #16]
 8007fec:	46a2      	mov	sl, r4
 8007fee:	e7d2      	b.n	8007f96 <_vfiprintf_r+0xc6>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	1d19      	adds	r1, r3, #4
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	9103      	str	r1, [sp, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	bfbb      	ittet	lt
 8007ffc:	425b      	neglt	r3, r3
 8007ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8008002:	9307      	strge	r3, [sp, #28]
 8008004:	9307      	strlt	r3, [sp, #28]
 8008006:	bfb8      	it	lt
 8008008:	9204      	strlt	r2, [sp, #16]
 800800a:	7823      	ldrb	r3, [r4, #0]
 800800c:	2b2e      	cmp	r3, #46	@ 0x2e
 800800e:	d10a      	bne.n	8008026 <_vfiprintf_r+0x156>
 8008010:	7863      	ldrb	r3, [r4, #1]
 8008012:	2b2a      	cmp	r3, #42	@ 0x2a
 8008014:	d132      	bne.n	800807c <_vfiprintf_r+0x1ac>
 8008016:	9b03      	ldr	r3, [sp, #12]
 8008018:	1d1a      	adds	r2, r3, #4
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	9203      	str	r2, [sp, #12]
 800801e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008022:	3402      	adds	r4, #2
 8008024:	9305      	str	r3, [sp, #20]
 8008026:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080fc <_vfiprintf_r+0x22c>
 800802a:	7821      	ldrb	r1, [r4, #0]
 800802c:	2203      	movs	r2, #3
 800802e:	4650      	mov	r0, sl
 8008030:	f7f8 f8ee 	bl	8000210 <memchr>
 8008034:	b138      	cbz	r0, 8008046 <_vfiprintf_r+0x176>
 8008036:	9b04      	ldr	r3, [sp, #16]
 8008038:	eba0 000a 	sub.w	r0, r0, sl
 800803c:	2240      	movs	r2, #64	@ 0x40
 800803e:	4082      	lsls	r2, r0
 8008040:	4313      	orrs	r3, r2
 8008042:	3401      	adds	r4, #1
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800804a:	4829      	ldr	r0, [pc, #164]	@ (80080f0 <_vfiprintf_r+0x220>)
 800804c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008050:	2206      	movs	r2, #6
 8008052:	f7f8 f8dd 	bl	8000210 <memchr>
 8008056:	2800      	cmp	r0, #0
 8008058:	d03f      	beq.n	80080da <_vfiprintf_r+0x20a>
 800805a:	4b26      	ldr	r3, [pc, #152]	@ (80080f4 <_vfiprintf_r+0x224>)
 800805c:	bb1b      	cbnz	r3, 80080a6 <_vfiprintf_r+0x1d6>
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	3307      	adds	r3, #7
 8008062:	f023 0307 	bic.w	r3, r3, #7
 8008066:	3308      	adds	r3, #8
 8008068:	9303      	str	r3, [sp, #12]
 800806a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800806c:	443b      	add	r3, r7
 800806e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008070:	e76a      	b.n	8007f48 <_vfiprintf_r+0x78>
 8008072:	fb0c 3202 	mla	r2, ip, r2, r3
 8008076:	460c      	mov	r4, r1
 8008078:	2001      	movs	r0, #1
 800807a:	e7a8      	b.n	8007fce <_vfiprintf_r+0xfe>
 800807c:	2300      	movs	r3, #0
 800807e:	3401      	adds	r4, #1
 8008080:	9305      	str	r3, [sp, #20]
 8008082:	4619      	mov	r1, r3
 8008084:	f04f 0c0a 	mov.w	ip, #10
 8008088:	4620      	mov	r0, r4
 800808a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800808e:	3a30      	subs	r2, #48	@ 0x30
 8008090:	2a09      	cmp	r2, #9
 8008092:	d903      	bls.n	800809c <_vfiprintf_r+0x1cc>
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0c6      	beq.n	8008026 <_vfiprintf_r+0x156>
 8008098:	9105      	str	r1, [sp, #20]
 800809a:	e7c4      	b.n	8008026 <_vfiprintf_r+0x156>
 800809c:	fb0c 2101 	mla	r1, ip, r1, r2
 80080a0:	4604      	mov	r4, r0
 80080a2:	2301      	movs	r3, #1
 80080a4:	e7f0      	b.n	8008088 <_vfiprintf_r+0x1b8>
 80080a6:	ab03      	add	r3, sp, #12
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	462a      	mov	r2, r5
 80080ac:	4b12      	ldr	r3, [pc, #72]	@ (80080f8 <_vfiprintf_r+0x228>)
 80080ae:	a904      	add	r1, sp, #16
 80080b0:	4630      	mov	r0, r6
 80080b2:	f7fd fbdb 	bl	800586c <_printf_float>
 80080b6:	4607      	mov	r7, r0
 80080b8:	1c78      	adds	r0, r7, #1
 80080ba:	d1d6      	bne.n	800806a <_vfiprintf_r+0x19a>
 80080bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080be:	07d9      	lsls	r1, r3, #31
 80080c0:	d405      	bmi.n	80080ce <_vfiprintf_r+0x1fe>
 80080c2:	89ab      	ldrh	r3, [r5, #12]
 80080c4:	059a      	lsls	r2, r3, #22
 80080c6:	d402      	bmi.n	80080ce <_vfiprintf_r+0x1fe>
 80080c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080ca:	f7fe f92b 	bl	8006324 <__retarget_lock_release_recursive>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	065b      	lsls	r3, r3, #25
 80080d2:	f53f af1f 	bmi.w	8007f14 <_vfiprintf_r+0x44>
 80080d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080d8:	e71e      	b.n	8007f18 <_vfiprintf_r+0x48>
 80080da:	ab03      	add	r3, sp, #12
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	462a      	mov	r2, r5
 80080e0:	4b05      	ldr	r3, [pc, #20]	@ (80080f8 <_vfiprintf_r+0x228>)
 80080e2:	a904      	add	r1, sp, #16
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7fd fe59 	bl	8005d9c <_printf_i>
 80080ea:	e7e4      	b.n	80080b6 <_vfiprintf_r+0x1e6>
 80080ec:	08008698 	.word	0x08008698
 80080f0:	080086a2 	.word	0x080086a2
 80080f4:	0800586d 	.word	0x0800586d
 80080f8:	08007ead 	.word	0x08007ead
 80080fc:	0800869e 	.word	0x0800869e

08008100 <__swbuf_r>:
 8008100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008102:	460e      	mov	r6, r1
 8008104:	4614      	mov	r4, r2
 8008106:	4605      	mov	r5, r0
 8008108:	b118      	cbz	r0, 8008112 <__swbuf_r+0x12>
 800810a:	6a03      	ldr	r3, [r0, #32]
 800810c:	b90b      	cbnz	r3, 8008112 <__swbuf_r+0x12>
 800810e:	f7fd fff1 	bl	80060f4 <__sinit>
 8008112:	69a3      	ldr	r3, [r4, #24]
 8008114:	60a3      	str	r3, [r4, #8]
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	071a      	lsls	r2, r3, #28
 800811a:	d501      	bpl.n	8008120 <__swbuf_r+0x20>
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	b943      	cbnz	r3, 8008132 <__swbuf_r+0x32>
 8008120:	4621      	mov	r1, r4
 8008122:	4628      	mov	r0, r5
 8008124:	f000 f82a 	bl	800817c <__swsetup_r>
 8008128:	b118      	cbz	r0, 8008132 <__swbuf_r+0x32>
 800812a:	f04f 37ff 	mov.w	r7, #4294967295
 800812e:	4638      	mov	r0, r7
 8008130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	6922      	ldr	r2, [r4, #16]
 8008136:	1a98      	subs	r0, r3, r2
 8008138:	6963      	ldr	r3, [r4, #20]
 800813a:	b2f6      	uxtb	r6, r6
 800813c:	4283      	cmp	r3, r0
 800813e:	4637      	mov	r7, r6
 8008140:	dc05      	bgt.n	800814e <__swbuf_r+0x4e>
 8008142:	4621      	mov	r1, r4
 8008144:	4628      	mov	r0, r5
 8008146:	f7ff fd99 	bl	8007c7c <_fflush_r>
 800814a:	2800      	cmp	r0, #0
 800814c:	d1ed      	bne.n	800812a <__swbuf_r+0x2a>
 800814e:	68a3      	ldr	r3, [r4, #8]
 8008150:	3b01      	subs	r3, #1
 8008152:	60a3      	str	r3, [r4, #8]
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	6022      	str	r2, [r4, #0]
 800815a:	701e      	strb	r6, [r3, #0]
 800815c:	6962      	ldr	r2, [r4, #20]
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	429a      	cmp	r2, r3
 8008162:	d004      	beq.n	800816e <__swbuf_r+0x6e>
 8008164:	89a3      	ldrh	r3, [r4, #12]
 8008166:	07db      	lsls	r3, r3, #31
 8008168:	d5e1      	bpl.n	800812e <__swbuf_r+0x2e>
 800816a:	2e0a      	cmp	r6, #10
 800816c:	d1df      	bne.n	800812e <__swbuf_r+0x2e>
 800816e:	4621      	mov	r1, r4
 8008170:	4628      	mov	r0, r5
 8008172:	f7ff fd83 	bl	8007c7c <_fflush_r>
 8008176:	2800      	cmp	r0, #0
 8008178:	d0d9      	beq.n	800812e <__swbuf_r+0x2e>
 800817a:	e7d6      	b.n	800812a <__swbuf_r+0x2a>

0800817c <__swsetup_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	4b29      	ldr	r3, [pc, #164]	@ (8008224 <__swsetup_r+0xa8>)
 8008180:	4605      	mov	r5, r0
 8008182:	6818      	ldr	r0, [r3, #0]
 8008184:	460c      	mov	r4, r1
 8008186:	b118      	cbz	r0, 8008190 <__swsetup_r+0x14>
 8008188:	6a03      	ldr	r3, [r0, #32]
 800818a:	b90b      	cbnz	r3, 8008190 <__swsetup_r+0x14>
 800818c:	f7fd ffb2 	bl	80060f4 <__sinit>
 8008190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008194:	0719      	lsls	r1, r3, #28
 8008196:	d422      	bmi.n	80081de <__swsetup_r+0x62>
 8008198:	06da      	lsls	r2, r3, #27
 800819a:	d407      	bmi.n	80081ac <__swsetup_r+0x30>
 800819c:	2209      	movs	r2, #9
 800819e:	602a      	str	r2, [r5, #0]
 80081a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081a4:	81a3      	strh	r3, [r4, #12]
 80081a6:	f04f 30ff 	mov.w	r0, #4294967295
 80081aa:	e033      	b.n	8008214 <__swsetup_r+0x98>
 80081ac:	0758      	lsls	r0, r3, #29
 80081ae:	d512      	bpl.n	80081d6 <__swsetup_r+0x5a>
 80081b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081b2:	b141      	cbz	r1, 80081c6 <__swsetup_r+0x4a>
 80081b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081b8:	4299      	cmp	r1, r3
 80081ba:	d002      	beq.n	80081c2 <__swsetup_r+0x46>
 80081bc:	4628      	mov	r0, r5
 80081be:	f7fe feff 	bl	8006fc0 <_free_r>
 80081c2:	2300      	movs	r3, #0
 80081c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081cc:	81a3      	strh	r3, [r4, #12]
 80081ce:	2300      	movs	r3, #0
 80081d0:	6063      	str	r3, [r4, #4]
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	f043 0308 	orr.w	r3, r3, #8
 80081dc:	81a3      	strh	r3, [r4, #12]
 80081de:	6923      	ldr	r3, [r4, #16]
 80081e0:	b94b      	cbnz	r3, 80081f6 <__swsetup_r+0x7a>
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ec:	d003      	beq.n	80081f6 <__swsetup_r+0x7a>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4628      	mov	r0, r5
 80081f2:	f000 f883 	bl	80082fc <__smakebuf_r>
 80081f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fa:	f013 0201 	ands.w	r2, r3, #1
 80081fe:	d00a      	beq.n	8008216 <__swsetup_r+0x9a>
 8008200:	2200      	movs	r2, #0
 8008202:	60a2      	str	r2, [r4, #8]
 8008204:	6962      	ldr	r2, [r4, #20]
 8008206:	4252      	negs	r2, r2
 8008208:	61a2      	str	r2, [r4, #24]
 800820a:	6922      	ldr	r2, [r4, #16]
 800820c:	b942      	cbnz	r2, 8008220 <__swsetup_r+0xa4>
 800820e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008212:	d1c5      	bne.n	80081a0 <__swsetup_r+0x24>
 8008214:	bd38      	pop	{r3, r4, r5, pc}
 8008216:	0799      	lsls	r1, r3, #30
 8008218:	bf58      	it	pl
 800821a:	6962      	ldrpl	r2, [r4, #20]
 800821c:	60a2      	str	r2, [r4, #8]
 800821e:	e7f4      	b.n	800820a <__swsetup_r+0x8e>
 8008220:	2000      	movs	r0, #0
 8008222:	e7f7      	b.n	8008214 <__swsetup_r+0x98>
 8008224:	20000018 	.word	0x20000018

08008228 <_raise_r>:
 8008228:	291f      	cmp	r1, #31
 800822a:	b538      	push	{r3, r4, r5, lr}
 800822c:	4605      	mov	r5, r0
 800822e:	460c      	mov	r4, r1
 8008230:	d904      	bls.n	800823c <_raise_r+0x14>
 8008232:	2316      	movs	r3, #22
 8008234:	6003      	str	r3, [r0, #0]
 8008236:	f04f 30ff 	mov.w	r0, #4294967295
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800823e:	b112      	cbz	r2, 8008246 <_raise_r+0x1e>
 8008240:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008244:	b94b      	cbnz	r3, 800825a <_raise_r+0x32>
 8008246:	4628      	mov	r0, r5
 8008248:	f000 f830 	bl	80082ac <_getpid_r>
 800824c:	4622      	mov	r2, r4
 800824e:	4601      	mov	r1, r0
 8008250:	4628      	mov	r0, r5
 8008252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008256:	f000 b817 	b.w	8008288 <_kill_r>
 800825a:	2b01      	cmp	r3, #1
 800825c:	d00a      	beq.n	8008274 <_raise_r+0x4c>
 800825e:	1c59      	adds	r1, r3, #1
 8008260:	d103      	bne.n	800826a <_raise_r+0x42>
 8008262:	2316      	movs	r3, #22
 8008264:	6003      	str	r3, [r0, #0]
 8008266:	2001      	movs	r0, #1
 8008268:	e7e7      	b.n	800823a <_raise_r+0x12>
 800826a:	2100      	movs	r1, #0
 800826c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008270:	4620      	mov	r0, r4
 8008272:	4798      	blx	r3
 8008274:	2000      	movs	r0, #0
 8008276:	e7e0      	b.n	800823a <_raise_r+0x12>

08008278 <raise>:
 8008278:	4b02      	ldr	r3, [pc, #8]	@ (8008284 <raise+0xc>)
 800827a:	4601      	mov	r1, r0
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	f7ff bfd3 	b.w	8008228 <_raise_r>
 8008282:	bf00      	nop
 8008284:	20000018 	.word	0x20000018

08008288 <_kill_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d07      	ldr	r5, [pc, #28]	@ (80082a8 <_kill_r+0x20>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	4611      	mov	r1, r2
 8008294:	602b      	str	r3, [r5, #0]
 8008296:	f7f9 ffbb 	bl	8002210 <_kill>
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	d102      	bne.n	80082a4 <_kill_r+0x1c>
 800829e:	682b      	ldr	r3, [r5, #0]
 80082a0:	b103      	cbz	r3, 80082a4 <_kill_r+0x1c>
 80082a2:	6023      	str	r3, [r4, #0]
 80082a4:	bd38      	pop	{r3, r4, r5, pc}
 80082a6:	bf00      	nop
 80082a8:	200004a0 	.word	0x200004a0

080082ac <_getpid_r>:
 80082ac:	f7f9 bfa8 	b.w	8002200 <_getpid>

080082b0 <__swhatbuf_r>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	460c      	mov	r4, r1
 80082b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b8:	2900      	cmp	r1, #0
 80082ba:	b096      	sub	sp, #88	@ 0x58
 80082bc:	4615      	mov	r5, r2
 80082be:	461e      	mov	r6, r3
 80082c0:	da0d      	bge.n	80082de <__swhatbuf_r+0x2e>
 80082c2:	89a3      	ldrh	r3, [r4, #12]
 80082c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082c8:	f04f 0100 	mov.w	r1, #0
 80082cc:	bf14      	ite	ne
 80082ce:	2340      	movne	r3, #64	@ 0x40
 80082d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082d4:	2000      	movs	r0, #0
 80082d6:	6031      	str	r1, [r6, #0]
 80082d8:	602b      	str	r3, [r5, #0]
 80082da:	b016      	add	sp, #88	@ 0x58
 80082dc:	bd70      	pop	{r4, r5, r6, pc}
 80082de:	466a      	mov	r2, sp
 80082e0:	f000 f848 	bl	8008374 <_fstat_r>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	dbec      	blt.n	80082c2 <__swhatbuf_r+0x12>
 80082e8:	9901      	ldr	r1, [sp, #4]
 80082ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082f2:	4259      	negs	r1, r3
 80082f4:	4159      	adcs	r1, r3
 80082f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082fa:	e7eb      	b.n	80082d4 <__swhatbuf_r+0x24>

080082fc <__smakebuf_r>:
 80082fc:	898b      	ldrh	r3, [r1, #12]
 80082fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008300:	079d      	lsls	r5, r3, #30
 8008302:	4606      	mov	r6, r0
 8008304:	460c      	mov	r4, r1
 8008306:	d507      	bpl.n	8008318 <__smakebuf_r+0x1c>
 8008308:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	6123      	str	r3, [r4, #16]
 8008310:	2301      	movs	r3, #1
 8008312:	6163      	str	r3, [r4, #20]
 8008314:	b003      	add	sp, #12
 8008316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008318:	ab01      	add	r3, sp, #4
 800831a:	466a      	mov	r2, sp
 800831c:	f7ff ffc8 	bl	80082b0 <__swhatbuf_r>
 8008320:	9f00      	ldr	r7, [sp, #0]
 8008322:	4605      	mov	r5, r0
 8008324:	4639      	mov	r1, r7
 8008326:	4630      	mov	r0, r6
 8008328:	f7fe febe 	bl	80070a8 <_malloc_r>
 800832c:	b948      	cbnz	r0, 8008342 <__smakebuf_r+0x46>
 800832e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008332:	059a      	lsls	r2, r3, #22
 8008334:	d4ee      	bmi.n	8008314 <__smakebuf_r+0x18>
 8008336:	f023 0303 	bic.w	r3, r3, #3
 800833a:	f043 0302 	orr.w	r3, r3, #2
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	e7e2      	b.n	8008308 <__smakebuf_r+0xc>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	6020      	str	r0, [r4, #0]
 8008346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800834a:	81a3      	strh	r3, [r4, #12]
 800834c:	9b01      	ldr	r3, [sp, #4]
 800834e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008352:	b15b      	cbz	r3, 800836c <__smakebuf_r+0x70>
 8008354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008358:	4630      	mov	r0, r6
 800835a:	f000 f81d 	bl	8008398 <_isatty_r>
 800835e:	b128      	cbz	r0, 800836c <__smakebuf_r+0x70>
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	f023 0303 	bic.w	r3, r3, #3
 8008366:	f043 0301 	orr.w	r3, r3, #1
 800836a:	81a3      	strh	r3, [r4, #12]
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	431d      	orrs	r5, r3
 8008370:	81a5      	strh	r5, [r4, #12]
 8008372:	e7cf      	b.n	8008314 <__smakebuf_r+0x18>

08008374 <_fstat_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4d07      	ldr	r5, [pc, #28]	@ (8008394 <_fstat_r+0x20>)
 8008378:	2300      	movs	r3, #0
 800837a:	4604      	mov	r4, r0
 800837c:	4608      	mov	r0, r1
 800837e:	4611      	mov	r1, r2
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	f7f9 ffa5 	bl	80022d0 <_fstat>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	d102      	bne.n	8008390 <_fstat_r+0x1c>
 800838a:	682b      	ldr	r3, [r5, #0]
 800838c:	b103      	cbz	r3, 8008390 <_fstat_r+0x1c>
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	bd38      	pop	{r3, r4, r5, pc}
 8008392:	bf00      	nop
 8008394:	200004a0 	.word	0x200004a0

08008398 <_isatty_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4d06      	ldr	r5, [pc, #24]	@ (80083b4 <_isatty_r+0x1c>)
 800839c:	2300      	movs	r3, #0
 800839e:	4604      	mov	r4, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	602b      	str	r3, [r5, #0]
 80083a4:	f7f9 ffa4 	bl	80022f0 <_isatty>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_isatty_r+0x1a>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_isatty_r+0x1a>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	200004a0 	.word	0x200004a0

080083b8 <_init>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	bf00      	nop
 80083bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083be:	bc08      	pop	{r3}
 80083c0:	469e      	mov	lr, r3
 80083c2:	4770      	bx	lr

080083c4 <_fini>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr
