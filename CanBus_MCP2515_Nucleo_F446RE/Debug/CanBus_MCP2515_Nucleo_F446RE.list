
CanBus_MCP2515_Nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f70  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005134  08005134  00006134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d0  080051d0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080051d0  080051d0  000061d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051d8  080051d8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d8  080051d8  000061d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051dc  080051dc  000061dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080051e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021b4  2000000c  080051ec  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021c0  080051ec  000071c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1ea  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa7  00000000  00000000  00016226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00018cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ac  00000000  00000000  00019978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022cd0  00000000  00000000  0001a324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dec  00000000  00000000  0003cff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4590  00000000  00000000  0004ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123370  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a0  00000000  00000000  001233b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00126654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800511c 	.word	0x0800511c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800511c 	.word	0x0800511c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <CanInit>:
 *  Functions
 *
 *
 */
void CanInit(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
	/* Executed once at startup. */

	int result = CANSPI_Initialize();
 80004fa:	f000 f87f 	bl	80005fc <CANSPI_Initialize>
 80004fe:	6078      	str	r0, [r7, #4]
	if(result < 0){
		// TODO: Handle the error
	}
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <Receive_CAN_Message>:

void Receive_CAN_Message() {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    // Attempt to receive a CAN message
    if (CANSPI_Receive(&rxMessage)) {
 800050c:	4819      	ldr	r0, [pc, #100]	@ (8000574 <Receive_CAN_Message+0x6c>)
 800050e:	f000 f9a1 	bl	8000854 <CANSPI_Receive>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d026      	beq.n	8000566 <Receive_CAN_Message+0x5e>
        // Check for specific CAN message ID
    	switch(rxMessage.frame.id){
 8000518:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <Receive_CAN_Message+0x6c>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	2b33      	cmp	r3, #51	@ 0x33
 800051e:	d002      	beq.n	8000526 <Receive_CAN_Message+0x1e>
 8000520:	2b34      	cmp	r3, #52	@ 0x34
 8000522:	d00d      	beq.n	8000540 <Receive_CAN_Message+0x38>
 8000524:	e019      	b.n	800055a <Receive_CAN_Message+0x52>
    		case 0x33:
    			// Extract data from CAN message
    			a.x = (uint8_t) rxMessage.frame.data0;
 8000526:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <Receive_CAN_Message+0x6c>)
 8000528:	7a5a      	ldrb	r2, [r3, #9]
 800052a:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <Receive_CAN_Message+0x70>)
 800052c:	701a      	strb	r2, [r3, #0]
    			a.y = (uint8_t) rxMessage.frame.data1;
 800052e:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <Receive_CAN_Message+0x6c>)
 8000530:	7a9a      	ldrb	r2, [r3, #10]
 8000532:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <Receive_CAN_Message+0x70>)
 8000534:	705a      	strb	r2, [r3, #1]
    			a.z = (uint8_t) rxMessage.frame.data2;
 8000536:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <Receive_CAN_Message+0x6c>)
 8000538:	7ada      	ldrb	r2, [r3, #11]
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <Receive_CAN_Message+0x70>)
 800053c:	709a      	strb	r2, [r3, #2]
    			break;
 800053e:	e00c      	b.n	800055a <Receive_CAN_Message+0x52>

    		case 0x034:
    			// Extract data from CAN message
    			g.x = (uint8_t) rxMessage.frame.data0;
 8000540:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <Receive_CAN_Message+0x6c>)
 8000542:	7a5a      	ldrb	r2, [r3, #9]
 8000544:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <Receive_CAN_Message+0x74>)
 8000546:	701a      	strb	r2, [r3, #0]
				g.y = (uint8_t) rxMessage.frame.data1;
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <Receive_CAN_Message+0x6c>)
 800054a:	7a9a      	ldrb	r2, [r3, #10]
 800054c:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <Receive_CAN_Message+0x74>)
 800054e:	705a      	strb	r2, [r3, #1]
				g.z = (uint8_t) rxMessage.frame.data2;
 8000550:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <Receive_CAN_Message+0x6c>)
 8000552:	7ada      	ldrb	r2, [r3, #11]
 8000554:	4b09      	ldr	r3, [pc, #36]	@ (800057c <Receive_CAN_Message+0x74>)
 8000556:	709a      	strb	r2, [r3, #2]
    			break;
 8000558:	bf00      	nop
    	}

        // Indicate successful reception by turning on the LED
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2120      	movs	r1, #32
 800055e:	4808      	ldr	r0, [pc, #32]	@ (8000580 <Receive_CAN_Message+0x78>)
 8000560:	f002 fdbe 	bl	80030e0 <HAL_GPIO_WritePin>
    } else {
        // Indicate reception error by turning off the LED
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
    }
}
 8000564:	e004      	b.n	8000570 <Receive_CAN_Message+0x68>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2120      	movs	r1, #32
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <Receive_CAN_Message+0x78>)
 800056c:	f002 fdb8 	bl	80030e0 <HAL_GPIO_WritePin>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000003c 	.word	0x2000003c
 8000578:	20000050 	.word	0x20000050
 800057c:	20000054 	.word	0x20000054
 8000580:	40020000 	.word	0x40020000

08000584 <Transmit_CAN_Message>:

void Transmit_CAN_Message(uint32_t StdId, uint8_t DLC, uint8_t *TxData){
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	460b      	mov	r3, r1
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	72fb      	strb	r3, [r7, #11]
	// Configuring a CAN message with standard ID
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B; // Use dEXTENDED_CAN_MSG_ID_2_0B for 29-bit extended IDs
 8000592:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <Transmit_CAN_Message+0x70>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]

	// Standard 11-bit ID
	txMessage.frame.id = StdId;
 8000598:	4a16      	ldr	r2, [pc, #88]	@ (80005f4 <Transmit_CAN_Message+0x70>)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6053      	str	r3, [r2, #4]

	// Number of bytes sent (maximum 8 bytes)
	uint8_t maxLength = (DLC < 8) ? DLC : 8;
 800059e:	7afb      	ldrb	r3, [r7, #11]
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	bf28      	it	cs
 80005a4:	2308      	movcs	r3, #8
 80005a6:	75bb      	strb	r3, [r7, #22]
	txMessage.frame.dlc = maxLength;
 80005a8:	4a12      	ldr	r2, [pc, #72]	@ (80005f4 <Transmit_CAN_Message+0x70>)
 80005aa:	7dbb      	ldrb	r3, [r7, #22]
 80005ac:	7213      	strb	r3, [r2, #8]

	// Copy data from the TxData array to the fields of txMessage.frame.data:
	// txMessage.frame.data0; txMessage.frame.data1; txMessage.frame.data2; txMessage.frame.data3;
	// txMessage.frame.data4; txMessage.frame.data5; txMessage.frame.data6; txMessage.frame.data7;
	for (uint8_t i = 0; i < 8; i++) {
 80005ae:	2300      	movs	r3, #0
 80005b0:	75fb      	strb	r3, [r7, #23]
 80005b2:	e010      	b.n	80005d6 <Transmit_CAN_Message+0x52>
		// If index i is less than the actual length of the data, copy the data
		// Otherwise, assign 0 as the default value
		((uint8_t*)&txMessage.frame.data0)[i] = (i < maxLength) ? TxData[i] : 0;
 80005b4:	7dfa      	ldrb	r2, [r7, #23]
 80005b6:	7dbb      	ldrb	r3, [r7, #22]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d204      	bcs.n	80005c6 <Transmit_CAN_Message+0x42>
 80005bc:	7dfb      	ldrb	r3, [r7, #23]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	781a      	ldrb	r2, [r3, #0]
 80005c4:	e000      	b.n	80005c8 <Transmit_CAN_Message+0x44>
 80005c6:	2200      	movs	r2, #0
 80005c8:	7dfb      	ldrb	r3, [r7, #23]
 80005ca:	490b      	ldr	r1, [pc, #44]	@ (80005f8 <Transmit_CAN_Message+0x74>)
 80005cc:	440b      	add	r3, r1
 80005ce:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 80005d0:	7dfb      	ldrb	r3, [r7, #23]
 80005d2:	3301      	adds	r3, #1
 80005d4:	75fb      	strb	r3, [r7, #23]
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
 80005d8:	2b07      	cmp	r3, #7
 80005da:	d9eb      	bls.n	80005b4 <Transmit_CAN_Message+0x30>
	}

	// Try to add the message to the CAN bus
	if (CANSPI_Transmit(&txMessage)) {
 80005dc:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <Transmit_CAN_Message+0x70>)
 80005de:	f000 f8c1 	bl	8000764 <CANSPI_Transmit>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d101      	bne.n	80005ec <Transmit_CAN_Message+0x68>
	} else {
		// All transmission buffers are busy and thus no new message can be queued for transmission at that moment

		// Turn off the built-in LED to indicate an error during transmission
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		Error_Handler(); // Handle error if message transmission fails
 80005e8:	f001 f800 	bl	80015ec <Error_Handler>
	}
}
 80005ec:	bf00      	nop
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000028 	.word	0x20000028
 80005f8:	20000031 	.word	0x20000031

080005fc <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000602:	2300      	movs	r3, #0
 8000604:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000606:	2300      	movs	r3, #0
 8000608:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8000612:	2300      	movs	r3, #0
 8000614:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000616:	2300      	movs	r3, #0
 8000618:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 800061a:	2300      	movs	r3, #0
 800061c:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800061e:	2300      	movs	r3, #0
 8000620:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 8000622:	2300      	movs	r3, #0
 8000624:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000626:	2300      	movs	r3, #0
 8000628:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 800062a:	2300      	movs	r3, #0
 800062c:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800062e:	2300      	movs	r3, #0
 8000630:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8000632:	2300      	movs	r3, #0
 8000634:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000636:	2308      	movs	r3, #8
 8000638:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 800063a:	2300      	movs	r3, #0
 800063c:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800063e:	2300      	movs	r3, #0
 8000640:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8000642:	2300      	movs	r3, #0
 8000644:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000646:	2300      	movs	r3, #0
 8000648:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 800064a:	2300      	movs	r3, #0
 800064c:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800064e:	2300      	movs	r3, #0
 8000650:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 8000652:	2300      	movs	r3, #0
 8000654:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000656:	2300      	movs	r3, #0
 8000658:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 800065a:	2300      	movs	r3, #0
 800065c:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800065e:	2300      	movs	r3, #0
 8000660:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 8000662:	2300      	movs	r3, #0
 8000664:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000666:	2300      	movs	r3, #0
 8000668:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 800066a:	2300      	movs	r3, #0
 800066c:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 8000672:	2300      	movs	r3, #0
 8000674:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000676:	2308      	movs	r3, #8
 8000678:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 800067a:	2300      	movs	r3, #0
 800067c:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800067e:	2300      	movs	r3, #0
 8000680:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 8000682:	f000 fa13 	bl	8000aac <MCP2515_Initialize>
 8000686:	4603      	mov	r3, r0
 8000688:	f083 0301 	eor.w	r3, r3, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <CANSPI_Initialize+0x9c>
    return -1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	e060      	b.n	800075a <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8000698:	f000 fa2a 	bl	8000af0 <MCP2515_SetConfigMode>
 800069c:	4603      	mov	r3, r0
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <CANSPI_Initialize+0xb2>
    return -2;
 80006a8:	f06f 0301 	mvn.w	r3, #1
 80006ac:	e055      	b.n	800075a <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	461a      	mov	r2, r3
 80006b2:	2123      	movs	r1, #35	@ 0x23
 80006b4:	2020      	movs	r0, #32
 80006b6:	f000 fac5 	bl	8000c44 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80006ba:	463b      	mov	r3, r7
 80006bc:	461a      	mov	r2, r3
 80006be:	2127      	movs	r1, #39	@ 0x27
 80006c0:	2024      	movs	r0, #36	@ 0x24
 80006c2:	f000 fabf 	bl	8000c44 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	461a      	mov	r2, r3
 80006cc:	2103      	movs	r1, #3
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 fab8 	bl	8000c44 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80006d4:	f107 0318 	add.w	r3, r7, #24
 80006d8:	461a      	mov	r2, r3
 80006da:	2107      	movs	r1, #7
 80006dc:	2004      	movs	r0, #4
 80006de:	f000 fab1 	bl	8000c44 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	461a      	mov	r2, r3
 80006e8:	210b      	movs	r1, #11
 80006ea:	2008      	movs	r0, #8
 80006ec:	f000 faaa 	bl	8000c44 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	461a      	mov	r2, r3
 80006f6:	2113      	movs	r1, #19
 80006f8:	2010      	movs	r0, #16
 80006fa:	f000 faa3 	bl	8000c44 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	461a      	mov	r2, r3
 8000704:	2117      	movs	r1, #23
 8000706:	2014      	movs	r0, #20
 8000708:	f000 fa9c 	bl	8000c44 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	461a      	mov	r2, r3
 8000712:	211b      	movs	r1, #27
 8000714:	2018      	movs	r0, #24
 8000716:	f000 fa95 	bl	8000c44 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800071a:	2104      	movs	r1, #4
 800071c:	2060      	movs	r0, #96	@ 0x60
 800071e:	f000 fa6b 	bl	8000bf8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000722:	2101      	movs	r1, #1
 8000724:	2070      	movs	r0, #112	@ 0x70
 8000726:	f000 fa67 	bl	8000bf8 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800072a:	2100      	movs	r1, #0
 800072c:	202a      	movs	r0, #42	@ 0x2a
 800072e:	f000 fa63 	bl	8000bf8 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000732:	21e5      	movs	r1, #229	@ 0xe5
 8000734:	2029      	movs	r0, #41	@ 0x29
 8000736:	f000 fa5f 	bl	8000bf8 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800073a:	2183      	movs	r1, #131	@ 0x83
 800073c:	2028      	movs	r0, #40	@ 0x28
 800073e:	f000 fa5b 	bl	8000bf8 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000742:	f000 f9f3 	bl	8000b2c <MCP2515_SetNormalMode>
 8000746:	4603      	mov	r3, r0
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <CANSPI_Initialize+0x15c>
    return -3;
 8000752:	f06f 0302 	mvn.w	r3, #2
 8000756:	e000      	b.n	800075a <CANSPI_Initialize+0x15e>

  return 1;
 8000758:	2301      	movs	r3, #1
}
 800075a:	4618      	mov	r0, r3
 800075c:	3720      	adds	r7, #32
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000770:	4b36      	ldr	r3, [pc, #216]	@ (800084c <CANSPI_Transmit+0xe8>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000776:	4b35      	ldr	r3, [pc, #212]	@ (800084c <CANSPI_Transmit+0xe8>)
 8000778:	2200      	movs	r2, #0
 800077a:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 800077c:	4b33      	ldr	r3, [pc, #204]	@ (800084c <CANSPI_Transmit+0xe8>)
 800077e:	2200      	movs	r2, #0
 8000780:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <CANSPI_Transmit+0xe8>)
 8000784:	2200      	movs	r2, #0
 8000786:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000788:	f000 fad0 	bl	8000d2c <MCP2515_ReadStatus>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <CANSPI_Transmit+0xec>)
 8000792:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000794:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <CANSPI_Transmit+0xec>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d115      	bne.n	80007ce <CANSPI_Transmit+0x6a>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6858      	ldr	r0, [r3, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	4a28      	ldr	r2, [pc, #160]	@ (800084c <CANSPI_Transmit+0xe8>)
 80007ac:	4619      	mov	r1, r3
 80007ae:	f000 f928 	bl	8000a02 <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	7a1a      	ldrb	r2, [r3, #8]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3309      	adds	r3, #9
 80007ba:	4924      	ldr	r1, [pc, #144]	@ (800084c <CANSPI_Transmit+0xe8>)
 80007bc:	2040      	movs	r0, #64	@ 0x40
 80007be:	f000 fa6d 	bl	8000c9c <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80007c2:	2081      	movs	r0, #129	@ 0x81
 80007c4:	f000 fa96 	bl	8000cf4 <MCP2515_RequestToSend>

    returnValue = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	73fb      	strb	r3, [r7, #15]
 80007cc:	e038      	b.n	8000840 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <CANSPI_Transmit+0xec>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d115      	bne.n	8000808 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6858      	ldr	r0, [r3, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4a19      	ldr	r2, [pc, #100]	@ (800084c <CANSPI_Transmit+0xe8>)
 80007e6:	4619      	mov	r1, r3
 80007e8:	f000 f90b 	bl	8000a02 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7a1a      	ldrb	r2, [r3, #8]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3309      	adds	r3, #9
 80007f4:	4915      	ldr	r1, [pc, #84]	@ (800084c <CANSPI_Transmit+0xe8>)
 80007f6:	2042      	movs	r0, #66	@ 0x42
 80007f8:	f000 fa50 	bl	8000c9c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80007fc:	2082      	movs	r0, #130	@ 0x82
 80007fe:	f000 fa79 	bl	8000cf4 <MCP2515_RequestToSend>

    returnValue = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	73fb      	strb	r3, [r7, #15]
 8000806:	e01b      	b.n	8000840 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <CANSPI_Transmit+0xec>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d114      	bne.n	8000840 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6858      	ldr	r0, [r3, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4a0b      	ldr	r2, [pc, #44]	@ (800084c <CANSPI_Transmit+0xe8>)
 8000820:	4619      	mov	r1, r3
 8000822:	f000 f8ee 	bl	8000a02 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7a1a      	ldrb	r2, [r3, #8]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3309      	adds	r3, #9
 800082e:	4907      	ldr	r1, [pc, #28]	@ (800084c <CANSPI_Transmit+0xe8>)
 8000830:	2044      	movs	r0, #68	@ 0x44
 8000832:	f000 fa33 	bl	8000c9c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000836:	2084      	movs	r0, #132	@ 0x84
 8000838:	f000 fa5c 	bl	8000cf4 <MCP2515_RequestToSend>

    returnValue = 1;
 800083c:	2301      	movs	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000840:	7bfb      	ldrb	r3, [r7, #15]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000005c 	.word	0x2000005c
 8000850:	20000058 	.word	0x20000058

08000854 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000860:	f000 fa82 	bl	8000d68 <MCP2515_GetRxStatus>
 8000864:	4603      	mov	r3, r0
 8000866:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8000868:	7b3b      	ldrb	r3, [r7, #12]
 800086a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d066      	beq.n	8000942 <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000874:	7b3b      	ldrb	r3, [r7, #12]
 8000876:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b40      	cmp	r3, #64	@ 0x40
 800087e:	bf0c      	ite	eq
 8000880:	2301      	moveq	r3, #1
 8000882:	2300      	movne	r3, #0
 8000884:	b2da      	uxtb	r2, r3
 8000886:	7b3b      	ldrb	r3, [r7, #12]
 8000888:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2bc0      	cmp	r3, #192	@ 0xc0
 8000890:	bf0c      	ite	eq
 8000892:	2301      	moveq	r3, #1
 8000894:	2300      	movne	r3, #0
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4313      	orrs	r3, r2
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d007      	beq.n	80008b0 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	220d      	movs	r2, #13
 80008a6:	4619      	mov	r1, r3
 80008a8:	2090      	movs	r0, #144	@ 0x90
 80008aa:	f000 f981 	bl	8000bb0 <MCP2515_ReadRxSequence>
 80008ae:	e00c      	b.n	80008ca <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80008b0:	7b3b      	ldrb	r3, [r7, #12]
 80008b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b80      	cmp	r3, #128	@ 0x80
 80008ba:	d106      	bne.n	80008ca <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	220d      	movs	r2, #13
 80008c2:	4619      	mov	r1, r3
 80008c4:	2094      	movs	r0, #148	@ 0x94
 80008c6:	f000 f973 	bl	8000bb0 <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80008ca:	7b3b      	ldrb	r3, [r7, #12]
 80008cc:	f003 0318 	and.w	r3, r3, #24
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b10      	cmp	r3, #16
 80008d4:	d10c      	bne.n	80008f0 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2202      	movs	r2, #2
 80008da:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80008dc:	7cb8      	ldrb	r0, [r7, #18]
 80008de:	7cf9      	ldrb	r1, [r7, #19]
 80008e0:	7c3a      	ldrb	r2, [r7, #16]
 80008e2:	7c7b      	ldrb	r3, [r7, #17]
 80008e4:	f000 f832 	bl	800094c <convertReg2ExtendedCANid>
 80008e8:	4602      	mov	r2, r0
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	e00b      	b.n	8000908 <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80008f6:	7c3b      	ldrb	r3, [r7, #16]
 80008f8:	7c7a      	ldrb	r2, [r7, #17]
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f863 	bl	80009c8 <convertReg2StandardCANid>
 8000902:	4602      	mov	r2, r0
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000908:	7d3a      	ldrb	r2, [r7, #20]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800090e:	7d7a      	ldrb	r2, [r7, #21]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000914:	7dba      	ldrb	r2, [r7, #22]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800091a:	7dfa      	ldrb	r2, [r7, #23]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000920:	7e3a      	ldrb	r2, [r7, #24]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000926:	7e7a      	ldrb	r2, [r7, #25]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800092c:	7eba      	ldrb	r2, [r7, #26]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000932:	7efa      	ldrb	r2, [r7, #27]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000938:	7f3a      	ldrb	r2, [r7, #28]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 800093e:	2301      	movs	r3, #1
 8000940:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 8000942:	7ffb      	ldrb	r3, [r7, #31]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 800094c:	b490      	push	{r4, r7}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	4604      	mov	r4, r0
 8000954:	4608      	mov	r0, r1
 8000956:	4611      	mov	r1, r2
 8000958:	461a      	mov	r2, r3
 800095a:	4623      	mov	r3, r4
 800095c:	71fb      	strb	r3, [r7, #7]
 800095e:	4603      	mov	r3, r0
 8000960:	71bb      	strb	r3, [r7, #6]
 8000962:	460b      	mov	r3, r1
 8000964:	717b      	strb	r3, [r7, #5]
 8000966:	4613      	mov	r3, r2
 8000968:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000972:	793b      	ldrb	r3, [r7, #4]
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800097a:	793b      	ldrb	r3, [r7, #4]
 800097c:	095b      	lsrs	r3, r3, #5
 800097e:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000980:	797b      	ldrb	r3, [r7, #5]
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	4413      	add	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4413      	add	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4413      	add	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	021b      	lsls	r3, r3, #8
 80009ae:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4413      	add	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80009bc:	697b      	ldr	r3, [r7, #20]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc90      	pop	{r4, r7}
 80009c6:	4770      	bx	lr

080009c8 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	71fb      	strb	r3, [r7, #7]
 80009d4:	4613      	mov	r3, r2
 80009d6:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	095b      	lsrs	r3, r3, #5
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	461a      	mov	r2, r3
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	4413      	add	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 80009f4:	68fb      	ldr	r3, [r7, #12]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b087      	sub	sp, #28
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000a14:	7afb      	ldrb	r3, [r7, #11]
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d12e      	bne.n	8000a78 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	0a1b      	lsrs	r3, r3, #8
 8000a34:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f023 031f 	bic.w	r3, r3, #31
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
 8000a52:	4413      	add	r3, r2
 8000a54:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
 8000a58:	3308      	adds	r3, #8
 8000a5a:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000a5c:	7dfb      	ldrb	r3, [r7, #23]
 8000a5e:	f023 0314 	bic.w	r3, r3, #20
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000a76:	e013      	b.n	8000aa0 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	015b      	lsls	r3, r3, #5
 8000a88:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	701a      	strb	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	371c      	adds	r7, #28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ab8:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <MCP2515_Initialize+0x3c>)
 8000aba:	f002 fb11 	bl	80030e0 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8000abe:	230a      	movs	r3, #10
 8000ac0:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8000ac2:	480a      	ldr	r0, [pc, #40]	@ (8000aec <MCP2515_Initialize+0x40>)
 8000ac4:	f003 fda2 	bl	800460c <HAL_SPI_GetState>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d101      	bne.n	8000ad2 <MCP2515_Initialize+0x26>
      return true;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e006      	b.n	8000ae0 <MCP2515_Initialize+0x34>

    loop--;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f1      	bne.n	8000ac2 <MCP2515_Initialize+0x16>

  return false;
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	2000211c 	.word	0x2000211c

08000af0 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8000af6:	2180      	movs	r1, #128	@ 0x80
 8000af8:	200f      	movs	r0, #15
 8000afa:	f000 f87d 	bl	8000bf8 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000afe:	230a      	movs	r3, #10
 8000b00:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000b02:	200e      	movs	r0, #14
 8000b04:	f000 f830 	bl	8000b68 <MCP2515_ReadByte>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000b0e:	2b80      	cmp	r3, #128	@ 0x80
 8000b10:	d101      	bne.n	8000b16 <MCP2515_SetConfigMode+0x26>
      return true;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e006      	b.n	8000b24 <MCP2515_SetConfigMode+0x34>

    loop--;
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1ef      	bne.n	8000b02 <MCP2515_SetConfigMode+0x12>

  return false;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000b32:	2100      	movs	r1, #0
 8000b34:	200f      	movs	r0, #15
 8000b36:	f000 f85f 	bl	8000bf8 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000b3a:	230a      	movs	r3, #10
 8000b3c:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000b3e:	200e      	movs	r0, #14
 8000b40:	f000 f812 	bl	8000b68 <MCP2515_ReadByte>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <MCP2515_SetNormalMode+0x26>
      return true;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e006      	b.n	8000b60 <MCP2515_SetNormalMode+0x34>

    loop--;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1ef      	bne.n	8000b3e <MCP2515_SetNormalMode+0x12>

  return false;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <MCP2515_ReadByte+0x44>)
 8000b7a:	f002 fab1 	bl	80030e0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8000b7e:	2003      	movs	r0, #3
 8000b80:	f000 f910 	bl	8000da4 <SPI_Tx>
  SPI_Tx(address);
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f90c 	bl	8000da4 <SPI_Tx>
  retVal = SPI_Rx();
 8000b8c:	f000 f930 	bl	8000df0 <SPI_Rx>
 8000b90:	4603      	mov	r3, r0
 8000b92:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b9a:	4804      	ldr	r0, [pc, #16]	@ (8000bac <MCP2515_ReadByte+0x44>)
 8000b9c:	f002 faa0 	bl	80030e0 <HAL_GPIO_WritePin>

  return retVal;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40020000 	.word	0x40020000

08000bb0 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bc6:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <MCP2515_ReadRxSequence+0x44>)
 8000bc8:	f002 fa8a 	bl	80030e0 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f8e8 	bl	8000da4 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6838      	ldr	r0, [r7, #0]
 8000bda:	f000 f919 	bl	8000e10 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be4:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <MCP2515_ReadRxSequence+0x44>)
 8000be6:	f002 fa7b 	bl	80030e0 <HAL_GPIO_WritePin>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	460a      	mov	r2, r1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	4613      	mov	r3, r2
 8000c06:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c0e:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <MCP2515_WriteByte+0x48>)
 8000c10:	f002 fa66 	bl	80030e0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000c14:	2002      	movs	r0, #2
 8000c16:	f000 f8c5 	bl	8000da4 <SPI_Tx>
  SPI_Tx(address);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f8c1 	bl	8000da4 <SPI_Tx>
  SPI_Tx(data);
 8000c22:	79bb      	ldrb	r3, [r7, #6]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f8bd 	bl	8000da4 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c30:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <MCP2515_WriteByte+0x48>)
 8000c32:	f002 fa55 	bl	80030e0 <HAL_GPIO_WritePin>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40020000 	.word	0x40020000

08000c44 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	603a      	str	r2, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	460b      	mov	r3, r1
 8000c52:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c5a:	480f      	ldr	r0, [pc, #60]	@ (8000c98 <MCP2515_WriteByteSequence+0x54>)
 8000c5c:	f002 fa40 	bl	80030e0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000c60:	2002      	movs	r0, #2
 8000c62:	f000 f89f 	bl	8000da4 <SPI_Tx>
  SPI_Tx(startAddress);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f89b 	bl	8000da4 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000c6e:	79ba      	ldrb	r2, [r7, #6]
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	3301      	adds	r3, #1
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	6838      	ldr	r0, [r7, #0]
 8000c7e:	f000 f8a3 	bl	8000dc8 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c88:	4803      	ldr	r0, [pc, #12]	@ (8000c98 <MCP2515_WriteByteSequence+0x54>)
 8000c8a:	f002 fa29 	bl	80030e0 <HAL_GPIO_WritePin>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40020000 	.word	0x40020000

08000c9c <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	4613      	mov	r3, r2
 8000cac:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cb4:	480e      	ldr	r0, [pc, #56]	@ (8000cf0 <MCP2515_LoadTxSequence+0x54>)
 8000cb6:	f002 fa13 	bl	80030e0 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f871 	bl	8000da4 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	68b8      	ldr	r0, [r7, #8]
 8000cc6:	f000 f87f 	bl	8000dc8 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f869 	bl	8000da4 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000cd2:	7bbb      	ldrb	r3, [r7, #14]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f876 	bl	8000dc8 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ce2:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <MCP2515_LoadTxSequence+0x54>)
 8000ce4:	f002 f9fc 	bl	80030e0 <HAL_GPIO_WritePin>
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d04:	4808      	ldr	r0, [pc, #32]	@ (8000d28 <MCP2515_RequestToSend+0x34>)
 8000d06:	f002 f9eb 	bl	80030e0 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f849 	bl	8000da4 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000d12:	2201      	movs	r2, #1
 8000d14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d18:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <MCP2515_RequestToSend+0x34>)
 8000d1a:	f002 f9e1 	bl	80030e0 <HAL_GPIO_WritePin>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40020000 	.word	0x40020000

08000d2c <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d38:	480a      	ldr	r0, [pc, #40]	@ (8000d64 <MCP2515_ReadStatus+0x38>)
 8000d3a:	f002 f9d1 	bl	80030e0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8000d3e:	20a0      	movs	r0, #160	@ 0xa0
 8000d40:	f000 f830 	bl	8000da4 <SPI_Tx>
  retVal = SPI_Rx();
 8000d44:	f000 f854 	bl	8000df0 <SPI_Rx>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d52:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <MCP2515_ReadStatus+0x38>)
 8000d54:	f002 f9c4 	bl	80030e0 <HAL_GPIO_WritePin>

  return retVal;
 8000d58:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40020000 	.word	0x40020000

08000d68 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d74:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <MCP2515_GetRxStatus+0x38>)
 8000d76:	f002 f9b3 	bl	80030e0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8000d7a:	20b0      	movs	r0, #176	@ 0xb0
 8000d7c:	f000 f812 	bl	8000da4 <SPI_Tx>
  retVal = SPI_Rx();
 8000d80:	f000 f836 	bl	8000df0 <SPI_Rx>
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d8e:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <MCP2515_GetRxStatus+0x38>)
 8000d90:	f002 f9a6 	bl	80030e0 <HAL_GPIO_WritePin>

  return retVal;
 8000d94:	79fb      	ldrb	r3, [r7, #7]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40020000 	.word	0x40020000

08000da4 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000dae:	1df9      	adds	r1, r7, #7
 8000db0:	230a      	movs	r3, #10
 8000db2:	2201      	movs	r2, #1
 8000db4:	4803      	ldr	r0, [pc, #12]	@ (8000dc4 <SPI_Tx+0x20>)
 8000db6:	f003 f81e 	bl	8003df6 <HAL_SPI_Transmit>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000211c 	.word	0x2000211c

08000dc8 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	230a      	movs	r3, #10
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	4803      	ldr	r0, [pc, #12]	@ (8000dec <SPI_TxBuffer+0x24>)
 8000dde:	f003 f80a 	bl	8003df6 <HAL_SPI_Transmit>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000211c 	.word	0x2000211c

08000df0 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000df6:	1df9      	adds	r1, r7, #7
 8000df8:	230a      	movs	r3, #10
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <SPI_Rx+0x1c>)
 8000dfe:	f003 f93d 	bl	800407c <HAL_SPI_Receive>
  return retVal;
 8000e02:	79fb      	ldrb	r3, [r7, #7]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000211c 	.word	0x2000211c

08000e10 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	230a      	movs	r3, #10
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	4803      	ldr	r0, [pc, #12]	@ (8000e34 <SPI_RxBuffer+0x24>)
 8000e26:	f003 f929 	bl	800407c <HAL_SPI_Receive>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000211c 	.word	0x2000211c

08000e38 <SchTimerInterruptCallback>:
 *
 *
 */

void SchTimerInterruptCallback(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	tickCounter++;
 8000e3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <SchTimerInterruptCallback+0x8c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a20      	ldr	r2, [pc, #128]	@ (8000ec4 <SchTimerInterruptCallback+0x8c>)
 8000e44:	6013      	str	r3, [r2, #0]

	// Perform quick tasks every 1 ms
	if (tickCounter % 1 == 0) {
		fastTaskFlag = 1;
 8000e46:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <SchTimerInterruptCallback+0x90>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
	}

	// Perform medium tasks every 10 ms
	if (tickCounter % 10 == 0) {
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <SchTimerInterruptCallback+0x8c>)
 8000e4e:	6819      	ldr	r1, [r3, #0]
 8000e50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <SchTimerInterruptCallback+0x94>)
 8000e52:	fba3 2301 	umull	r2, r3, r3, r1
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	1aca      	subs	r2, r1, r3
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d102      	bne.n	8000e6c <SchTimerInterruptCallback+0x34>
		mediumTaskFlag = 1;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <SchTimerInterruptCallback+0x98>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
	}

	// Perform the task every 20 ms
	if (tickCounter % 20 == 0) {
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <SchTimerInterruptCallback+0x8c>)
 8000e6e:	6819      	ldr	r1, [r3, #0]
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <SchTimerInterruptCallback+0x94>)
 8000e72:	fba3 2301 	umull	r2, r3, r3, r1
 8000e76:	091a      	lsrs	r2, r3, #4
 8000e78:	4613      	mov	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	1aca      	subs	r2, r1, r3
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d102      	bne.n	8000e8c <SchTimerInterruptCallback+0x54>
		conversionFlag = 1;
 8000e86:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <SchTimerInterruptCallback+0x9c>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
	}

	// Perform slow tasks every 100 ms
	if (tickCounter % 100 == 0) {
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <SchTimerInterruptCallback+0x8c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <SchTimerInterruptCallback+0xa0>)
 8000e92:	fba3 1302 	umull	r1, r3, r3, r2
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2164      	movs	r1, #100	@ 0x64
 8000e9a:	fb01 f303 	mul.w	r3, r1, r3
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <SchTimerInterruptCallback+0x72>
		slowTaskFlag = 1;
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <SchTimerInterruptCallback+0xa4>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
	}

	// Reset the counter to prevent overflow
	if (tickCounter >= 1000) {
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <SchTimerInterruptCallback+0x8c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000eb2:	d302      	bcc.n	8000eba <SchTimerInterruptCallback+0x82>
		tickCounter = 0;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	@ (8000ec4 <SchTimerInterruptCallback+0x8c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
	}
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	20000060 	.word	0x20000060
 8000ec8:	20000064 	.word	0x20000064
 8000ecc:	cccccccd 	.word	0xcccccccd
 8000ed0:	20000065 	.word	0x20000065
 8000ed4:	20000066 	.word	0x20000066
 8000ed8:	51eb851f 	.word	0x51eb851f
 8000edc:	20000067 	.word	0x20000067

08000ee0 <SchedulerInitFct>:
 *
 *
 */

void SchedulerInitFct(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	// Initialize SysTick to generate an interrupt every 1 ms.
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 360); // Formula for the divider: 72 MHz (of HCLK) / 2 (of APB1 Prescaler) / 1 (of APB2 Prescaler) * 10
 8000ee4:	f002 f9fc 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <SchedulerInitFct+0x3c>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fbe2 	bl	80026be <HAL_SYSTICK_Config>

	// Initialize other variables and flags if necessary
	tickCounter = 0;
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <SchedulerInitFct+0x40>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
	fastTaskFlag = 0;
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <SchedulerInitFct+0x44>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
	mediumTaskFlag = 0;
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <SchedulerInitFct+0x48>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
	conversionFlag = 0;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <SchedulerInitFct+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
	slowTaskFlag = 0;
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <SchedulerInitFct+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	16c16c17 	.word	0x16c16c17
 8000f20:	20000060 	.word	0x20000060
 8000f24:	20000064 	.word	0x20000064
 8000f28:	20000065 	.word	0x20000065
 8000f2c:	20000066 	.word	0x20000066
 8000f30:	20000067 	.word	0x20000067

08000f34 <SchedulerMgmFct>:
 *
 *
 */

void SchedulerMgmFct(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	// Perform quick tasks if the flag is set
	if (fastTaskFlag) {
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <SchedulerMgmFct+0x50>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d004      	beq.n	8000f4a <SchedulerMgmFct+0x16>
		fastTaskFlag = 0;
 8000f40:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <SchedulerMgmFct+0x50>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
		TaskFast(); // Perform all quick tests
 8000f46:	f000 f837 	bl	8000fb8 <TaskFast>
	}

	// Perform medium tasks if the flag is set
	if (mediumTaskFlag) {
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <SchedulerMgmFct+0x54>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d004      	beq.n	8000f5c <SchedulerMgmFct+0x28>
		mediumTaskFlag = 0;
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <SchedulerMgmFct+0x54>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
		TaskMed(); // Perform all medium-speed tasks
 8000f58:	f000 f834 	bl	8000fc4 <TaskMed>
	}

	// Perform average sensors reading conversion before sending to Can
	if (conversionFlag){
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <SchedulerMgmFct+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <SchedulerMgmFct+0x3a>
		conversionFlag = 0;
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <SchedulerMgmFct+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
		TaskConv(); // Perform the conversion of the average sensors reading
 8000f6a:	f000 f833 	bl	8000fd4 <TaskConv>
	}

	// Perform slow tasks if the flag is set
	if (slowTaskFlag) {
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <SchedulerMgmFct+0x5c>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d004      	beq.n	8000f80 <SchedulerMgmFct+0x4c>
		slowTaskFlag = 0;
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <SchedulerMgmFct+0x5c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
		TaskSlow();  // Perform all slow tasks
 8000f7c:	f000 f830 	bl	8000fe0 <TaskSlow>
	}

	// Other error handling tasks
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000064 	.word	0x20000064
 8000f88:	20000065 	.word	0x20000065
 8000f8c:	20000066 	.word	0x20000066
 8000f90:	20000067 	.word	0x20000067

08000f94 <TaskInit>:
 *  General Tasks
 *
 *
 */
void TaskInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	/* Executed once at startup. */
	/* TODO Functions for HW/SW initialization. */

	SchedulerInitFct();
 8000f98:	f7ff ffa2 	bl	8000ee0 <SchedulerInitFct>

	#ifndef DEBUG_MODE
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8000f9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fa0:	4903      	ldr	r1, [pc, #12]	@ (8000fb0 <TaskInit+0x1c>)
 8000fa2:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <TaskInit+0x20>)
 8000fa4:	f000 fea8 	bl	8001cf8 <HAL_ADC_Start_DMA>
	#endif

	CanInit();
 8000fa8:	f7ff faa4 	bl	80004f4 <CanInit>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000068 	.word	0x20000068
 8000fb4:	20002074 	.word	0x20002074

08000fb8 <TaskFast>:

void TaskFast(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (fast schedulation, e.g. 1 ms). */

	#ifndef DEBUG_MODE
		Task1_AcquireSensorValues();
 8000fbc:	f000 f818 	bl	8000ff0 <Task1_AcquireSensorValues>
	#endif
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <TaskMed>:

void TaskMed(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (medium schedulation, e.g. 10 ms). */

	#ifndef DEBUG_MODE
		Task1_AverageSensorValues();
 8000fc8:	f000 f876 	bl	80010b8 <Task1_AverageSensorValues>

		Task3_ReadCANMessages();
 8000fcc:	f000 f92a 	bl	8001224 <Task3_ReadCANMessages>
	#endif
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <TaskConv>:

void TaskConv(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (medium schedulation, e.g. 20 ms). */

	#ifndef DEBUG_MODE
		Task2_ConvertAndSendSensorData_Task4_ErrorHandling();
 8000fd8:	f000 f89e 	bl	8001118 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling>
	#endif
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <TaskSlow>:

void TaskSlow(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (medium schedulation, e.g. 100 ms). */

	#ifdef DEBUG_MODE
		Debug_CAN_Messages();
	#endif
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <Task1_AcquireSensorValues>:
 *
 * Suggestions:
 * Use DMA and interrupts to handle reading and averaging.
 *-----------------------------------------------------------------------------*/
void Task1_AcquireSensorValues(void)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	75fb      	strb	r3, [r7, #23]
 8000ffa:	e046      	b.n	800108a <Task1_AcquireSensorValues+0x9a>
		raw_readings[i] = (uint16_t) adc_buf[i];
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	4619      	mov	r1, r3
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	461a      	mov	r2, r3
 8001004:	4b26      	ldr	r3, [pc, #152]	@ (80010a0 <Task1_AcquireSensorValues+0xb0>)
 8001006:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <Task1_AcquireSensorValues+0xb4>)
 800100c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		sum_readings[i] += raw_readings[i];
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	461a      	mov	r2, r3
 8001014:	4b24      	ldr	r3, [pc, #144]	@ (80010a8 <Task1_AcquireSensorValues+0xb8>)
 8001016:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	4619      	mov	r1, r3
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <Task1_AcquireSensorValues+0xb4>)
 8001020:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001024:	7df9      	ldrb	r1, [r7, #23]
 8001026:	4413      	add	r3, r2
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <Task1_AcquireSensorValues+0xb8>)
 800102c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]

		// Display
		char msg[] = ") Potentiometer: ";
 8001030:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <Task1_AcquireSensorValues+0xbc>)
 8001032:	1d3c      	adds	r4, r7, #4
 8001034:	461d      	mov	r5, r3
 8001036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103a:	682b      	ldr	r3, [r5, #0]
 800103c:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) &i, 1, HAL_MAX_DELAY);
 800103e:	f107 0117 	add.w	r1, r7, #23
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	2201      	movs	r2, #1
 8001048:	4819      	ldr	r0, [pc, #100]	@ (80010b0 <Task1_AcquireSensorValues+0xc0>)
 800104a:	f003 fc7f 	bl	800494c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800104e:	1d39      	adds	r1, r7, #4
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	2211      	movs	r2, #17
 8001056:	4816      	ldr	r0, [pc, #88]	@ (80010b0 <Task1_AcquireSensorValues+0xc0>)
 8001058:	f003 fc78 	bl	800494c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) &raw_readings[i], 1, HAL_MAX_DELAY);
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4a10      	ldr	r2, [pc, #64]	@ (80010a4 <Task1_AcquireSensorValues+0xb4>)
 8001062:	1899      	adds	r1, r3, r2
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	2201      	movs	r2, #1
 800106a:	4811      	ldr	r0, [pc, #68]	@ (80010b0 <Task1_AcquireSensorValues+0xc0>)
 800106c:	f003 fc6e 	bl	800494c <HAL_UART_Transmit>

		uint8_t lf = '\n';
 8001070:	230a      	movs	r3, #10
 8001072:	70fb      	strb	r3, [r7, #3]
		HAL_UART_Transmit(&huart2, &lf, 1, HAL_MAX_DELAY);
 8001074:	1cf9      	adds	r1, r7, #3
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	2201      	movs	r2, #1
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <Task1_AcquireSensorValues+0xc0>)
 800107e:	f003 fc65 	bl	800494c <HAL_UART_Transmit>
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	3301      	adds	r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	75fb      	strb	r3, [r7, #23]
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	461a      	mov	r2, r3
 800108e:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <Task1_AcquireSensorValues+0xc4>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	429a      	cmp	r2, r3
 8001094:	d3b2      	bcc.n	8000ffc <Task1_AcquireSensorValues+0xc>
	}
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bdb0      	pop	{r4, r5, r7, pc}
 80010a0:	20000068 	.word	0x20000068
 80010a4:	20002068 	.word	0x20002068
 80010a8:	2000206c 	.word	0x2000206c
 80010ac:	08005134 	.word	0x08005134
 80010b0:	20002174 	.word	0x20002174
 80010b4:	20002074 	.word	0x20002074

080010b8 <Task1_AverageSensorValues>:

void Task1_AverageSensorValues(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	e014      	b.n	80010ee <Task1_AverageSensorValues+0x36>
		avg_readings[i] = sum_readings[i] / 10;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4a10      	ldr	r2, [pc, #64]	@ (8001108 <Task1_AverageSensorValues+0x50>)
 80010c8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	490f      	ldr	r1, [pc, #60]	@ (800110c <Task1_AverageSensorValues+0x54>)
 80010d0:	fba1 1202 	umull	r1, r2, r1, r2
 80010d4:	08d2      	lsrs	r2, r2, #3
 80010d6:	b291      	uxth	r1, r2
 80010d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <Task1_AverageSensorValues+0x58>)
 80010da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sum_readings[i] = 0;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <Task1_AverageSensorValues+0x50>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	3301      	adds	r3, #1
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <Task1_AverageSensorValues+0x5c>)
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d3e5      	bcc.n	80010c4 <Task1_AverageSensorValues+0xc>
	}
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000206c 	.word	0x2000206c
 800110c:	cccccccd 	.word	0xcccccccd
 8001110:	20002070 	.word	0x20002070
 8001114:	20002074 	.word	0x20002074

08001118 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling>:
 * - When the value returns to normal, it will be possible to reactivate the board functions
 *   by sending a message on CAN1 to address 0x006 with content
 *   of a single byte containing the letter 'R' encoded as "char".
 *---------------------------------------------------------------------------- */
void Task2_ConvertAndSendSensorData_Task4_ErrorHandling(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
	uint8_t resetFlag = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]

	uint8_t TxData[5];
	for(uint8_t i = 0; i < 5; i++){
 8001122:	2300      	movs	r3, #0
 8001124:	73bb      	strb	r3, [r7, #14]
 8001126:	e008      	b.n	800113a <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0x22>
		TxData[i] = 0;
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	3310      	adds	r3, #16
 800112c:	443b      	add	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i = 0; i < 5; i++){
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	3301      	adds	r3, #1
 8001138:	73bb      	strb	r3, [r7, #14]
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d9f3      	bls.n	8001128 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0x10>
	}

	int8_t conv_readings[NBR_SENSORS];
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	737b      	strb	r3, [r7, #13]
 8001144:	e04c      	b.n	80011e0 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xc8>
		// Convert the sensor reading to a percentage scale (0% - 100%).
		// The sensor's voltage range is from 0.3V (reading of 373) to 3V (reading of 3724).
		// The maximum possible sensor reading is 4096, corresponding to 110% in this formula.
		// The conversion formula scales the average reading proportionally.
		conv_readings[i] = (int8_t)(((avg_readings[i]-373) * 100) / (3723 - 373));
 8001146:	7b7b      	ldrb	r3, [r7, #13]
 8001148:	4a33      	ldr	r2, [pc, #204]	@ (8001218 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0x100>)
 800114a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800114e:	f2a3 1375 	subw	r3, r3, #373	@ 0x175
 8001152:	2264      	movs	r2, #100	@ 0x64
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	4a30      	ldr	r2, [pc, #192]	@ (800121c <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0x104>)
 800115a:	fb82 1203 	smull	r1, r2, r2, r3
 800115e:	1292      	asrs	r2, r2, #10
 8001160:	17db      	asrs	r3, r3, #31
 8001162:	1ad2      	subs	r2, r2, r3
 8001164:	7b7b      	ldrb	r3, [r7, #13]
 8001166:	b252      	sxtb	r2, r2
 8001168:	3310      	adds	r3, #16
 800116a:	443b      	add	r3, r7
 800116c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		/*char msg[50];
		sprintf(msg, "\n\n%hu) Converted Values: %d \r\n", i, conv_readings[i]);
		HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg),
		HAL_MAX_DELAY);*/

		if (conv_readings[i] >= 0 && conv_readings[i] <= 100){ // OK
 8001170:	7b7b      	ldrb	r3, [r7, #13]
 8001172:	3310      	adds	r3, #16
 8001174:	443b      	add	r3, r7
 8001176:	f913 3c0c 	ldrsb.w	r3, [r3, #-12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db1f      	blt.n	80011be <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xa6>
 800117e:	7b7b      	ldrb	r3, [r7, #13]
 8001180:	3310      	adds	r3, #16
 8001182:	443b      	add	r3, r7
 8001184:	f913 3c0c 	ldrsb.w	r3, [r3, #-12]
 8001188:	2b64      	cmp	r3, #100	@ 0x64
 800118a:	dc18      	bgt.n	80011be <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xa6>

			//Re-establish the connection
			if(resetFlag){
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d009      	beq.n	80011a6 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0x8e>
				resetFlag = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]

				// Assign the connection re-establishment message to the CAN transmit data
				uint8_t ReestablishTxData = (uint8_t)'R';
 8001196:	2352      	movs	r3, #82	@ 0x52
 8001198:	70fb      	strb	r3, [r7, #3]
				Transmit_CAN_Message(0x06, 1, &ReestablishTxData); // Add CAN message to transmit queue
 800119a:	1cfb      	adds	r3, r7, #3
 800119c:	461a      	mov	r2, r3
 800119e:	2101      	movs	r1, #1
 80011a0:	2006      	movs	r0, #6
 80011a2:	f7ff f9ef 	bl	8000584 <Transmit_CAN_Message>
			}

			// Assign the converted reading to the CAN transmit data
			TxData[i] = (uint8_t) conv_readings[i];
 80011a6:	7b7b      	ldrb	r3, [r7, #13]
 80011a8:	3310      	adds	r3, #16
 80011aa:	443b      	add	r3, r7
 80011ac:	f913 2c0c 	ldrsb.w	r2, [r3, #-12]
 80011b0:	7b7b      	ldrb	r3, [r7, #13]
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	3310      	adds	r3, #16
 80011b6:	443b      	add	r3, r7
 80011b8:	f803 2c08 	strb.w	r2, [r3, #-8]
 80011bc:	e00d      	b.n	80011da <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xc2>
		}else{ // ERROR
			resetFlag = 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]

			// Assign the error message to the CAN transmit data
			uint8_t ErrorTxData[2] = {(uint8_t) 'E', i + 1};
 80011c2:	2345      	movs	r3, #69	@ 0x45
 80011c4:	703b      	strb	r3, [r7, #0]
 80011c6:	7b7b      	ldrb	r3, [r7, #13]
 80011c8:	3301      	adds	r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	707b      	strb	r3, [r7, #1]
			Transmit_CAN_Message(0x05, 2, ErrorTxData); // Add CAN message to transmit queue
 80011ce:	463b      	mov	r3, r7
 80011d0:	461a      	mov	r2, r3
 80011d2:	2102      	movs	r1, #2
 80011d4:	2005      	movs	r0, #5
 80011d6:	f7ff f9d5 	bl	8000584 <Transmit_CAN_Message>
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 80011da:	7b7b      	ldrb	r3, [r7, #13]
 80011dc:	3301      	adds	r3, #1
 80011de:	737b      	strb	r3, [r7, #13]
 80011e0:	7b7a      	ldrb	r2, [r7, #13]
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0x108>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d3ad      	bcc.n	8001146 <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0x2e>
			// TODO: enable this code if can2 is enabled:
			//Transmit_CAN_Message(&hcan2, 0x005, 2, &TxData);
		}
	}

	if (!resetFlag){
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10e      	bne.n	800120e <Task2_ConvertAndSendSensorData_Task4_ErrorHandling+0xf6>
		// Send sensor data via CAN
		Transmit_CAN_Message(0x35, 4, TxData);
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	461a      	mov	r2, r3
 80011f6:	2104      	movs	r1, #4
 80011f8:	2035      	movs	r0, #53	@ 0x35
 80011fa:	f7ff f9c3 	bl	8000584 <Transmit_CAN_Message>
		Transmit_CAN_Message(0x36, 1, &TxData[4]);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	3304      	adds	r3, #4
 8001204:	461a      	mov	r2, r3
 8001206:	2101      	movs	r1, #1
 8001208:	2036      	movs	r0, #54	@ 0x36
 800120a:	f7ff f9bb 	bl	8000584 <Transmit_CAN_Message>
	}
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20002070 	.word	0x20002070
 800121c:	4e407f29 	.word	0x4e407f29
 8001220:	20002074 	.word	0x20002074

08001224 <Task3_ReadCANMessages>:
 * - 0x034 -> [gx, gy, gz]
 * Read these messages and save the data contained in them, taking into account that
 * each variable is encoded as "short int".
 *-----------------------------------------------------------------------------*/
void Task3_ReadCANMessages(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	Receive_CAN_Message();
 8001228:	f7ff f96e 	bl	8000508 <Receive_CAN_Message>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001234:	f000 fb9a 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001238:	f000 f810 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123c:	f000 f94c 	bl	80014d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001240:	f000 f92a 	bl	8001498 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001244:	f000 f8fe 	bl	8001444 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001248:	f000 f8c6 	bl	80013d8 <MX_SPI1_Init>
  MX_ADC1_Init();
 800124c:	f000 f872 	bl	8001334 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  TaskInit();
 8001250:	f7ff fea0 	bl	8000f94 <TaskInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SchedulerMgmFct();
 8001254:	f7ff fe6e 	bl	8000f34 <SchedulerMgmFct>
 8001258:	e7fc      	b.n	8001254 <main+0x24>
	...

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	@ 0x50
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	2234      	movs	r2, #52	@ 0x34
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f003 ff2a 	bl	80050c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <SystemClock_Config+0xd0>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	4a28      	ldr	r2, [pc, #160]	@ (800132c <SystemClock_Config+0xd0>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001290:	4b26      	ldr	r3, [pc, #152]	@ (800132c <SystemClock_Config+0xd0>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800129c:	2300      	movs	r3, #0
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <SystemClock_Config+0xd4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012a8:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <SystemClock_Config+0xd4>)
 80012aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <SystemClock_Config+0xd4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012bc:	2302      	movs	r3, #2
 80012be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c4:	2310      	movs	r3, #16
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c8:	2302      	movs	r3, #2
 80012ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012d0:	2308      	movs	r3, #8
 80012d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012d4:	2348      	movs	r3, #72	@ 0x48
 80012d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d8:	2302      	movs	r3, #2
 80012da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012dc:	2302      	movs	r3, #2
 80012de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 fa5d 	bl	80037a8 <HAL_RCC_OscConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012f4:	f000 f97a 	bl	80015ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f8:	230f      	movs	r3, #15
 80012fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fc:	2302      	movs	r3, #2
 80012fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001308:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2102      	movs	r1, #2
 8001314:	4618      	mov	r0, r3
 8001316:	f001 fefd 	bl	8003114 <HAL_RCC_ClockConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001320:	f000 f964 	bl	80015ec <Error_Handler>
  }
}
 8001324:	bf00      	nop
 8001326:	3750      	adds	r7, #80	@ 0x50
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000

08001334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001348:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <MX_ADC1_Init+0x9c>)
 800134a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <MX_ADC1_Init+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <MX_ADC1_Init+0x98>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800135e:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001360:	2201      	movs	r2, #1
 8001362:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001364:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_ADC1_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001374:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <MX_ADC1_Init+0xa0>)
 8001376:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_ADC1_Init+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001380:	2201      	movs	r2, #1
 8001382:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_ADC1_Init+0x98>)
 800138e:	2201      	movs	r2, #1
 8001390:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001392:	480e      	ldr	r0, [pc, #56]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001394:	f000 fb5c 	bl	8001a50 <HAL_ADC_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800139e:	f000 f925 	bl	80015ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <MX_ADC1_Init+0x98>)
 80013b4:	f000 fdc4 	bl	8001f40 <HAL_ADC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013be:	f000 f915 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20002074 	.word	0x20002074
 80013d0:	40012000 	.word	0x40012000
 80013d4:	0f000001 	.word	0x0f000001

080013d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013dc:	4b17      	ldr	r3, [pc, #92]	@ (800143c <MX_SPI1_Init+0x64>)
 80013de:	4a18      	ldr	r2, [pc, #96]	@ (8001440 <MX_SPI1_Init+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e2:	4b16      	ldr	r3, [pc, #88]	@ (800143c <MX_SPI1_Init+0x64>)
 80013e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <MX_SPI1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_SPI1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_SPI1_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_SPI1_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_SPI1_Init+0x64>)
 8001404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001408:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_SPI1_Init+0x64>)
 800140c:	2210      	movs	r2, #16
 800140e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <MX_SPI1_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_SPI1_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <MX_SPI1_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_SPI1_Init+0x64>)
 8001424:	220a      	movs	r2, #10
 8001426:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_SPI1_Init+0x64>)
 800142a:	f002 fc5b 	bl	8003ce4 <HAL_SPI_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001434:	f000 f8da 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2000211c 	.word	0x2000211c
 8001440:	40013000 	.word	0x40013000

08001444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_USART2_UART_Init+0x4c>)
 800144a:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <MX_USART2_UART_Init+0x50>)
 800144c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <MX_USART2_UART_Init+0x4c>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <MX_USART2_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <MX_USART2_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_USART2_UART_Init+0x4c>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <MX_USART2_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <MX_USART2_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_USART2_UART_Init+0x4c>)
 800147c:	f003 fa16 	bl	80048ac <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001486:	f000 f8b1 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20002174 	.word	0x20002174
 8001494:	40004400 	.word	0x40004400

08001498 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <MX_DMA_Init+0x3c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a0b      	ldr	r2, [pc, #44]	@ (80014d4 <MX_DMA_Init+0x3c>)
 80014a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <MX_DMA_Init+0x3c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2038      	movs	r0, #56	@ 0x38
 80014c0:	f001 f8d3 	bl	800266a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014c4:	2038      	movs	r0, #56	@ 0x38
 80014c6:	f001 f8ec 	bl	80026a2 <HAL_NVIC_EnableIRQ>

}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	@ 0x28
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <MX_GPIO_Init+0xe0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a30      	ldr	r2, [pc, #192]	@ (80015b8 <MX_GPIO_Init+0xe0>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <MX_GPIO_Init+0xe0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <MX_GPIO_Init+0xe0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a29      	ldr	r2, [pc, #164]	@ (80015b8 <MX_GPIO_Init+0xe0>)
 8001514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <MX_GPIO_Init+0xe0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <MX_GPIO_Init+0xe0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a22      	ldr	r2, [pc, #136]	@ (80015b8 <MX_GPIO_Init+0xe0>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <MX_GPIO_Init+0xe0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <MX_GPIO_Init+0xe0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a1b      	ldr	r2, [pc, #108]	@ (80015b8 <MX_GPIO_Init+0xe0>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <MX_GPIO_Init+0xe0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2120      	movs	r1, #32
 8001562:	4816      	ldr	r0, [pc, #88]	@ (80015bc <MX_GPIO_Init+0xe4>)
 8001564:	f001 fdbc 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800156e:	4813      	ldr	r0, [pc, #76]	@ (80015bc <MX_GPIO_Init+0xe4>)
 8001570:	f001 fdb6 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001574:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800157a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <MX_GPIO_Init+0xe8>)
 800158c:	f001 fc14 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI_CS_Pin;
 8001590:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4804      	ldr	r0, [pc, #16]	@ (80015bc <MX_GPIO_Init+0xe4>)
 80015aa:	f001 fc05 	bl	8002db8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	@ 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020800 	.word	0x40020800

080015c4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completed filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f0:	b672      	cpsid	i
}
 80015f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <Error_Handler+0x8>

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_MspInit+0x4c>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	4a0f      	ldr	r2, [pc, #60]	@ (8001644 <HAL_MspInit+0x4c>)
 8001608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800160c:	6453      	str	r3, [r2, #68]	@ 0x44
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <HAL_MspInit+0x4c>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_MspInit+0x4c>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <HAL_MspInit+0x4c>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	@ 0x40
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_MspInit+0x4c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001636:	2007      	movs	r0, #7
 8001638:	f001 f80c 	bl	8002654 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40023800 	.word	0x40023800

08001648 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a33      	ldr	r2, [pc, #204]	@ (8001734 <HAL_ADC_MspInit+0xec>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d15f      	bne.n	800172a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b32      	ldr	r3, [pc, #200]	@ (8001738 <HAL_ADC_MspInit+0xf0>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	4a31      	ldr	r2, [pc, #196]	@ (8001738 <HAL_ADC_MspInit+0xf0>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001678:	6453      	str	r3, [r2, #68]	@ 0x44
 800167a:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <HAL_ADC_MspInit+0xf0>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b2b      	ldr	r3, [pc, #172]	@ (8001738 <HAL_ADC_MspInit+0xf0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a2a      	ldr	r2, [pc, #168]	@ (8001738 <HAL_ADC_MspInit+0xf0>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b28      	ldr	r3, [pc, #160]	@ (8001738 <HAL_ADC_MspInit+0xf0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a2:	2301      	movs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a6:	2303      	movs	r3, #3
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	4821      	ldr	r0, [pc, #132]	@ (800173c <HAL_ADC_MspInit+0xf4>)
 80016b6:	f001 fb7f 	bl	8002db8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016ba:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 80016bc:	4a21      	ldr	r2, [pc, #132]	@ (8001744 <HAL_ADC_MspInit+0xfc>)
 80016be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 80016d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016da:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 80016dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016e2:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 80016e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 80016ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016f2:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016fe:	4810      	ldr	r0, [pc, #64]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 8001700:	f000 ffea 	bl	80026d8 <HAL_DMA_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800170a:	f7ff ff6f 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a0b      	ldr	r2, [pc, #44]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 8001712:	639a      	str	r2, [r3, #56]	@ 0x38
 8001714:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_ADC_MspInit+0xf8>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2012      	movs	r0, #18
 8001720:	f000 ffa3 	bl	800266a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001724:	2012      	movs	r0, #18
 8001726:	f000 ffbc 	bl	80026a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40012000 	.word	0x40012000
 8001738:	40023800 	.word	0x40023800
 800173c:	40020000 	.word	0x40020000
 8001740:	200020bc 	.word	0x200020bc
 8001744:	40026410 	.word	0x40026410

08001748 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	@ 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a19      	ldr	r2, [pc, #100]	@ (80017cc <HAL_SPI_MspInit+0x84>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d12b      	bne.n	80017c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <HAL_SPI_MspInit+0x88>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	4a17      	ldr	r2, [pc, #92]	@ (80017d0 <HAL_SPI_MspInit+0x88>)
 8001774:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001778:	6453      	str	r3, [r2, #68]	@ 0x44
 800177a:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <HAL_SPI_MspInit+0x88>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <HAL_SPI_MspInit+0x88>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a10      	ldr	r2, [pc, #64]	@ (80017d0 <HAL_SPI_MspInit+0x88>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <HAL_SPI_MspInit+0x88>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80017a2:	2338      	movs	r3, #56	@ 0x38
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017b2:	2305      	movs	r3, #5
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	@ (80017d4 <HAL_SPI_MspInit+0x8c>)
 80017be:	f001 fafb 	bl	8002db8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	@ 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40013000 	.word	0x40013000
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020400 	.word	0x40020400

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a19      	ldr	r2, [pc, #100]	@ (800185c <HAL_UART_MspInit+0x84>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12b      	bne.n	8001852 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <HAL_UART_MspInit+0x88>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <HAL_UART_MspInit+0x88>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <HAL_UART_MspInit+0x88>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_UART_MspInit+0x88>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a10      	ldr	r2, [pc, #64]	@ (8001860 <HAL_UART_MspInit+0x88>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_UART_MspInit+0x88>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001832:	230c      	movs	r3, #12
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001842:	2307      	movs	r3, #7
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	@ (8001864 <HAL_UART_MspInit+0x8c>)
 800184e:	f001 fab3 	bl	8002db8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	@ 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40004400 	.word	0x40004400
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <NMI_Handler+0x4>

08001870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <MemManage_Handler+0x4>

08001880 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <UsageFault_Handler+0x4>

08001890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018be:	f000 f8a7 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SchTimerInterruptCallback();
 80018c2:	f7ff fab9 	bl	8000e38 <SchTimerInterruptCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <ADC_IRQHandler+0x10>)
 80018d2:	f000 f900 	bl	8001ad6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20002074 	.word	0x20002074

080018e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <DMA2_Stream0_IRQHandler+0x10>)
 80018e6:	f000 fffd 	bl	80028e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200020bc 	.word	0x200020bc

080018f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <SystemInit+0x20>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018fe:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <SystemInit+0x20>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001950 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800191c:	f7ff ffea 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	@ (8001958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	@ (8001964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001946:	f003 fbc5 	bl	80050d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7ff fc71 	bl	8001230 <main>
  bx  lr    
 800194e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800195c:	080051e0 	.word	0x080051e0
  ldr r2, =_sbss
 8001960:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001964:	200021c0 	.word	0x200021c0

08001968 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <CAN1_RX0_IRQHandler>
	...

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <HAL_Init+0x40>)
 8001976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800197a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_Init+0x40>)
 8001982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	@ (80019ac <HAL_Init+0x40>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 fe5d 	bl	8002654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f808 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fe2a 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fe75 	bl	80026be <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f000 fe3d 	bl	800266a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	@ (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	200021bc 	.word	0x200021bc

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200021bc 	.word	0x200021bc

08001a50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e033      	b.n	8001ace <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fdea 	bl	8001648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d118      	bne.n	8001ac0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a96:	f023 0302 	bic.w	r3, r3, #2
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fb7e 	bl	80021a4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f023 0303 	bic.w	r3, r3, #3
 8001ab6:	f043 0201 	orr.w	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001abe:	e001      	b.n	8001ac4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d049      	beq.n	8001ba0 <HAL_ADC_IRQHandler+0xca>
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d046      	beq.n	8001ba0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d105      	bne.n	8001b2a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d12b      	bne.n	8001b90 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d127      	bne.n	8001b90 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b46:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d119      	bne.n	8001b90 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0220 	bic.w	r2, r2, #32
 8001b6a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fd21 	bl	80015d8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f06f 0212 	mvn.w	r2, #18
 8001b9e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bae:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d057      	beq.n	8001c66 <HAL_ADC_IRQHandler+0x190>
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d054      	beq.n	8001c66 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d139      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d12b      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d124      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d11d      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d119      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c30:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fc22 	bl	80024a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 020c 	mvn.w	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c74:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d017      	beq.n	8001cac <HAL_ADC_IRQHandler+0x1d6>
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d014      	beq.n	8001cac <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d10d      	bne.n	8001cac <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f93b 	bl	8001f18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f06f 0201 	mvn.w	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cba:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d015      	beq.n	8001cee <HAL_ADC_IRQHandler+0x218>
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d012      	beq.n	8001cee <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ccc:	f043 0202 	orr.w	r2, r3, #2
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0220 	mvn.w	r2, #32
 8001cdc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f924 	bl	8001f2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0220 	mvn.w	r2, #32
 8001cec:	601a      	str	r2, [r3, #0]
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Start_DMA+0x1e>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e0e9      	b.n	8001eea <HAL_ADC_Start_DMA+0x1f2>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d018      	beq.n	8001d5e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3c:	4b6d      	ldr	r3, [pc, #436]	@ (8001ef4 <HAL_ADC_Start_DMA+0x1fc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a6d      	ldr	r2, [pc, #436]	@ (8001ef8 <HAL_ADC_Start_DMA+0x200>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0c9a      	lsrs	r2, r3, #18
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d6c:	d107      	bne.n	8001d7e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d7c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	f040 80a1 	bne.w	8001ed0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001db8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dcc:	d106      	bne.n	8001ddc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f023 0206 	bic.w	r2, r3, #6
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001dda:	e002      	b.n	8001de2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dea:	4b44      	ldr	r3, [pc, #272]	@ (8001efc <HAL_ADC_Start_DMA+0x204>)
 8001dec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df2:	4a43      	ldr	r2, [pc, #268]	@ (8001f00 <HAL_ADC_Start_DMA+0x208>)
 8001df4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dfa:	4a42      	ldr	r2, [pc, #264]	@ (8001f04 <HAL_ADC_Start_DMA+0x20c>)
 8001dfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e02:	4a41      	ldr	r2, [pc, #260]	@ (8001f08 <HAL_ADC_Start_DMA+0x210>)
 8001e04:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001e1e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e2e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	334c      	adds	r3, #76	@ 0x4c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f000 fcf8 	bl	8002834 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d12a      	bne.n	8001ea6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2d      	ldr	r2, [pc, #180]	@ (8001f0c <HAL_ADC_Start_DMA+0x214>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d015      	beq.n	8001e86 <HAL_ADC_Start_DMA+0x18e>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f10 <HAL_ADC_Start_DMA+0x218>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d105      	bne.n	8001e70 <HAL_ADC_Start_DMA+0x178>
 8001e64:	4b25      	ldr	r3, [pc, #148]	@ (8001efc <HAL_ADC_Start_DMA+0x204>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <HAL_ADC_Start_DMA+0x21c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d136      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <HAL_ADC_Start_DMA+0x204>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d130      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d129      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	e020      	b.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a18      	ldr	r2, [pc, #96]	@ (8001f0c <HAL_ADC_Start_DMA+0x214>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d11b      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d114      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	e00b      	b.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f043 0210 	orr.w	r2, r3, #16
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	431bde83 	.word	0x431bde83
 8001efc:	40012300 	.word	0x40012300
 8001f00:	0800239d 	.word	0x0800239d
 8001f04:	08002457 	.word	0x08002457
 8001f08:	08002473 	.word	0x08002473
 8001f0c:	40012000 	.word	0x40012000
 8001f10:	40012100 	.word	0x40012100
 8001f14:	40012200 	.word	0x40012200

08001f18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x1c>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e113      	b.n	8002184 <HAL_ADC_ConfigChannel+0x244>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b09      	cmp	r3, #9
 8001f6a:	d925      	bls.n	8001fb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68d9      	ldr	r1, [r3, #12]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b1e      	subs	r3, #30
 8001f82:	2207      	movs	r2, #7
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43da      	mvns	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	400a      	ands	r2, r1
 8001f90:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68d9      	ldr	r1, [r3, #12]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4403      	add	r3, r0
 8001faa:	3b1e      	subs	r3, #30
 8001fac:	409a      	lsls	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	e022      	b.n	8001ffe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6919      	ldr	r1, [r3, #16]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	2207      	movs	r2, #7
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	400a      	ands	r2, r1
 8001fda:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6919      	ldr	r1, [r3, #16]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4403      	add	r3, r0
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b06      	cmp	r3, #6
 8002004:	d824      	bhi.n	8002050 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	3b05      	subs	r3, #5
 8002018:	221f      	movs	r2, #31
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	400a      	ands	r2, r1
 8002026:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	4618      	mov	r0, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	3b05      	subs	r3, #5
 8002042:	fa00 f203 	lsl.w	r2, r0, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	635a      	str	r2, [r3, #52]	@ 0x34
 800204e:	e04c      	b.n	80020ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b0c      	cmp	r3, #12
 8002056:	d824      	bhi.n	80020a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	3b23      	subs	r3, #35	@ 0x23
 800206a:	221f      	movs	r2, #31
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43da      	mvns	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	400a      	ands	r2, r1
 8002078:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	b29b      	uxth	r3, r3
 8002086:	4618      	mov	r0, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	3b23      	subs	r3, #35	@ 0x23
 8002094:	fa00 f203 	lsl.w	r2, r0, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	631a      	str	r2, [r3, #48]	@ 0x30
 80020a0:	e023      	b.n	80020ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	3b41      	subs	r3, #65	@ 0x41
 80020b4:	221f      	movs	r2, #31
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	400a      	ands	r2, r1
 80020c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4618      	mov	r0, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	3b41      	subs	r3, #65	@ 0x41
 80020de:	fa00 f203 	lsl.w	r2, r0, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ea:	4b29      	ldr	r3, [pc, #164]	@ (8002190 <HAL_ADC_ConfigChannel+0x250>)
 80020ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a28      	ldr	r2, [pc, #160]	@ (8002194 <HAL_ADC_ConfigChannel+0x254>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d10f      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1d8>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b12      	cmp	r3, #18
 80020fe:	d10b      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1d      	ldr	r2, [pc, #116]	@ (8002194 <HAL_ADC_ConfigChannel+0x254>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12b      	bne.n	800217a <HAL_ADC_ConfigChannel+0x23a>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <HAL_ADC_ConfigChannel+0x258>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x1f4>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b11      	cmp	r3, #17
 8002132:	d122      	bne.n	800217a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a11      	ldr	r2, [pc, #68]	@ (8002198 <HAL_ADC_ConfigChannel+0x258>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d111      	bne.n	800217a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002156:	4b11      	ldr	r3, [pc, #68]	@ (800219c <HAL_ADC_ConfigChannel+0x25c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a11      	ldr	r2, [pc, #68]	@ (80021a0 <HAL_ADC_ConfigChannel+0x260>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	0c9a      	lsrs	r2, r3, #18
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800216c:	e002      	b.n	8002174 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3b01      	subs	r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f9      	bne.n	800216e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40012300 	.word	0x40012300
 8002194:	40012000 	.word	0x40012000
 8002198:	10000012 	.word	0x10000012
 800219c:	20000000 	.word	0x20000000
 80021a0:	431bde83 	.word	0x431bde83

080021a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ac:	4b79      	ldr	r3, [pc, #484]	@ (8002394 <ADC_Init+0x1f0>)
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	021a      	lsls	r2, r3, #8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800221e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6899      	ldr	r1, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002236:	4a58      	ldr	r2, [pc, #352]	@ (8002398 <ADC_Init+0x1f4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d022      	beq.n	8002282 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800224a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6899      	ldr	r1, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800226c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6899      	ldr	r1, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	e00f      	b.n	80022a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002290:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0202 	bic.w	r2, r2, #2
 80022b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6899      	ldr	r1, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7e1b      	ldrb	r3, [r3, #24]
 80022bc:	005a      	lsls	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01b      	beq.n	8002308 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022de:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80022ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6859      	ldr	r1, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	3b01      	subs	r3, #1
 80022fc:	035a      	lsls	r2, r3, #13
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	e007      	b.n	8002318 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002316:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002326:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	3b01      	subs	r3, #1
 8002334:	051a      	lsls	r2, r3, #20
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800234c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6899      	ldr	r1, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800235a:	025a      	lsls	r2, r3, #9
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002372:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6899      	ldr	r1, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	029a      	lsls	r2, r3, #10
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	609a      	str	r2, [r3, #8]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40012300 	.word	0x40012300
 8002398:	0f000001 	.word	0x0f000001

0800239c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d13c      	bne.n	8002430 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d12b      	bne.n	8002428 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d127      	bne.n	8002428 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d119      	bne.n	8002428 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0220 	bic.w	r2, r2, #32
 8002402:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7ff f8d5 	bl	80015d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800242e:	e00e      	b.n	800244e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f7ff fd75 	bl	8001f2c <HAL_ADC_ErrorCallback>
}
 8002442:	e004      	b.n	800244e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002462:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff f8ad 	bl	80015c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2240      	movs	r2, #64	@ 0x40
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	f043 0204 	orr.w	r2, r3, #4
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff fd4a 	bl	8001f2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c4:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024d0:	4013      	ands	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024e6:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	60d3      	str	r3, [r2, #12]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002500:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <__NVIC_GetPriorityGrouping+0x18>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	f003 0307 	and.w	r3, r3, #7
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	2b00      	cmp	r3, #0
 8002528:	db0b      	blt.n	8002542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	f003 021f 	and.w	r2, r3, #31
 8002530:	4907      	ldr	r1, [pc, #28]	@ (8002550 <__NVIC_EnableIRQ+0x38>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2001      	movs	r0, #1
 800253a:	fa00 f202 	lsl.w	r2, r0, r2
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000e100 	.word	0xe000e100

08002554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	2b00      	cmp	r3, #0
 8002566:	db0a      	blt.n	800257e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	490c      	ldr	r1, [pc, #48]	@ (80025a0 <__NVIC_SetPriority+0x4c>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	0112      	lsls	r2, r2, #4
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	440b      	add	r3, r1
 8002578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800257c:	e00a      	b.n	8002594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4908      	ldr	r1, [pc, #32]	@ (80025a4 <__NVIC_SetPriority+0x50>)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	3b04      	subs	r3, #4
 800258c:	0112      	lsls	r2, r2, #4
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	440b      	add	r3, r1
 8002592:	761a      	strb	r2, [r3, #24]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000e100 	.word	0xe000e100
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	@ 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f1c3 0307 	rsb	r3, r3, #7
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	bf28      	it	cs
 80025c6:	2304      	movcs	r3, #4
 80025c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3304      	adds	r3, #4
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d902      	bls.n	80025d8 <NVIC_EncodePriority+0x30>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3b03      	subs	r3, #3
 80025d6:	e000      	b.n	80025da <NVIC_EncodePriority+0x32>
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	f04f 32ff 	mov.w	r2, #4294967295
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	401a      	ands	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f0:	f04f 31ff 	mov.w	r1, #4294967295
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43d9      	mvns	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	4313      	orrs	r3, r2
         );
}
 8002602:	4618      	mov	r0, r3
 8002604:	3724      	adds	r7, #36	@ 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002620:	d301      	bcc.n	8002626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002622:	2301      	movs	r3, #1
 8002624:	e00f      	b.n	8002646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002626:	4a0a      	ldr	r2, [pc, #40]	@ (8002650 <SysTick_Config+0x40>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800262e:	210f      	movs	r1, #15
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	f7ff ff8e 	bl	8002554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002638:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <SysTick_Config+0x40>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263e:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <SysTick_Config+0x40>)
 8002640:	2207      	movs	r2, #7
 8002642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	e000e010 	.word	0xe000e010

08002654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ff29 	bl	80024b4 <__NVIC_SetPriorityGrouping>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800267c:	f7ff ff3e 	bl	80024fc <__NVIC_GetPriorityGrouping>
 8002680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	6978      	ldr	r0, [r7, #20]
 8002688:	f7ff ff8e 	bl	80025a8 <NVIC_EncodePriority>
 800268c:	4602      	mov	r2, r0
 800268e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff5d 	bl	8002554 <__NVIC_SetPriority>
}
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff31 	bl	8002518 <__NVIC_EnableIRQ>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ffa2 	bl	8002610 <SysTick_Config>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff f9a8 	bl	8001a38 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e099      	b.n	8002828 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002714:	e00f      	b.n	8002736 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002716:	f7ff f98f 	bl	8001a38 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b05      	cmp	r3, #5
 8002722:	d908      	bls.n	8002736 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e078      	b.n	8002828 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e8      	bne.n	8002716 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <HAL_DMA_Init+0x158>)
 8002750:	4013      	ands	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002762:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	2b04      	cmp	r3, #4
 800278e:	d107      	bne.n	80027a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	4313      	orrs	r3, r2
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f023 0307 	bic.w	r3, r3, #7
 80027b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d117      	bne.n	80027fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00e      	beq.n	80027fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fa6f 	bl	8002cc0 <DMA_CheckFifoParam>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2240      	movs	r2, #64	@ 0x40
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80027f6:	2301      	movs	r3, #1
 80027f8:	e016      	b.n	8002828 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa26 	bl	8002c54 <DMA_CalcBaseAndBitshift>
 8002808:	4603      	mov	r3, r0
 800280a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002810:	223f      	movs	r2, #63	@ 0x3f
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	f010803f 	.word	0xf010803f

08002834 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_DMA_Start_IT+0x26>
 8002856:	2302      	movs	r3, #2
 8002858:	e040      	b.n	80028dc <HAL_DMA_Start_IT+0xa8>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d12f      	bne.n	80028ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2202      	movs	r2, #2
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f9b8 	bl	8002bf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	223f      	movs	r2, #63	@ 0x3f
 800288e:	409a      	lsls	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0216 	orr.w	r2, r2, #22
 80028a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0208 	orr.w	r2, r2, #8
 80028ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e005      	b.n	80028da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
 80028d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028da:	7dfb      	ldrb	r3, [r7, #23]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028f0:	4b8e      	ldr	r3, [pc, #568]	@ (8002b2c <HAL_DMA_IRQHandler+0x248>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a8e      	ldr	r2, [pc, #568]	@ (8002b30 <HAL_DMA_IRQHandler+0x24c>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	0a9b      	lsrs	r3, r3, #10
 80028fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	2208      	movs	r2, #8
 8002910:	409a      	lsls	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01a      	beq.n	8002950 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d013      	beq.n	8002950 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0204 	bic.w	r2, r2, #4
 8002936:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293c:	2208      	movs	r2, #8
 800293e:	409a      	lsls	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002948:	f043 0201 	orr.w	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002954:	2201      	movs	r2, #1
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d012      	beq.n	8002986 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	2201      	movs	r2, #1
 8002974:	409a      	lsls	r2, r3
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297e:	f043 0202 	orr.w	r2, r3, #2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	2204      	movs	r2, #4
 800298c:	409a      	lsls	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d012      	beq.n	80029bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a8:	2204      	movs	r2, #4
 80029aa:	409a      	lsls	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b4:	f043 0204 	orr.w	r2, r3, #4
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	2210      	movs	r2, #16
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d043      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d03c      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029de:	2210      	movs	r2, #16
 80029e0:	409a      	lsls	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d018      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d108      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d024      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
 8002a12:	e01f      	b.n	8002a54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01b      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
 8002a24:	e016      	b.n	8002a54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d107      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0208 	bic.w	r2, r2, #8
 8002a42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a58:	2220      	movs	r2, #32
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 808f 	beq.w	8002b84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 8087 	beq.w	8002b84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d136      	bne.n	8002afc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0216 	bic.w	r2, r2, #22
 8002a9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d103      	bne.n	8002abe <HAL_DMA_IRQHandler+0x1da>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0208 	bic.w	r2, r2, #8
 8002acc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad2:	223f      	movs	r2, #63	@ 0x3f
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d07e      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
        }
        return;
 8002afa:	e079      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01d      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10d      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d031      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	4798      	blx	r3
 8002b28:	e02c      	b.n	8002b84 <HAL_DMA_IRQHandler+0x2a0>
 8002b2a:	bf00      	nop
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d023      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
 8002b44:	e01e      	b.n	8002b84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10f      	bne.n	8002b74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0210 	bic.w	r2, r2, #16
 8002b62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d032      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d022      	beq.n	8002bde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2205      	movs	r2, #5
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d307      	bcc.n	8002bcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f2      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x2cc>
 8002bca:	e000      	b.n	8002bce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	4798      	blx	r3
 8002bee:	e000      	b.n	8002bf2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bf0:	bf00      	nop
    }
  }
}
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b40      	cmp	r3, #64	@ 0x40
 8002c24:	d108      	bne.n	8002c38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c36:	e007      	b.n	8002c48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	60da      	str	r2, [r3, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	3b10      	subs	r3, #16
 8002c64:	4a14      	ldr	r2, [pc, #80]	@ (8002cb8 <DMA_CalcBaseAndBitshift+0x64>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c6e:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <DMA_CalcBaseAndBitshift+0x68>)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d909      	bls.n	8002c96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	1d1a      	adds	r2, r3, #4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c94:	e007      	b.n	8002ca6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c9e:	f023 0303 	bic.w	r3, r3, #3
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	aaaaaaab 	.word	0xaaaaaaab
 8002cbc:	080051c8 	.word	0x080051c8

08002cc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d11f      	bne.n	8002d1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d856      	bhi.n	8002d8e <DMA_CheckFifoParam+0xce>
 8002ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce8 <DMA_CheckFifoParam+0x28>)
 8002ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce6:	bf00      	nop
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002d0b 	.word	0x08002d0b
 8002cf0:	08002cf9 	.word	0x08002cf9
 8002cf4:	08002d8f 	.word	0x08002d8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d046      	beq.n	8002d92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d08:	e043      	b.n	8002d92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d12:	d140      	bne.n	8002d96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d18:	e03d      	b.n	8002d96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d22:	d121      	bne.n	8002d68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d837      	bhi.n	8002d9a <DMA_CheckFifoParam+0xda>
 8002d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d30 <DMA_CheckFifoParam+0x70>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002d41 	.word	0x08002d41
 8002d34:	08002d47 	.word	0x08002d47
 8002d38:	08002d41 	.word	0x08002d41
 8002d3c:	08002d59 	.word	0x08002d59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      break;
 8002d44:	e030      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d025      	beq.n	8002d9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d56:	e022      	b.n	8002d9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d60:	d11f      	bne.n	8002da2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d66:	e01c      	b.n	8002da2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d903      	bls.n	8002d76 <DMA_CheckFifoParam+0xb6>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d003      	beq.n	8002d7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d74:	e018      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7a:	e015      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00e      	beq.n	8002da6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	e00b      	b.n	8002da6 <DMA_CheckFifoParam+0xe6>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e00a      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      break;
 8002d92:	bf00      	nop
 8002d94:	e008      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      break;
 8002d96:	bf00      	nop
 8002d98:	e006      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e004      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e002      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002da2:	bf00      	nop
 8002da4:	e000      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
    }
  } 
  
  return status; 
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop

08002db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	@ 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	e165      	b.n	80030a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	f040 8154 	bne.w	800309a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d005      	beq.n	8002e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d130      	bne.n	8002e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	2203      	movs	r2, #3
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e40:	2201      	movs	r2, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 0201 	and.w	r2, r3, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d017      	beq.n	8002ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d123      	bne.n	8002efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	08da      	lsrs	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3208      	adds	r2, #8
 8002ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	220f      	movs	r2, #15
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	08da      	lsrs	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3208      	adds	r2, #8
 8002ef6:	69b9      	ldr	r1, [r7, #24]
 8002ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	2203      	movs	r2, #3
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0203 	and.w	r2, r3, #3
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80ae 	beq.w	800309a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b5d      	ldr	r3, [pc, #372]	@ (80030b8 <HAL_GPIO_Init+0x300>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	4a5c      	ldr	r2, [pc, #368]	@ (80030b8 <HAL_GPIO_Init+0x300>)
 8002f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f4e:	4b5a      	ldr	r3, [pc, #360]	@ (80030b8 <HAL_GPIO_Init+0x300>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f5a:	4a58      	ldr	r2, [pc, #352]	@ (80030bc <HAL_GPIO_Init+0x304>)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	3302      	adds	r3, #2
 8002f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	220f      	movs	r2, #15
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4f      	ldr	r2, [pc, #316]	@ (80030c0 <HAL_GPIO_Init+0x308>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d025      	beq.n	8002fd2 <HAL_GPIO_Init+0x21a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4e      	ldr	r2, [pc, #312]	@ (80030c4 <HAL_GPIO_Init+0x30c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01f      	beq.n	8002fce <HAL_GPIO_Init+0x216>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4d      	ldr	r2, [pc, #308]	@ (80030c8 <HAL_GPIO_Init+0x310>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d019      	beq.n	8002fca <HAL_GPIO_Init+0x212>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4c      	ldr	r2, [pc, #304]	@ (80030cc <HAL_GPIO_Init+0x314>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <HAL_GPIO_Init+0x20e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80030d0 <HAL_GPIO_Init+0x318>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_GPIO_Init+0x20a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80030d4 <HAL_GPIO_Init+0x31c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d007      	beq.n	8002fbe <HAL_GPIO_Init+0x206>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a49      	ldr	r2, [pc, #292]	@ (80030d8 <HAL_GPIO_Init+0x320>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <HAL_GPIO_Init+0x202>
 8002fb6:	2306      	movs	r3, #6
 8002fb8:	e00c      	b.n	8002fd4 <HAL_GPIO_Init+0x21c>
 8002fba:	2307      	movs	r3, #7
 8002fbc:	e00a      	b.n	8002fd4 <HAL_GPIO_Init+0x21c>
 8002fbe:	2305      	movs	r3, #5
 8002fc0:	e008      	b.n	8002fd4 <HAL_GPIO_Init+0x21c>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	e006      	b.n	8002fd4 <HAL_GPIO_Init+0x21c>
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e004      	b.n	8002fd4 <HAL_GPIO_Init+0x21c>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e002      	b.n	8002fd4 <HAL_GPIO_Init+0x21c>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_GPIO_Init+0x21c>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	f002 0203 	and.w	r2, r2, #3
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	4093      	lsls	r3, r2
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe4:	4935      	ldr	r1, [pc, #212]	@ (80030bc <HAL_GPIO_Init+0x304>)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3302      	adds	r3, #2
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80030dc <HAL_GPIO_Init+0x324>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003016:	4a31      	ldr	r2, [pc, #196]	@ (80030dc <HAL_GPIO_Init+0x324>)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800301c:	4b2f      	ldr	r3, [pc, #188]	@ (80030dc <HAL_GPIO_Init+0x324>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003040:	4a26      	ldr	r2, [pc, #152]	@ (80030dc <HAL_GPIO_Init+0x324>)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003046:	4b25      	ldr	r3, [pc, #148]	@ (80030dc <HAL_GPIO_Init+0x324>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800306a:	4a1c      	ldr	r2, [pc, #112]	@ (80030dc <HAL_GPIO_Init+0x324>)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003070:	4b1a      	ldr	r3, [pc, #104]	@ (80030dc <HAL_GPIO_Init+0x324>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003094:	4a11      	ldr	r2, [pc, #68]	@ (80030dc <HAL_GPIO_Init+0x324>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3301      	adds	r3, #1
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	f67f ae96 	bls.w	8002dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	3724      	adds	r7, #36	@ 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40013800 	.word	0x40013800
 80030c0:	40020000 	.word	0x40020000
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40020800 	.word	0x40020800
 80030cc:	40020c00 	.word	0x40020c00
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40021400 	.word	0x40021400
 80030d8:	40021800 	.word	0x40021800
 80030dc:	40013c00 	.word	0x40013c00

080030e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	807b      	strh	r3, [r7, #2]
 80030ec:	4613      	mov	r3, r2
 80030ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f0:	787b      	ldrb	r3, [r7, #1]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f6:	887a      	ldrh	r2, [r7, #2]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030fc:	e003      	b.n	8003106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030fe:	887b      	ldrh	r3, [r7, #2]
 8003100:	041a      	lsls	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	619a      	str	r2, [r3, #24]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0cc      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003128:	4b68      	ldr	r3, [pc, #416]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d90c      	bls.n	8003150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b65      	ldr	r3, [pc, #404]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b63      	ldr	r3, [pc, #396]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b8      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003168:	4b59      	ldr	r3, [pc, #356]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a58      	ldr	r2, [pc, #352]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003180:	4b53      	ldr	r3, [pc, #332]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a52      	ldr	r2, [pc, #328]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800318a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b50      	ldr	r3, [pc, #320]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	494d      	ldr	r1, [pc, #308]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d044      	beq.n	8003234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b47      	ldr	r3, [pc, #284]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d119      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e07f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d2:	4b3f      	ldr	r3, [pc, #252]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e06f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e2:	4b3b      	ldr	r3, [pc, #236]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e067      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f2:	4b37      	ldr	r3, [pc, #220]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f023 0203 	bic.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4934      	ldr	r1, [pc, #208]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	4313      	orrs	r3, r2
 8003202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003204:	f7fe fc18 	bl	8001a38 <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	e00a      	b.n	8003222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320c:	f7fe fc14 	bl	8001a38 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e04f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	4b2b      	ldr	r3, [pc, #172]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 020c 	and.w	r2, r3, #12
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	429a      	cmp	r2, r3
 8003232:	d1eb      	bne.n	800320c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b25      	ldr	r3, [pc, #148]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d20c      	bcs.n	800325c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b22      	ldr	r3, [pc, #136]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e032      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b19      	ldr	r3, [pc, #100]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4916      	ldr	r1, [pc, #88]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003286:	4b12      	ldr	r3, [pc, #72]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	490e      	ldr	r1, [pc, #56]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800329a:	f000 f855 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	490a      	ldr	r1, [pc, #40]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	5ccb      	ldrb	r3, [r1, r3]
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	4a09      	ldr	r2, [pc, #36]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032b6:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fb78 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023c00 	.word	0x40023c00
 80032d0:	40023800 	.word	0x40023800
 80032d4:	080051b0 	.word	0x080051b0
 80032d8:	20000000 	.word	0x20000000
 80032dc:	20000004 	.word	0x20000004

080032e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e4:	4b03      	ldr	r3, [pc, #12]	@ (80032f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000000 	.word	0x20000000

080032f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032fc:	f7ff fff0 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	0a9b      	lsrs	r3, r3, #10
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4903      	ldr	r1, [pc, #12]	@ (800331c <HAL_RCC_GetPCLK1Freq+0x24>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40023800 	.word	0x40023800
 800331c:	080051c0 	.word	0x080051c0

08003320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003324:	f7ff ffdc 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	0b5b      	lsrs	r3, r3, #13
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4903      	ldr	r1, [pc, #12]	@ (8003344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40023800 	.word	0x40023800
 8003344:	080051c0 	.word	0x080051c0

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b0ae      	sub	sp, #184	@ 0xb8
 800334e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800336e:	4bcb      	ldr	r3, [pc, #812]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b0c      	cmp	r3, #12
 8003378:	f200 8206 	bhi.w	8003788 <HAL_RCC_GetSysClockFreq+0x440>
 800337c:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <HAL_RCC_GetSysClockFreq+0x3c>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	080033b9 	.word	0x080033b9
 8003388:	08003789 	.word	0x08003789
 800338c:	08003789 	.word	0x08003789
 8003390:	08003789 	.word	0x08003789
 8003394:	080033c1 	.word	0x080033c1
 8003398:	08003789 	.word	0x08003789
 800339c:	08003789 	.word	0x08003789
 80033a0:	08003789 	.word	0x08003789
 80033a4:	080033c9 	.word	0x080033c9
 80033a8:	08003789 	.word	0x08003789
 80033ac:	08003789 	.word	0x08003789
 80033b0:	08003789 	.word	0x08003789
 80033b4:	080035b9 	.word	0x080035b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4bb9      	ldr	r3, [pc, #740]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80033ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80033be:	e1e7      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c0:	4bb8      	ldr	r3, [pc, #736]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80033c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033c6:	e1e3      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c8:	4bb4      	ldr	r3, [pc, #720]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d4:	4bb1      	ldr	r3, [pc, #708]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d071      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e0:	4bae      	ldr	r3, [pc, #696]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	099b      	lsrs	r3, r3, #6
 80033e6:	2200      	movs	r2, #0
 80033e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033ec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80033f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003406:	4622      	mov	r2, r4
 8003408:	462b      	mov	r3, r5
 800340a:	f04f 0000 	mov.w	r0, #0
 800340e:	f04f 0100 	mov.w	r1, #0
 8003412:	0159      	lsls	r1, r3, #5
 8003414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003418:	0150      	lsls	r0, r2, #5
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4621      	mov	r1, r4
 8003420:	1a51      	subs	r1, r2, r1
 8003422:	6439      	str	r1, [r7, #64]	@ 0x40
 8003424:	4629      	mov	r1, r5
 8003426:	eb63 0301 	sbc.w	r3, r3, r1
 800342a:	647b      	str	r3, [r7, #68]	@ 0x44
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003438:	4649      	mov	r1, r9
 800343a:	018b      	lsls	r3, r1, #6
 800343c:	4641      	mov	r1, r8
 800343e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003442:	4641      	mov	r1, r8
 8003444:	018a      	lsls	r2, r1, #6
 8003446:	4641      	mov	r1, r8
 8003448:	1a51      	subs	r1, r2, r1
 800344a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800344c:	4649      	mov	r1, r9
 800344e:	eb63 0301 	sbc.w	r3, r3, r1
 8003452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003460:	4649      	mov	r1, r9
 8003462:	00cb      	lsls	r3, r1, #3
 8003464:	4641      	mov	r1, r8
 8003466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800346a:	4641      	mov	r1, r8
 800346c:	00ca      	lsls	r2, r1, #3
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	4603      	mov	r3, r0
 8003474:	4622      	mov	r2, r4
 8003476:	189b      	adds	r3, r3, r2
 8003478:	633b      	str	r3, [r7, #48]	@ 0x30
 800347a:	462b      	mov	r3, r5
 800347c:	460a      	mov	r2, r1
 800347e:	eb42 0303 	adc.w	r3, r2, r3
 8003482:	637b      	str	r3, [r7, #52]	@ 0x34
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003490:	4629      	mov	r1, r5
 8003492:	024b      	lsls	r3, r1, #9
 8003494:	4621      	mov	r1, r4
 8003496:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800349a:	4621      	mov	r1, r4
 800349c:	024a      	lsls	r2, r1, #9
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80034b4:	f7fc fea6 	bl	8000204 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4613      	mov	r3, r2
 80034be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034c2:	e067      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c4:	4b75      	ldr	r3, [pc, #468]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034d0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80034d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034de:	2300      	movs	r3, #0
 80034e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80034e6:	4622      	mov	r2, r4
 80034e8:	462b      	mov	r3, r5
 80034ea:	f04f 0000 	mov.w	r0, #0
 80034ee:	f04f 0100 	mov.w	r1, #0
 80034f2:	0159      	lsls	r1, r3, #5
 80034f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f8:	0150      	lsls	r0, r2, #5
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4621      	mov	r1, r4
 8003500:	1a51      	subs	r1, r2, r1
 8003502:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003504:	4629      	mov	r1, r5
 8003506:	eb63 0301 	sbc.w	r3, r3, r1
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003518:	4649      	mov	r1, r9
 800351a:	018b      	lsls	r3, r1, #6
 800351c:	4641      	mov	r1, r8
 800351e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003522:	4641      	mov	r1, r8
 8003524:	018a      	lsls	r2, r1, #6
 8003526:	4641      	mov	r1, r8
 8003528:	ebb2 0a01 	subs.w	sl, r2, r1
 800352c:	4649      	mov	r1, r9
 800352e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800353e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003542:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003546:	4692      	mov	sl, r2
 8003548:	469b      	mov	fp, r3
 800354a:	4623      	mov	r3, r4
 800354c:	eb1a 0303 	adds.w	r3, sl, r3
 8003550:	623b      	str	r3, [r7, #32]
 8003552:	462b      	mov	r3, r5
 8003554:	eb4b 0303 	adc.w	r3, fp, r3
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003566:	4629      	mov	r1, r5
 8003568:	028b      	lsls	r3, r1, #10
 800356a:	4621      	mov	r1, r4
 800356c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003570:	4621      	mov	r1, r4
 8003572:	028a      	lsls	r2, r1, #10
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800357c:	2200      	movs	r2, #0
 800357e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003580:	677a      	str	r2, [r7, #116]	@ 0x74
 8003582:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003586:	f7fc fe3d 	bl	8000204 <__aeabi_uldivmod>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4613      	mov	r3, r2
 8003590:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003594:	4b41      	ldr	r3, [pc, #260]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	3301      	adds	r3, #1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80035a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035b6:	e0eb      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b8:	4b38      	ldr	r3, [pc, #224]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c4:	4b35      	ldr	r3, [pc, #212]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d06b      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d0:	4b32      	ldr	r3, [pc, #200]	@ (800369c <HAL_RCC_GetSysClockFreq+0x354>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	2200      	movs	r2, #0
 80035d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80035e4:	2300      	movs	r3, #0
 80035e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80035e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80035ec:	4622      	mov	r2, r4
 80035ee:	462b      	mov	r3, r5
 80035f0:	f04f 0000 	mov.w	r0, #0
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	0159      	lsls	r1, r3, #5
 80035fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fe:	0150      	lsls	r0, r2, #5
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4621      	mov	r1, r4
 8003606:	1a51      	subs	r1, r2, r1
 8003608:	61b9      	str	r1, [r7, #24]
 800360a:	4629      	mov	r1, r5
 800360c:	eb63 0301 	sbc.w	r3, r3, r1
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800361e:	4659      	mov	r1, fp
 8003620:	018b      	lsls	r3, r1, #6
 8003622:	4651      	mov	r1, sl
 8003624:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003628:	4651      	mov	r1, sl
 800362a:	018a      	lsls	r2, r1, #6
 800362c:	4651      	mov	r1, sl
 800362e:	ebb2 0801 	subs.w	r8, r2, r1
 8003632:	4659      	mov	r1, fp
 8003634:	eb63 0901 	sbc.w	r9, r3, r1
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003644:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003648:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800364c:	4690      	mov	r8, r2
 800364e:	4699      	mov	r9, r3
 8003650:	4623      	mov	r3, r4
 8003652:	eb18 0303 	adds.w	r3, r8, r3
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	462b      	mov	r3, r5
 800365a:	eb49 0303 	adc.w	r3, r9, r3
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800366c:	4629      	mov	r1, r5
 800366e:	024b      	lsls	r3, r1, #9
 8003670:	4621      	mov	r1, r4
 8003672:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003676:	4621      	mov	r1, r4
 8003678:	024a      	lsls	r2, r1, #9
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003682:	2200      	movs	r2, #0
 8003684:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003686:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003688:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800368c:	f7fc fdba 	bl	8000204 <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4613      	mov	r3, r2
 8003696:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800369a:	e065      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x420>
 800369c:	40023800 	.word	0x40023800
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a8:	4b3d      	ldr	r3, [pc, #244]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	2200      	movs	r2, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	4611      	mov	r1, r2
 80036b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80036ba:	2300      	movs	r3, #0
 80036bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80036be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80036c2:	4642      	mov	r2, r8
 80036c4:	464b      	mov	r3, r9
 80036c6:	f04f 0000 	mov.w	r0, #0
 80036ca:	f04f 0100 	mov.w	r1, #0
 80036ce:	0159      	lsls	r1, r3, #5
 80036d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d4:	0150      	lsls	r0, r2, #5
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4641      	mov	r1, r8
 80036dc:	1a51      	subs	r1, r2, r1
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	4649      	mov	r1, r9
 80036e2:	eb63 0301 	sbc.w	r3, r3, r1
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036f4:	4659      	mov	r1, fp
 80036f6:	018b      	lsls	r3, r1, #6
 80036f8:	4651      	mov	r1, sl
 80036fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036fe:	4651      	mov	r1, sl
 8003700:	018a      	lsls	r2, r1, #6
 8003702:	4651      	mov	r1, sl
 8003704:	1a54      	subs	r4, r2, r1
 8003706:	4659      	mov	r1, fp
 8003708:	eb63 0501 	sbc.w	r5, r3, r1
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	00eb      	lsls	r3, r5, #3
 8003716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371a:	00e2      	lsls	r2, r4, #3
 800371c:	4614      	mov	r4, r2
 800371e:	461d      	mov	r5, r3
 8003720:	4643      	mov	r3, r8
 8003722:	18e3      	adds	r3, r4, r3
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	464b      	mov	r3, r9
 8003728:	eb45 0303 	adc.w	r3, r5, r3
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800373a:	4629      	mov	r1, r5
 800373c:	028b      	lsls	r3, r1, #10
 800373e:	4621      	mov	r1, r4
 8003740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003744:	4621      	mov	r1, r4
 8003746:	028a      	lsls	r2, r1, #10
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003750:	2200      	movs	r2, #0
 8003752:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003754:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003756:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800375a:	f7fc fd53 	bl	8000204 <__aeabi_uldivmod>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4613      	mov	r3, r2
 8003764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003768:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	0f1b      	lsrs	r3, r3, #28
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003776:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800377a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003786:	e003      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800378a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800378e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003790:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003794:	4618      	mov	r0, r3
 8003796:	37b8      	adds	r7, #184	@ 0xb8
 8003798:	46bd      	mov	sp, r7
 800379a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800
 80037a4:	00f42400 	.word	0x00f42400

080037a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e28d      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8083 	beq.w	80038ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037c8:	4b94      	ldr	r3, [pc, #592]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d019      	beq.n	8003808 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037d4:	4b91      	ldr	r3, [pc, #580]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037e0:	4b8e      	ldr	r3, [pc, #568]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ec:	d00c      	beq.n	8003808 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ee:	4b8b      	ldr	r3, [pc, #556]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d112      	bne.n	8003820 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fa:	4b88      	ldr	r3, [pc, #544]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003806:	d10b      	bne.n	8003820 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	4b84      	ldr	r3, [pc, #528]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d05b      	beq.n	80038cc <HAL_RCC_OscConfig+0x124>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d157      	bne.n	80038cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e25a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003828:	d106      	bne.n	8003838 <HAL_RCC_OscConfig+0x90>
 800382a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7b      	ldr	r2, [pc, #492]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e01d      	b.n	8003874 <HAL_RCC_OscConfig+0xcc>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0xb4>
 8003842:	4b76      	ldr	r3, [pc, #472]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a75      	ldr	r2, [pc, #468]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b73      	ldr	r3, [pc, #460]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a72      	ldr	r2, [pc, #456]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0xcc>
 800385c:	4b6f      	ldr	r3, [pc, #444]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6e      	ldr	r2, [pc, #440]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b6c      	ldr	r3, [pc, #432]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6b      	ldr	r2, [pc, #428]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fe f8dc 	bl	8001a38 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003884:	f7fe f8d8 	bl	8001a38 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	@ 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e21f      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b61      	ldr	r3, [pc, #388]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0xdc>
 80038a2:	e014      	b.n	80038ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fe f8c8 	bl	8001a38 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fe f8c4 	bl	8001a38 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	@ 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e20b      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	4b57      	ldr	r3, [pc, #348]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x104>
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d06f      	beq.n	80039ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038da:	4b50      	ldr	r3, [pc, #320]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d017      	beq.n	8003916 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038e6:	4b4d      	ldr	r3, [pc, #308]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d105      	bne.n	80038fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038f2:	4b4a      	ldr	r3, [pc, #296]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fe:	4b47      	ldr	r3, [pc, #284]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d11c      	bne.n	8003944 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390a:	4b44      	ldr	r3, [pc, #272]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d116      	bne.n	8003944 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003916:	4b41      	ldr	r3, [pc, #260]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_RCC_OscConfig+0x186>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e1d3      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4937      	ldr	r1, [pc, #220]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003942:	e03a      	b.n	80039ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d020      	beq.n	800398e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800394c:	4b34      	ldr	r3, [pc, #208]	@ (8003a20 <HAL_RCC_OscConfig+0x278>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fe f871 	bl	8001a38 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800395a:	f7fe f86d 	bl	8001a38 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e1b4      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	4b28      	ldr	r3, [pc, #160]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4925      	ldr	r1, [pc, #148]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]
 800398c:	e015      	b.n	80039ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398e:	4b24      	ldr	r3, [pc, #144]	@ (8003a20 <HAL_RCC_OscConfig+0x278>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fe f850 	bl	8001a38 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800399c:	f7fe f84c 	bl	8001a38 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e193      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ae:	4b1b      	ldr	r3, [pc, #108]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d036      	beq.n	8003a34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ce:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fe f830 	bl	8001a38 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039dc:	f7fe f82c 	bl	8001a38 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e173      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ee:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCC_OscConfig+0x274>)
 80039f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x234>
 80039fa:	e01b      	b.n	8003a34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039fc:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <HAL_RCC_OscConfig+0x27c>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a02:	f7fe f819 	bl	8001a38 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a08:	e00e      	b.n	8003a28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a0a:	f7fe f815 	bl	8001a38 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d907      	bls.n	8003a28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e15c      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	42470000 	.word	0x42470000
 8003a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a28:	4b8a      	ldr	r3, [pc, #552]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1ea      	bne.n	8003a0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 8097 	beq.w	8003b70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a46:	4b83      	ldr	r3, [pc, #524]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	4b7f      	ldr	r3, [pc, #508]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a62:	4b7c      	ldr	r3, [pc, #496]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a72:	4b79      	ldr	r3, [pc, #484]	@ (8003c58 <HAL_RCC_OscConfig+0x4b0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d118      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7e:	4b76      	ldr	r3, [pc, #472]	@ (8003c58 <HAL_RCC_OscConfig+0x4b0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a75      	ldr	r2, [pc, #468]	@ (8003c58 <HAL_RCC_OscConfig+0x4b0>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8a:	f7fd ffd5 	bl	8001a38 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fd ffd1 	bl	8001a38 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e118      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c58 <HAL_RCC_OscConfig+0x4b0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x31e>
 8003ab8:	4b66      	ldr	r3, [pc, #408]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	4a65      	ldr	r2, [pc, #404]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac4:	e01c      	b.n	8003b00 <HAL_RCC_OscConfig+0x358>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x340>
 8003ace:	4b61      	ldr	r3, [pc, #388]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad2:	4a60      	ldr	r2, [pc, #384]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003ad4:	f043 0304 	orr.w	r3, r3, #4
 8003ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ada:	4b5e      	ldr	r3, [pc, #376]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ade:	4a5d      	ldr	r2, [pc, #372]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCC_OscConfig+0x358>
 8003ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	4a59      	ldr	r2, [pc, #356]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af4:	4b57      	ldr	r3, [pc, #348]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af8:	4a56      	ldr	r2, [pc, #344]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003afa:	f023 0304 	bic.w	r3, r3, #4
 8003afe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d015      	beq.n	8003b34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fd ff96 	bl	8001a38 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fd ff92 	bl	8001a38 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e0d7      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b26:	4b4b      	ldr	r3, [pc, #300]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0ee      	beq.n	8003b10 <HAL_RCC_OscConfig+0x368>
 8003b32:	e014      	b.n	8003b5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fd ff80 	bl	8001a38 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3c:	f7fd ff7c 	bl	8001a38 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0c1      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b52:	4b40      	ldr	r3, [pc, #256]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1ee      	bne.n	8003b3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b64:	4b3b      	ldr	r3, [pc, #236]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b68:	4a3a      	ldr	r2, [pc, #232]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80ad 	beq.w	8003cd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b7a:	4b36      	ldr	r3, [pc, #216]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d060      	beq.n	8003c48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d145      	bne.n	8003c1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b33      	ldr	r3, [pc, #204]	@ (8003c5c <HAL_RCC_OscConfig+0x4b4>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd ff50 	bl	8001a38 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd ff4c 	bl	8001a38 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e093      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	4b29      	ldr	r3, [pc, #164]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69da      	ldr	r2, [r3, #28]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	041b      	lsls	r3, r3, #16
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	071b      	lsls	r3, r3, #28
 8003be6:	491b      	ldr	r1, [pc, #108]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bec:	4b1b      	ldr	r3, [pc, #108]	@ (8003c5c <HAL_RCC_OscConfig+0x4b4>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fd ff21 	bl	8001a38 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bfa:	f7fd ff1d 	bl	8001a38 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e064      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0c:	4b11      	ldr	r3, [pc, #68]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x452>
 8003c18:	e05c      	b.n	8003cd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <HAL_RCC_OscConfig+0x4b4>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fd ff0a 	bl	8001a38 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fd ff06 	bl	8001a38 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e04d      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <HAL_RCC_OscConfig+0x4ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x480>
 8003c46:	e045      	b.n	8003cd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e040      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40007000 	.word	0x40007000
 8003c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c60:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce0 <HAL_RCC_OscConfig+0x538>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d030      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d129      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d122      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c90:	4013      	ands	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d119      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d10f      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d107      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800

08003ce4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e07b      	b.n	8003dee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d108      	bne.n	8003d10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d06:	d009      	beq.n	8003d1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	61da      	str	r2, [r3, #28]
 8003d0e:	e005      	b.n	8003d1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd fd06 	bl	8001748 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da0:	ea42 0103 	orr.w	r1, r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	f003 0104 	and.w	r1, r3, #4
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	f003 0210 	and.w	r2, r3, #16
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ddc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b088      	sub	sp, #32
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_SPI_Transmit+0x22>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e12d      	b.n	8004074 <HAL_SPI_Transmit+0x27e>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e20:	f7fd fe0a 	bl	8001a38 <HAL_GetTick>
 8003e24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d002      	beq.n	8003e3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
 8003e38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e3a:	e116      	b.n	800406a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_SPI_Transmit+0x52>
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e4c:	e10d      	b.n	800406a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2203      	movs	r2, #3
 8003e52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	88fa      	ldrh	r2, [r7, #6]
 8003e6c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e94:	d10f      	bne.n	8003eb6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ea4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003eb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec0:	2b40      	cmp	r3, #64	@ 0x40
 8003ec2:	d007      	beq.n	8003ed4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003edc:	d14f      	bne.n	8003f7e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_SPI_Transmit+0xf6>
 8003ee6:	8afb      	ldrh	r3, [r7, #22]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d142      	bne.n	8003f72 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	881a      	ldrh	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	1c9a      	adds	r2, r3, #2
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f10:	e02f      	b.n	8003f72 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d112      	bne.n	8003f46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f24:	881a      	ldrh	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f30:	1c9a      	adds	r2, r3, #2
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f44:	e015      	b.n	8003f72 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f46:	f7fd fd77 	bl	8001a38 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d803      	bhi.n	8003f5e <HAL_SPI_Transmit+0x168>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d102      	bne.n	8003f64 <HAL_SPI_Transmit+0x16e>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003f70:	e07b      	b.n	800406a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ca      	bne.n	8003f12 <HAL_SPI_Transmit+0x11c>
 8003f7c:	e050      	b.n	8004020 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_Transmit+0x196>
 8003f86:	8afb      	ldrh	r3, [r7, #22]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d144      	bne.n	8004016 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	7812      	ldrb	r2, [r2, #0]
 8003f98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fb2:	e030      	b.n	8004016 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d113      	bne.n	8003fea <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	7812      	ldrb	r2, [r2, #0]
 8003fce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003fe8:	e015      	b.n	8004016 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fea:	f7fd fd25 	bl	8001a38 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d803      	bhi.n	8004002 <HAL_SPI_Transmit+0x20c>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004000:	d102      	bne.n	8004008 <HAL_SPI_Transmit+0x212>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004014:	e029      	b.n	800406a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1c9      	bne.n	8003fb4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	6839      	ldr	r1, [r7, #0]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fbed 	bl	8004804 <SPI_EndRxTxTransaction>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e003      	b.n	800406a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004072:	7ffb      	ldrb	r3, [r7, #31]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d002      	beq.n	80040a2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800409c:	2302      	movs	r3, #2
 800409e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040a0:	e0fb      	b.n	800429a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040aa:	d112      	bne.n	80040d2 <HAL_SPI_Receive+0x56>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10e      	bne.n	80040d2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2204      	movs	r2, #4
 80040b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	4613      	mov	r3, r2
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f8ef 	bl	80042ac <HAL_SPI_TransmitReceive>
 80040ce:	4603      	mov	r3, r0
 80040d0:	e0e8      	b.n	80042a4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_SPI_Receive+0x64>
 80040dc:	2302      	movs	r3, #2
 80040de:	e0e1      	b.n	80042a4 <HAL_SPI_Receive+0x228>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040e8:	f7fd fca6 	bl	8001a38 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_SPI_Receive+0x7e>
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040fe:	e0cc      	b.n	800429a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2204      	movs	r2, #4
 8004104:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004146:	d10f      	bne.n	8004168 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004156:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004166:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004172:	2b40      	cmp	r3, #64	@ 0x40
 8004174:	d007      	beq.n	8004186 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004184:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d16a      	bne.n	8004264 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800418e:	e032      	b.n	80041f6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d115      	bne.n	80041ca <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f103 020c 	add.w	r2, r3, #12
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041aa:	7812      	ldrb	r2, [r2, #0]
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041c8:	e015      	b.n	80041f6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ca:	f7fd fc35 	bl	8001a38 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d803      	bhi.n	80041e2 <HAL_SPI_Receive+0x166>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d102      	bne.n	80041e8 <HAL_SPI_Receive+0x16c>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80041f4:	e051      	b.n	800429a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1c7      	bne.n	8004190 <HAL_SPI_Receive+0x114>
 8004200:	e035      	b.n	800426e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d113      	bne.n	8004238 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421a:	b292      	uxth	r2, r2
 800421c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004222:	1c9a      	adds	r2, r3, #2
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004236:	e015      	b.n	8004264 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004238:	f7fd fbfe 	bl	8001a38 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d803      	bhi.n	8004250 <HAL_SPI_Receive+0x1d4>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d102      	bne.n	8004256 <HAL_SPI_Receive+0x1da>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004262:	e01a      	b.n	800429a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1c9      	bne.n	8004202 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	6839      	ldr	r1, [r7, #0]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fa60 	bl	8004738 <SPI_EndRxTransaction>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	75fb      	strb	r3, [r7, #23]
 8004290:	e003      	b.n	800429a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08c      	sub	sp, #48	@ 0x30
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042ba:	2301      	movs	r3, #1
 80042bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x26>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e198      	b.n	8004604 <HAL_SPI_TransmitReceive+0x358>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042da:	f7fd fbad 	bl	8001a38 <HAL_GetTick>
 80042de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042f0:	887b      	ldrh	r3, [r7, #2]
 80042f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d00f      	beq.n	800431c <HAL_SPI_TransmitReceive+0x70>
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004302:	d107      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d103      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x68>
 800430c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004310:	2b04      	cmp	r3, #4
 8004312:	d003      	beq.n	800431c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004314:	2302      	movs	r3, #2
 8004316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800431a:	e16d      	b.n	80045f8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_SPI_TransmitReceive+0x82>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_SPI_TransmitReceive+0x82>
 8004328:	887b      	ldrh	r3, [r7, #2]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004334:	e160      	b.n	80045f8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b04      	cmp	r3, #4
 8004340:	d003      	beq.n	800434a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2205      	movs	r2, #5
 8004346:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	887a      	ldrh	r2, [r7, #2]
 800435a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	887a      	ldrh	r2, [r7, #2]
 8004360:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	887a      	ldrh	r2, [r7, #2]
 800436c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	887a      	ldrh	r2, [r7, #2]
 8004372:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438a:	2b40      	cmp	r3, #64	@ 0x40
 800438c:	d007      	beq.n	800439e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800439c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043a6:	d17c      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x10a>
 80043b0:	8b7b      	ldrh	r3, [r7, #26]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d16a      	bne.n	800448c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ba:	881a      	ldrh	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c6:	1c9a      	adds	r2, r3, #2
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043da:	e057      	b.n	800448c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d11b      	bne.n	8004422 <HAL_SPI_TransmitReceive+0x176>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d016      	beq.n	8004422 <HAL_SPI_TransmitReceive+0x176>
 80043f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d113      	bne.n	8004422 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	881a      	ldrh	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	1c9a      	adds	r2, r3, #2
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	d119      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x1b8>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d014      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	b292      	uxth	r2, r2
 8004446:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444c:	1c9a      	adds	r2, r3, #2
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004460:	2301      	movs	r3, #1
 8004462:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004464:	f7fd fae8 	bl	8001a38 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004470:	429a      	cmp	r2, r3
 8004472:	d80b      	bhi.n	800448c <HAL_SPI_TransmitReceive+0x1e0>
 8004474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d007      	beq.n	800448c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800448a:	e0b5      	b.n	80045f8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1a2      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x130>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d19d      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x130>
 80044a0:	e080      	b.n	80045a4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_TransmitReceive+0x204>
 80044aa:	8b7b      	ldrh	r3, [r7, #26]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d16f      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	7812      	ldrb	r2, [r2, #0]
 80044bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044d6:	e05b      	b.n	8004590 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d11c      	bne.n	8004520 <HAL_SPI_TransmitReceive+0x274>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d017      	beq.n	8004520 <HAL_SPI_TransmitReceive+0x274>
 80044f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d114      	bne.n	8004520 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	7812      	ldrb	r2, [r2, #0]
 8004502:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d119      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x2b6>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d014      	beq.n	8004562 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800455e:	2301      	movs	r3, #1
 8004560:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004562:	f7fd fa69 	bl	8001a38 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800456e:	429a      	cmp	r2, r3
 8004570:	d803      	bhi.n	800457a <HAL_SPI_TransmitReceive+0x2ce>
 8004572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d102      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x2d4>
 800457a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457c:	2b00      	cmp	r3, #0
 800457e:	d107      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800458e:	e033      	b.n	80045f8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d19e      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x22c>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d199      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f92b 	bl	8004804 <SPI_EndRxTxTransaction>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d006      	beq.n	80045c2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80045c0:	e01a      	b.n	80045f8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ee:	e003      	b.n	80045f8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004600:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004604:	4618      	mov	r0, r3
 8004606:	3730      	adds	r7, #48	@ 0x30
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800461a:	b2db      	uxtb	r3, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4613      	mov	r3, r2
 8004636:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004638:	f7fd f9fe 	bl	8001a38 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	4413      	add	r3, r2
 8004646:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004648:	f7fd f9f6 	bl	8001a38 <HAL_GetTick>
 800464c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800464e:	4b39      	ldr	r3, [pc, #228]	@ (8004734 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	015b      	lsls	r3, r3, #5
 8004654:	0d1b      	lsrs	r3, r3, #20
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	fb02 f303 	mul.w	r3, r2, r3
 800465c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800465e:	e054      	b.n	800470a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d050      	beq.n	800470a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004668:	f7fd f9e6 	bl	8001a38 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	429a      	cmp	r2, r3
 8004676:	d902      	bls.n	800467e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d13d      	bne.n	80046fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800468c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004696:	d111      	bne.n	80046bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a0:	d004      	beq.n	80046ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046aa:	d107      	bne.n	80046bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046c4:	d10f      	bne.n	80046e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e017      	b.n	800472a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	3b01      	subs	r3, #1
 8004708:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4013      	ands	r3, r2
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	429a      	cmp	r2, r3
 8004718:	bf0c      	ite	eq
 800471a:	2301      	moveq	r3, #1
 800471c:	2300      	movne	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	429a      	cmp	r2, r3
 8004726:	d19b      	bne.n	8004660 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000000 	.word	0x20000000

08004738 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800474c:	d111      	bne.n	8004772 <SPI_EndRxTransaction+0x3a>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004756:	d004      	beq.n	8004762 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004760:	d107      	bne.n	8004772 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004770:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800477a:	d12a      	bne.n	80047d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004784:	d012      	beq.n	80047ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2200      	movs	r2, #0
 800478e:	2180      	movs	r1, #128	@ 0x80
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff ff49 	bl	8004628 <SPI_WaitFlagStateUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d02d      	beq.n	80047f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a0:	f043 0220 	orr.w	r2, r3, #32
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e026      	b.n	80047fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2200      	movs	r2, #0
 80047b4:	2101      	movs	r1, #1
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f7ff ff36 	bl	8004628 <SPI_WaitFlagStateUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01a      	beq.n	80047f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c6:	f043 0220 	orr.w	r2, r3, #32
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e013      	b.n	80047fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2200      	movs	r2, #0
 80047da:	2101      	movs	r1, #1
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff ff23 	bl	8004628 <SPI_WaitFlagStateUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ec:	f043 0220 	orr.w	r2, r3, #32
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e000      	b.n	80047fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2201      	movs	r2, #1
 8004818:	2102      	movs	r1, #2
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7ff ff04 	bl	8004628 <SPI_WaitFlagStateUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482a:	f043 0220 	orr.w	r2, r3, #32
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e032      	b.n	800489c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004836:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <SPI_EndRxTxTransaction+0xa0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1b      	ldr	r2, [pc, #108]	@ (80048a8 <SPI_EndRxTxTransaction+0xa4>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	0d5b      	lsrs	r3, r3, #21
 8004842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004854:	d112      	bne.n	800487c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	@ 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7ff fee1 	bl	8004628 <SPI_WaitFlagStateUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d016      	beq.n	800489a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004870:	f043 0220 	orr.w	r2, r3, #32
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e00f      	b.n	800489c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	3b01      	subs	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004892:	2b80      	cmp	r3, #128	@ 0x80
 8004894:	d0f2      	beq.n	800487c <SPI_EndRxTxTransaction+0x78>
 8004896:	e000      	b.n	800489a <SPI_EndRxTxTransaction+0x96>
        break;
 8004898:	bf00      	nop
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000000 	.word	0x20000000
 80048a8:	165e9f81 	.word	0x165e9f81

080048ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e042      	b.n	8004944 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fc ff80 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2224      	movs	r2, #36	@ 0x24
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f973 	bl	8004bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	@ 0x28
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b20      	cmp	r3, #32
 800496a:	d175      	bne.n	8004a58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_UART_Transmit+0x2c>
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e06e      	b.n	8004a5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2221      	movs	r2, #33	@ 0x21
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800498a:	f7fd f855 	bl	8001a38 <HAL_GetTick>
 800498e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	88fa      	ldrh	r2, [r7, #6]
 800499a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a4:	d108      	bne.n	80049b8 <HAL_UART_Transmit+0x6c>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	e003      	b.n	80049c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049c0:	e02e      	b.n	8004a20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2180      	movs	r1, #128	@ 0x80
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f848 	bl	8004a62 <UART_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e03a      	b.n	8004a5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	3302      	adds	r3, #2
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	e007      	b.n	8004a12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1cb      	bne.n	80049c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2200      	movs	r2, #0
 8004a32:	2140      	movs	r1, #64	@ 0x40
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f814 	bl	8004a62 <UART_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e006      	b.n	8004a5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e000      	b.n	8004a5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a58:	2302      	movs	r3, #2
  }
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a72:	e03b      	b.n	8004aec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d037      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7c:	f7fc ffdc 	bl	8001a38 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	6a3a      	ldr	r2, [r7, #32]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d302      	bcc.n	8004a92 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e03a      	b.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d023      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0x8a>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b80      	cmp	r3, #128	@ 0x80
 8004aa8:	d020      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0x8a>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b40      	cmp	r3, #64	@ 0x40
 8004aae:	d01d      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d116      	bne.n	8004aec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f81d 	bl	8004b14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2208      	movs	r2, #8
 8004ade:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e00f      	b.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4013      	ands	r3, r2
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d0b4      	beq.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b095      	sub	sp, #84	@ 0x54
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e5      	bne.n	8004b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3314      	adds	r3, #20
 8004b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e5      	bne.n	8004b50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d119      	bne.n	8004bc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f023 0310 	bic.w	r3, r3, #16
 8004ba2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bac:	61ba      	str	r2, [r7, #24]
 8004bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6979      	ldr	r1, [r7, #20]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bce:	bf00      	nop
 8004bd0:	3754      	adds	r7, #84	@ 0x54
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be0:	b0c0      	sub	sp, #256	@ 0x100
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	68d9      	ldr	r1, [r3, #12]
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	ea40 0301 	orr.w	r3, r0, r1
 8004c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c34:	f021 010c 	bic.w	r1, r1, #12
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c42:	430b      	orrs	r3, r1
 8004c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c56:	6999      	ldr	r1, [r3, #24]
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	ea40 0301 	orr.w	r3, r0, r1
 8004c62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4b8f      	ldr	r3, [pc, #572]	@ (8004ea8 <UART_SetConfig+0x2cc>)
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d005      	beq.n	8004c7c <UART_SetConfig+0xa0>
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b8d      	ldr	r3, [pc, #564]	@ (8004eac <UART_SetConfig+0x2d0>)
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d104      	bne.n	8004c86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c7c:	f7fe fb50 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 8004c80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c84:	e003      	b.n	8004c8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c86:	f7fe fb37 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8004c8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c98:	f040 810c 	bne.w	8004eb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ca6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004caa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004cae:	4622      	mov	r2, r4
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	1891      	adds	r1, r2, r2
 8004cb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004cb6:	415b      	adcs	r3, r3
 8004cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	eb12 0801 	adds.w	r8, r2, r1
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	eb43 0901 	adc.w	r9, r3, r1
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cde:	4690      	mov	r8, r2
 8004ce0:	4699      	mov	r9, r3
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	eb18 0303 	adds.w	r3, r8, r3
 8004ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cec:	462b      	mov	r3, r5
 8004cee:	eb49 0303 	adc.w	r3, r9, r3
 8004cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	18db      	adds	r3, r3, r3
 8004d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d10:	4613      	mov	r3, r2
 8004d12:	eb42 0303 	adc.w	r3, r2, r3
 8004d16:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d20:	f7fb fa70 	bl	8000204 <__aeabi_uldivmod>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4b61      	ldr	r3, [pc, #388]	@ (8004eb0 <UART_SetConfig+0x2d4>)
 8004d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	011c      	lsls	r4, r3, #4
 8004d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d44:	4642      	mov	r2, r8
 8004d46:	464b      	mov	r3, r9
 8004d48:	1891      	adds	r1, r2, r2
 8004d4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d4c:	415b      	adcs	r3, r3
 8004d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d54:	4641      	mov	r1, r8
 8004d56:	eb12 0a01 	adds.w	sl, r2, r1
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d74:	4692      	mov	sl, r2
 8004d76:	469b      	mov	fp, r3
 8004d78:	4643      	mov	r3, r8
 8004d7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d82:	464b      	mov	r3, r9
 8004d84:	eb4b 0303 	adc.w	r3, fp, r3
 8004d88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004da0:	460b      	mov	r3, r1
 8004da2:	18db      	adds	r3, r3, r3
 8004da4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004da6:	4613      	mov	r3, r2
 8004da8:	eb42 0303 	adc.w	r3, r2, r3
 8004dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004db6:	f7fb fa25 	bl	8000204 <__aeabi_uldivmod>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb0 <UART_SetConfig+0x2d4>)
 8004dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	2264      	movs	r2, #100	@ 0x64
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	1acb      	subs	r3, r1, r3
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004dd6:	4b36      	ldr	r3, [pc, #216]	@ (8004eb0 <UART_SetConfig+0x2d4>)
 8004dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004de4:	441c      	add	r4, r3
 8004de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004df0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004df4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	1891      	adds	r1, r2, r2
 8004dfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e00:	415b      	adcs	r3, r3
 8004e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e08:	4641      	mov	r1, r8
 8004e0a:	1851      	adds	r1, r2, r1
 8004e0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e0e:	4649      	mov	r1, r9
 8004e10:	414b      	adcs	r3, r1
 8004e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e20:	4659      	mov	r1, fp
 8004e22:	00cb      	lsls	r3, r1, #3
 8004e24:	4651      	mov	r1, sl
 8004e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	00ca      	lsls	r2, r1, #3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	4603      	mov	r3, r0
 8004e34:	4642      	mov	r2, r8
 8004e36:	189b      	adds	r3, r3, r2
 8004e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	460a      	mov	r2, r1
 8004e40:	eb42 0303 	adc.w	r3, r2, r3
 8004e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	18db      	adds	r3, r3, r3
 8004e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e62:	4613      	mov	r3, r2
 8004e64:	eb42 0303 	adc.w	r3, r2, r3
 8004e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e72:	f7fb f9c7 	bl	8000204 <__aeabi_uldivmod>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <UART_SetConfig+0x2d4>)
 8004e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	2164      	movs	r1, #100	@ 0x64
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	3332      	adds	r3, #50	@ 0x32
 8004e8e:	4a08      	ldr	r2, [pc, #32]	@ (8004eb0 <UART_SetConfig+0x2d4>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	f003 0207 	and.w	r2, r3, #7
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4422      	add	r2, r4
 8004ea2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ea4:	e106      	b.n	80050b4 <UART_SetConfig+0x4d8>
 8004ea6:	bf00      	nop
 8004ea8:	40011000 	.word	0x40011000
 8004eac:	40011400 	.word	0x40011400
 8004eb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ebe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ec6:	4642      	mov	r2, r8
 8004ec8:	464b      	mov	r3, r9
 8004eca:	1891      	adds	r1, r2, r2
 8004ecc:	6239      	str	r1, [r7, #32]
 8004ece:	415b      	adcs	r3, r3
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ed6:	4641      	mov	r1, r8
 8004ed8:	1854      	adds	r4, r2, r1
 8004eda:	4649      	mov	r1, r9
 8004edc:	eb43 0501 	adc.w	r5, r3, r1
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	00eb      	lsls	r3, r5, #3
 8004eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eee:	00e2      	lsls	r2, r4, #3
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	461d      	mov	r5, r3
 8004ef4:	4643      	mov	r3, r8
 8004ef6:	18e3      	adds	r3, r4, r3
 8004ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004efc:	464b      	mov	r3, r9
 8004efe:	eb45 0303 	adc.w	r3, r5, r3
 8004f02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f22:	4629      	mov	r1, r5
 8004f24:	008b      	lsls	r3, r1, #2
 8004f26:	4621      	mov	r1, r4
 8004f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	008a      	lsls	r2, r1, #2
 8004f30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f34:	f7fb f966 	bl	8000204 <__aeabi_uldivmod>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4b60      	ldr	r3, [pc, #384]	@ (80050c0 <UART_SetConfig+0x4e4>)
 8004f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	011c      	lsls	r4, r3, #4
 8004f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f58:	4642      	mov	r2, r8
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	1891      	adds	r1, r2, r2
 8004f5e:	61b9      	str	r1, [r7, #24]
 8004f60:	415b      	adcs	r3, r3
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f68:	4641      	mov	r1, r8
 8004f6a:	1851      	adds	r1, r2, r1
 8004f6c:	6139      	str	r1, [r7, #16]
 8004f6e:	4649      	mov	r1, r9
 8004f70:	414b      	adcs	r3, r1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f80:	4659      	mov	r1, fp
 8004f82:	00cb      	lsls	r3, r1, #3
 8004f84:	4651      	mov	r1, sl
 8004f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f8a:	4651      	mov	r1, sl
 8004f8c:	00ca      	lsls	r2, r1, #3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	4619      	mov	r1, r3
 8004f92:	4603      	mov	r3, r0
 8004f94:	4642      	mov	r2, r8
 8004f96:	189b      	adds	r3, r3, r2
 8004f98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	460a      	mov	r2, r1
 8004fa0:	eb42 0303 	adc.w	r3, r2, r3
 8004fa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	008b      	lsls	r3, r1, #2
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fca:	4641      	mov	r1, r8
 8004fcc:	008a      	lsls	r2, r1, #2
 8004fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fd2:	f7fb f917 	bl	8000204 <__aeabi_uldivmod>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4b38      	ldr	r3, [pc, #224]	@ (80050c0 <UART_SetConfig+0x4e4>)
 8004fde:	fba3 2301 	umull	r2, r3, r3, r1
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2264      	movs	r2, #100	@ 0x64
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	1acb      	subs	r3, r1, r3
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	3332      	adds	r3, #50	@ 0x32
 8004ff0:	4a33      	ldr	r2, [pc, #204]	@ (80050c0 <UART_SetConfig+0x4e4>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ffc:	441c      	add	r4, r3
 8004ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005002:	2200      	movs	r2, #0
 8005004:	673b      	str	r3, [r7, #112]	@ 0x70
 8005006:	677a      	str	r2, [r7, #116]	@ 0x74
 8005008:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	1891      	adds	r1, r2, r2
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	415b      	adcs	r3, r3
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800501c:	4641      	mov	r1, r8
 800501e:	1851      	adds	r1, r2, r1
 8005020:	6039      	str	r1, [r7, #0]
 8005022:	4649      	mov	r1, r9
 8005024:	414b      	adcs	r3, r1
 8005026:	607b      	str	r3, [r7, #4]
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005034:	4659      	mov	r1, fp
 8005036:	00cb      	lsls	r3, r1, #3
 8005038:	4651      	mov	r1, sl
 800503a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800503e:	4651      	mov	r1, sl
 8005040:	00ca      	lsls	r2, r1, #3
 8005042:	4610      	mov	r0, r2
 8005044:	4619      	mov	r1, r3
 8005046:	4603      	mov	r3, r0
 8005048:	4642      	mov	r2, r8
 800504a:	189b      	adds	r3, r3, r2
 800504c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800504e:	464b      	mov	r3, r9
 8005050:	460a      	mov	r2, r1
 8005052:	eb42 0303 	adc.w	r3, r2, r3
 8005056:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	663b      	str	r3, [r7, #96]	@ 0x60
 8005062:	667a      	str	r2, [r7, #100]	@ 0x64
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005070:	4649      	mov	r1, r9
 8005072:	008b      	lsls	r3, r1, #2
 8005074:	4641      	mov	r1, r8
 8005076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800507a:	4641      	mov	r1, r8
 800507c:	008a      	lsls	r2, r1, #2
 800507e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005082:	f7fb f8bf 	bl	8000204 <__aeabi_uldivmod>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4b0d      	ldr	r3, [pc, #52]	@ (80050c0 <UART_SetConfig+0x4e4>)
 800508c:	fba3 1302 	umull	r1, r3, r3, r2
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	2164      	movs	r1, #100	@ 0x64
 8005094:	fb01 f303 	mul.w	r3, r1, r3
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	3332      	adds	r3, #50	@ 0x32
 800509e:	4a08      	ldr	r2, [pc, #32]	@ (80050c0 <UART_SetConfig+0x4e4>)
 80050a0:	fba2 2303 	umull	r2, r3, r2, r3
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	f003 020f 	and.w	r2, r3, #15
 80050aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4422      	add	r2, r4
 80050b2:	609a      	str	r2, [r3, #8]
}
 80050b4:	bf00      	nop
 80050b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050ba:	46bd      	mov	sp, r7
 80050bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c0:	51eb851f 	.word	0x51eb851f

080050c4 <memset>:
 80050c4:	4402      	add	r2, r0
 80050c6:	4603      	mov	r3, r0
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d100      	bne.n	80050ce <memset+0xa>
 80050cc:	4770      	bx	lr
 80050ce:	f803 1b01 	strb.w	r1, [r3], #1
 80050d2:	e7f9      	b.n	80050c8 <memset+0x4>

080050d4 <__libc_init_array>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	4d0d      	ldr	r5, [pc, #52]	@ (800510c <__libc_init_array+0x38>)
 80050d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005110 <__libc_init_array+0x3c>)
 80050da:	1b64      	subs	r4, r4, r5
 80050dc:	10a4      	asrs	r4, r4, #2
 80050de:	2600      	movs	r6, #0
 80050e0:	42a6      	cmp	r6, r4
 80050e2:	d109      	bne.n	80050f8 <__libc_init_array+0x24>
 80050e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005114 <__libc_init_array+0x40>)
 80050e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005118 <__libc_init_array+0x44>)
 80050e8:	f000 f818 	bl	800511c <_init>
 80050ec:	1b64      	subs	r4, r4, r5
 80050ee:	10a4      	asrs	r4, r4, #2
 80050f0:	2600      	movs	r6, #0
 80050f2:	42a6      	cmp	r6, r4
 80050f4:	d105      	bne.n	8005102 <__libc_init_array+0x2e>
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fc:	4798      	blx	r3
 80050fe:	3601      	adds	r6, #1
 8005100:	e7ee      	b.n	80050e0 <__libc_init_array+0xc>
 8005102:	f855 3b04 	ldr.w	r3, [r5], #4
 8005106:	4798      	blx	r3
 8005108:	3601      	adds	r6, #1
 800510a:	e7f2      	b.n	80050f2 <__libc_init_array+0x1e>
 800510c:	080051d8 	.word	0x080051d8
 8005110:	080051d8 	.word	0x080051d8
 8005114:	080051d8 	.word	0x080051d8
 8005118:	080051dc 	.word	0x080051dc

0800511c <_init>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	bf00      	nop
 8005120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005122:	bc08      	pop	{r3}
 8005124:	469e      	mov	lr, r3
 8005126:	4770      	bx	lr

08005128 <_fini>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	bf00      	nop
 800512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512e:	bc08      	pop	{r3}
 8005130:	469e      	mov	lr, r3
 8005132:	4770      	bx	lr
