
Second_Nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c04  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002dc8  08002dc8  00003dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de0  08002de0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002de0  08002de0  00003de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002de8  08002de8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de8  08002de8  00003de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dec  08002dec  00003dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002df0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002dfc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002dfc  000040ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a37d  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4d  00000000  00000000  0000e3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00010008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000670  00000000  00000000  00010888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e04  00000000  00000000  00010ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc2f  00000000  00000000  00031cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7347  00000000  00000000  0003d92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104c72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000215c  00000000  00000000  00104cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00106e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002db0 	.word	0x08002db0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002db0 	.word	0x08002db0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <CanInit>:
 *  Functions
 *
 *
 */
void CanInit(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	/* Executed once at startup. */
	HAL_CAN_Start(&hcan2);
 80004f8:	4804      	ldr	r0, [pc, #16]	@ (800050c <CanInit+0x18>)
 80004fa:	f000 fd06 	bl	8000f0a <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80004fe:	2102      	movs	r1, #2
 8000500:	4802      	ldr	r0, [pc, #8]	@ (800050c <CanInit+0x18>)
 8000502:	f000 fe68 	bl	80011d6 <HAL_CAN_ActivateNotification>
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000038 	.word	0x20000038

08000510 <Receive_CAN_Message>:

void Receive_CAN_Message(CAN_HandleTypeDef *hcan)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08c      	sub	sp, #48	@ 0x30
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8]; // Buffer to store received CAN data

	// Check if there is a CAN message available on CAN2
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	f107 0214 	add.w	r2, r7, #20
 8000520:	2100      	movs	r1, #0
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 fd35 	bl	8000f92 <HAL_CAN_GetRxMessage>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d11e      	bne.n	800056c <Receive_CAN_Message+0x5c>
		// Turn on the built-in LED to indicate successful reception
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Green Led
 800052e:	2201      	movs	r2, #1
 8000530:	2120      	movs	r1, #32
 8000532:	4813      	ldr	r0, [pc, #76]	@ (8000580 <Receive_CAN_Message+0x70>)
 8000534:	f001 fb4a 	bl	8001bcc <HAL_GPIO_WritePin>

		// Process CAN messages based on their IDs
		switch (RxHeader.StdId) {
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	2b33      	cmp	r3, #51	@ 0x33
 800053c:	d002      	beq.n	8000544 <Receive_CAN_Message+0x34>
 800053e:	2b34      	cmp	r3, #52	@ 0x34
 8000540:	d00a      	beq.n	8000558 <Receive_CAN_Message+0x48>
			g.z = (uint8_t) RxData[2];
			break;

		default:
			// Handle other CAN message IDs if needed
			break;
 8000542:	e019      	b.n	8000578 <Receive_CAN_Message+0x68>
			a.x = (uint8_t) RxData[0];
 8000544:	7b3a      	ldrb	r2, [r7, #12]
 8000546:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <Receive_CAN_Message+0x74>)
 8000548:	701a      	strb	r2, [r3, #0]
			a.y = (uint8_t) RxData[1];
 800054a:	7b7a      	ldrb	r2, [r7, #13]
 800054c:	4b0d      	ldr	r3, [pc, #52]	@ (8000584 <Receive_CAN_Message+0x74>)
 800054e:	705a      	strb	r2, [r3, #1]
			a.z = (uint8_t) RxData[2];
 8000550:	7bba      	ldrb	r2, [r7, #14]
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <Receive_CAN_Message+0x74>)
 8000554:	709a      	strb	r2, [r3, #2]
			break;
 8000556:	e00f      	b.n	8000578 <Receive_CAN_Message+0x68>
			g.x = (uint8_t) RxData[0];
 8000558:	7b3a      	ldrb	r2, [r7, #12]
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <Receive_CAN_Message+0x78>)
 800055c:	701a      	strb	r2, [r3, #0]
			g.y = (uint8_t) RxData[1];
 800055e:	7b7a      	ldrb	r2, [r7, #13]
 8000560:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <Receive_CAN_Message+0x78>)
 8000562:	705a      	strb	r2, [r3, #1]
			g.z = (uint8_t) RxData[2];
 8000564:	7bba      	ldrb	r2, [r7, #14]
 8000566:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <Receive_CAN_Message+0x78>)
 8000568:	709a      	strb	r2, [r3, #2]
			break;
 800056a:	e005      	b.n	8000578 <Receive_CAN_Message+0x68>
		}
	}else{
		// Turn off the built-in LED to indicate an error during reception
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2120      	movs	r1, #32
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <Receive_CAN_Message+0x70>)
 8000572:	f001 fb2b 	bl	8001bcc <HAL_GPIO_WritePin>
	}
}
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 800057a:	3730      	adds	r7, #48	@ 0x30
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40020000 	.word	0x40020000
 8000584:	20000028 	.word	0x20000028
 8000588:	2000002c 	.word	0x2000002c

0800058c <SchTimerInterruptCallback>:
 *
 *
 */

void SchTimerInterruptCallback(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	tickCounter++;
 8000590:	4b1a      	ldr	r3, [pc, #104]	@ (80005fc <SchTimerInterruptCallback+0x70>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a19      	ldr	r2, [pc, #100]	@ (80005fc <SchTimerInterruptCallback+0x70>)
 8000598:	6013      	str	r3, [r2, #0]

	// Perform quick tasks every 1 ms
	if (tickCounter % 1 == 0) {
 800059a:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <SchTimerInterruptCallback+0x70>)
 800059c:	681b      	ldr	r3, [r3, #0]
		fastTaskFlag = 1;
 800059e:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <SchTimerInterruptCallback+0x74>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
	}

	// Perform medium tasks every 10 ms
	if (tickCounter % 10 == 0) {
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <SchTimerInterruptCallback+0x70>)
 80005a6:	6819      	ldr	r1, [r3, #0]
 80005a8:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <SchTimerInterruptCallback+0x78>)
 80005aa:	fba3 2301 	umull	r2, r3, r3, r1
 80005ae:	08da      	lsrs	r2, r3, #3
 80005b0:	4613      	mov	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	1aca      	subs	r2, r1, r3
 80005ba:	2a00      	cmp	r2, #0
 80005bc:	d102      	bne.n	80005c4 <SchTimerInterruptCallback+0x38>
		mediumTaskFlag = 1;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <SchTimerInterruptCallback+0x7c>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
	}

	// Perform slow tasks every 100 ms
	if (tickCounter % 100 == 0) {
 80005c4:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <SchTimerInterruptCallback+0x70>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b10      	ldr	r3, [pc, #64]	@ (800060c <SchTimerInterruptCallback+0x80>)
 80005ca:	fba3 1302 	umull	r1, r3, r3, r2
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2164      	movs	r1, #100	@ 0x64
 80005d2:	fb01 f303 	mul.w	r3, r1, r3
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <SchTimerInterruptCallback+0x56>
		slowTaskFlag = 1;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <SchTimerInterruptCallback+0x84>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	// Reset the counter to prevent overflow
	if (tickCounter >= 1000) {
 80005e2:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <SchTimerInterruptCallback+0x70>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005ea:	d302      	bcc.n	80005f2 <SchTimerInterruptCallback+0x66>
		tickCounter = 0;
 80005ec:	4b03      	ldr	r3, [pc, #12]	@ (80005fc <SchTimerInterruptCallback+0x70>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
	}
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	20000030 	.word	0x20000030
 8000600:	20000034 	.word	0x20000034
 8000604:	cccccccd 	.word	0xcccccccd
 8000608:	20000035 	.word	0x20000035
 800060c:	51eb851f 	.word	0x51eb851f
 8000610:	20000036 	.word	0x20000036

08000614 <SchedulerInitFct>:
 *
 *
 */

void SchedulerInitFct(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	// Initialize SysTick to generate an interrupt every 1 ms.
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 360); // Formula for the divider: 72 MHz (of HCLK) / 2 (of APB1 Prescaler) / 1 (of APB2 Prescaler) * 10
 8000618:	f001 fbd8 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 800061c:	4603      	mov	r3, r0
 800061e:	08db      	lsrs	r3, r3, #3
 8000620:	4a0a      	ldr	r2, [pc, #40]	@ (800064c <SchedulerInitFct+0x38>)
 8000622:	fba2 2303 	umull	r2, r3, r2, r3
 8000626:	089b      	lsrs	r3, r3, #2
 8000628:	4618      	mov	r0, r3
 800062a:	f001 f92e 	bl	800188a <HAL_SYSTICK_Config>

	// Initialize other variables and flags if necessary
	tickCounter = 0;
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <SchedulerInitFct+0x3c>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
	fastTaskFlag = 0;
 8000634:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <SchedulerInitFct+0x40>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
	mediumTaskFlag = 0;
 800063a:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <SchedulerInitFct+0x44>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	slowTaskFlag = 0;
 8000640:	4b06      	ldr	r3, [pc, #24]	@ (800065c <SchedulerInitFct+0x48>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	16c16c17 	.word	0x16c16c17
 8000650:	20000030 	.word	0x20000030
 8000654:	20000034 	.word	0x20000034
 8000658:	20000035 	.word	0x20000035
 800065c:	20000036 	.word	0x20000036

08000660 <SchedulerMgmFct>:
 *
 *
 */

void SchedulerMgmFct(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	// Perform quick tasks if the flag is set
	if (fastTaskFlag) {
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <SchedulerMgmFct+0x44>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d004      	beq.n	8000678 <SchedulerMgmFct+0x18>
		fastTaskFlag = 0;
 800066e:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <SchedulerMgmFct+0x44>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
		TaskFast(); // Perform all quick tests
 8000674:	f000 f824 	bl	80006c0 <TaskFast>
	}

	// Perform medium tasks if the flag is set
	if (mediumTaskFlag) {
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <SchedulerMgmFct+0x48>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d004      	beq.n	800068c <SchedulerMgmFct+0x2c>
		mediumTaskFlag = 0;
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <SchedulerMgmFct+0x48>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
		TaskMed(); // Perform all medium-speed tasks
 8000688:	f000 f821 	bl	80006ce <TaskMed>
	}

	// Perform slow tasks if the flag is set
	if (slowTaskFlag) {
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <SchedulerMgmFct+0x4c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d004      	beq.n	80006a0 <SchedulerMgmFct+0x40>
		slowTaskFlag = 0;
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <SchedulerMgmFct+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
		TaskSlow();  // Perform all slow tasks
 800069c:	f000 f81e 	bl	80006dc <TaskSlow>
	}

	// Other error handling tasks
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000034 	.word	0x20000034
 80006a8:	20000035 	.word	0x20000035
 80006ac:	20000036 	.word	0x20000036

080006b0 <TaskInit>:
 *  General Tasks
 *
 *
 */
void TaskInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	/* Executed once at startup. */
	/* TODO Functions for HW/SW initialization. */

	SchedulerInitFct();
 80006b4:	f7ff ffae 	bl	8000614 <SchedulerInitFct>
	CanInit();
 80006b8:	f7ff ff1c 	bl	80004f4 <CanInit>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <TaskFast>:

void TaskFast(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (fast schedulation, e.g. 1 ms). */
	//Receive_CAN_Message(&hcan2);
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <TaskMed>:

void TaskMed(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (medium schedulation, e.g. 10 ms). */

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <TaskSlow>:

void TaskSlow(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	/* TODO functions executed periodically (slow schedulation, e.g. 100 ms). */
	// TODO: Receive_CAN_Message
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Called when the Can receives a message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
	Receive_CAN_Message(hcan);
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff0c 	bl	8000510 <Receive_CAN_Message>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 fa94 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f80c 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f000 f8d6 	bl	80008bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000710:	f000 f8aa 	bl	8000868 <MX_USART2_UART_Init>
  MX_CAN2_Init();
 8000714:	f000 f872 	bl	80007fc <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  TaskInit();
 8000718:	f7ff ffca 	bl	80006b0 <TaskInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SchedulerMgmFct();
 800071c:	f7ff ffa0 	bl	8000660 <SchedulerMgmFct>
 8000720:	e7fc      	b.n	800071c <main+0x1c>
	...

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2234      	movs	r2, #52	@ 0x34
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fb10 	bl	8002d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	4a28      	ldr	r2, [pc, #160]	@ (80007f4 <SystemClock_Config+0xd0>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	@ 0x40
 8000758:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <SystemClock_Config+0xd4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000770:	4a21      	ldr	r2, [pc, #132]	@ (80007f8 <SystemClock_Config+0xd4>)
 8000772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000798:	2308      	movs	r3, #8
 800079a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800079c:	2348      	movs	r3, #72	@ 0x48
 800079e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fd6f 	bl	8002294 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007bc:	f000 f8ec 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2102      	movs	r1, #2
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fa0f 	bl	8001c00 <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007e8:	f000 f8d6 	bl	8000998 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3750      	adds	r7, #80	@ 0x50
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000800:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_CAN2_Init+0x64>)
 8000802:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <MX_CAN2_Init+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 18;
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_CAN2_Init+0x64>)
 8000808:	2212      	movs	r2, #18
 800080a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_CAN2_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_CAN2_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_CAN2_Init+0x64>)
 800081a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800081e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_CAN2_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_CAN2_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_CAN2_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_CAN2_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_CAN2_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_CAN2_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_CAN2_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_CAN2_Init+0x64>)
 800084c:	f000 fa62 	bl	8000d14 <HAL_CAN_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000856:	f000 f89f 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000038 	.word	0x20000038
 8000864:	40006800 	.word	0x40006800

08000868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	@ (80008b8 <MX_USART2_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f001 ff96 	bl	80027d0 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 f875 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000060 	.word	0x20000060
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b2d      	ldr	r3, [pc, #180]	@ (800098c <MX_GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a2c      	ldr	r2, [pc, #176]	@ (800098c <MX_GPIO_Init+0xd0>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b26      	ldr	r3, [pc, #152]	@ (800098c <MX_GPIO_Init+0xd0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a25      	ldr	r2, [pc, #148]	@ (800098c <MX_GPIO_Init+0xd0>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <MX_GPIO_Init+0xd0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <MX_GPIO_Init+0xd0>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <MX_GPIO_Init+0xd0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b18      	ldr	r3, [pc, #96]	@ (800098c <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a17      	ldr	r2, [pc, #92]	@ (800098c <MX_GPIO_Init+0xd0>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2120      	movs	r1, #32
 8000946:	4812      	ldr	r0, [pc, #72]	@ (8000990 <MX_GPIO_Init+0xd4>)
 8000948:	f001 f940 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000952:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	480c      	ldr	r0, [pc, #48]	@ (8000994 <MX_GPIO_Init+0xd8>)
 8000964:	f000 ff9e 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000968:	2320      	movs	r3, #32
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_GPIO_Init+0xd4>)
 8000980:	f000 ff90 	bl	80018a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	@ 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000
 8000994:	40020800 	.word	0x40020800

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <Error_Handler+0x8>

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	4a0f      	ldr	r2, [pc, #60]	@ (80009f0 <HAL_MspInit+0x4c>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ba:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	4a08      	ldr	r2, [pc, #32]	@ (80009f0 <HAL_MspInit+0x4c>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009e2:	2007      	movs	r0, #7
 80009e4:	f000 ff1c 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a24      	ldr	r2, [pc, #144]	@ (8000aa4 <HAL_CAN_MspInit+0xb0>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d141      	bne.n	8000a9a <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a26:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a42:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a14      	ldr	r2, [pc, #80]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a6a:	2360      	movs	r3, #96	@ 0x60
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000a7a:	2309      	movs	r3, #9
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4809      	ldr	r0, [pc, #36]	@ (8000aac <HAL_CAN_MspInit+0xb8>)
 8000a86:	f000 ff0d 	bl	80018a4 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2040      	movs	r0, #64	@ 0x40
 8000a90:	f000 fed1 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000a94:	2040      	movs	r0, #64	@ 0x40
 8000a96:	f000 feea 	bl	800186e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40006800 	.word	0x40006800
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020400 	.word	0x40020400

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	@ 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a19      	ldr	r2, [pc, #100]	@ (8000b34 <HAL_UART_MspInit+0x84>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d12b      	bne.n	8000b2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <HAL_UART_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	4a17      	ldr	r2, [pc, #92]	@ (8000b38 <HAL_UART_MspInit+0x88>)
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <HAL_UART_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a10      	ldr	r2, [pc, #64]	@ (8000b38 <HAL_UART_MspInit+0x88>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <HAL_UART_MspInit+0x8c>)
 8000b26:	f000 febd 	bl	80018a4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	@ 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40004400 	.word	0x40004400
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <NMI_Handler+0x4>

08000b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <MemManage_Handler+0x4>

08000b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b96:	f000 f89d 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SchTimerInterruptCallback();
 8000b9a:	f7ff fcf7 	bl	800058c <SchTimerInterruptCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <CAN2_RX0_IRQHandler+0x10>)
 8000baa:	f000 fb3a 	bl	8001222 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000038 	.word	0x20000038

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000be0:	f7ff ffea 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f002 f8ad 	bl	8002d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fd77 	bl	8000700 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c20:	08002df0 	.word	0x08002df0
  ldr r2, =_sbss
 8000c24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c28:	200000ac 	.word	0x200000ac

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 fde1 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fe9e 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fdf9 	bl	800188a <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 fdc1 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	200000a8 	.word	0x200000a8

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	200000a8 	.word	0x200000a8

08000d14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e0ed      	b.n	8000f02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d102      	bne.n	8000d38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff fe5e 	bl	80009f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f042 0201 	orr.w	r2, r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d48:	f7ff ffd8 	bl	8000cfc <HAL_GetTick>
 8000d4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d4e:	e012      	b.n	8000d76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d50:	f7ff ffd4 	bl	8000cfc <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b0a      	cmp	r3, #10
 8000d5c:	d90b      	bls.n	8000d76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2205      	movs	r2, #5
 8000d6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e0c5      	b.n	8000f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0e5      	beq.n	8000d50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0202 	bic.w	r2, r2, #2
 8000d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d94:	f7ff ffb2 	bl	8000cfc <HAL_GetTick>
 8000d98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d9a:	e012      	b.n	8000dc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d9c:	f7ff ffae 	bl	8000cfc <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b0a      	cmp	r3, #10
 8000da8:	d90b      	bls.n	8000dc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2205      	movs	r2, #5
 8000dba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e09f      	b.n	8000f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1e5      	bne.n	8000d9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7e1b      	ldrb	r3, [r3, #24]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d108      	bne.n	8000dea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e007      	b.n	8000dfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7e5b      	ldrb	r3, [r3, #25]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d108      	bne.n	8000e14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e007      	b.n	8000e24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7e9b      	ldrb	r3, [r3, #26]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d108      	bne.n	8000e3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 0220 	orr.w	r2, r2, #32
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	e007      	b.n	8000e4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0220 	bic.w	r2, r2, #32
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7edb      	ldrb	r3, [r3, #27]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d108      	bne.n	8000e68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0210 	bic.w	r2, r2, #16
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	e007      	b.n	8000e78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0210 	orr.w	r2, r2, #16
 8000e76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7f1b      	ldrb	r3, [r3, #28]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d108      	bne.n	8000e92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f042 0208 	orr.w	r2, r2, #8
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	e007      	b.n	8000ea2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0208 	bic.w	r2, r2, #8
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7f5b      	ldrb	r3, [r3, #29]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d108      	bne.n	8000ebc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f042 0204 	orr.w	r2, r2, #4
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e007      	b.n	8000ecc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0204 	bic.w	r2, r2, #4
 8000eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	ea42 0103 	orr.w	r1, r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	1e5a      	subs	r2, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2201      	movs	r2, #1
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d12e      	bne.n	8000f7c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2202      	movs	r2, #2
 8000f22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0201 	bic.w	r2, r2, #1
 8000f34:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f36:	f7ff fee1 	bl	8000cfc <HAL_GetTick>
 8000f3a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f3c:	e012      	b.n	8000f64 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f3e:	f7ff fedd 	bl	8000cfc <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b0a      	cmp	r3, #10
 8000f4a:	d90b      	bls.n	8000f64 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f50:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2205      	movs	r2, #5
 8000f5c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e012      	b.n	8000f8a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1e5      	bne.n	8000f3e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e006      	b.n	8000f8a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f80:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
  }
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f92:	b480      	push	{r7}
 8000f94:	b087      	sub	sp, #28
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d003      	beq.n	8000fb6 <HAL_CAN_GetRxMessage+0x24>
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	f040 8103 	bne.w	80011bc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10e      	bne.n	8000fda <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d116      	bne.n	8000ff8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e0f7      	b.n	80011ca <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d107      	bne.n	8000ff8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e0e8      	b.n	80011ca <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	331b      	adds	r3, #27
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	4413      	add	r3, r2
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0204 	and.w	r2, r3, #4
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10c      	bne.n	8001030 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	331b      	adds	r3, #27
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	4413      	add	r3, r2
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	0d5b      	lsrs	r3, r3, #21
 8001026:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e00b      	b.n	8001048 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	331b      	adds	r3, #27
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4413      	add	r3, r2
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	08db      	lsrs	r3, r3, #3
 8001040:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	331b      	adds	r3, #27
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	4413      	add	r3, r2
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0202 	and.w	r2, r3, #2
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	331b      	adds	r3, #27
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	4413      	add	r3, r2
 800106a:	3304      	adds	r3, #4
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2208      	movs	r2, #8
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	e00b      	b.n	8001096 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	331b      	adds	r3, #27
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	4413      	add	r3, r2
 800108a:	3304      	adds	r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 020f 	and.w	r2, r3, #15
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	331b      	adds	r3, #27
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	3304      	adds	r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	0a1b      	lsrs	r3, r3, #8
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	331b      	adds	r3, #27
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	4413      	add	r3, r2
 80010ba:	3304      	adds	r3, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0c1b      	lsrs	r3, r3, #16
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	4413      	add	r3, r2
 80010d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	4413      	add	r3, r2
 80010e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0a1a      	lsrs	r2, r3, #8
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	4413      	add	r3, r2
 8001100:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	0c1a      	lsrs	r2, r3, #16
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	3302      	adds	r3, #2
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0e1a      	lsrs	r2, r3, #24
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3303      	adds	r3, #3
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4413      	add	r3, r2
 8001134:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	3304      	adds	r3, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	4413      	add	r3, r2
 800114c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	0a1a      	lsrs	r2, r3, #8
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	3305      	adds	r3, #5
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	4413      	add	r3, r2
 8001166:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	0c1a      	lsrs	r2, r3, #16
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3306      	adds	r3, #6
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	4413      	add	r3, r2
 8001180:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0e1a      	lsrs	r2, r3, #24
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	3307      	adds	r3, #7
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d108      	bne.n	80011a8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f042 0220 	orr.w	r2, r2, #32
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	e007      	b.n	80011b8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0220 	orr.w	r2, r2, #32
 80011b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e006      	b.n	80011ca <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
  }
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d002      	beq.n	80011f4 <HAL_CAN_ActivateNotification+0x1e>
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d109      	bne.n	8001208 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6959      	ldr	r1, [r3, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	e006      	b.n	8001216 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
  }
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b08a      	sub	sp, #40	@ 0x28
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d07c      	beq.n	8001362 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d023      	beq.n	80012ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2201      	movs	r2, #1
 8001278:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f983 	bl	8001590 <HAL_CAN_TxMailbox0CompleteCallback>
 800128a:	e016      	b.n	80012ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b00      	cmp	r3, #0
 8001294:	d004      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
 800129e:	e00c      	b.n	80012ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d004      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012b2:	e002      	b.n	80012ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f989 	bl	80015cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d024      	beq.n	800130e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f963 	bl	80015a4 <HAL_CAN_TxMailbox1CompleteCallback>
 80012de:	e016      	b.n	800130e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012f2:	e00c      	b.n	800130e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
 8001306:	e002      	b.n	800130e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f969 	bl	80015e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d024      	beq.n	8001362 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001320:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f943 	bl	80015b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001332:	e016      	b.n	8001362 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d004      	beq.n	8001348 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
 8001346:	e00c      	b.n	8001362 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d004      	beq.n	800135c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
 800135a:	e002      	b.n	8001362 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f949 	bl	80015f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00c      	beq.n	8001386 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	d007      	beq.n	8001386 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001378:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2210      	movs	r2, #16
 8001384:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00b      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2208      	movs	r2, #8
 80013a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f930 	bl	8001608 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d009      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff f992 	bl	80006ea <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00c      	beq.n	80013ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2210      	movs	r2, #16
 80013e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	f003 0320 	and.w	r3, r3, #32
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00b      	beq.n	800140c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d006      	beq.n	800140c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2208      	movs	r2, #8
 8001404:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f912 	bl	8001630 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800140c:	6a3b      	ldr	r3, [r7, #32]
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	2b00      	cmp	r3, #0
 8001414:	d009      	beq.n	800142a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f8f9 	bl	800161c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00b      	beq.n	800144c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2210      	movs	r2, #16
 8001444:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f8fc 	bl	8001644 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00b      	beq.n	800146e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2208      	movs	r2, #8
 8001466:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f8f5 	bl	8001658 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d07b      	beq.n	8001570 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	2b00      	cmp	r3, #0
 8001480:	d072      	beq.n	8001568 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d043      	beq.n	8001568 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d03e      	beq.n	8001568 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80014f0:	2b60      	cmp	r3, #96	@ 0x60
 80014f2:	d02b      	beq.n	800154c <HAL_CAN_IRQHandler+0x32a>
 80014f4:	2b60      	cmp	r3, #96	@ 0x60
 80014f6:	d82e      	bhi.n	8001556 <HAL_CAN_IRQHandler+0x334>
 80014f8:	2b50      	cmp	r3, #80	@ 0x50
 80014fa:	d022      	beq.n	8001542 <HAL_CAN_IRQHandler+0x320>
 80014fc:	2b50      	cmp	r3, #80	@ 0x50
 80014fe:	d82a      	bhi.n	8001556 <HAL_CAN_IRQHandler+0x334>
 8001500:	2b40      	cmp	r3, #64	@ 0x40
 8001502:	d019      	beq.n	8001538 <HAL_CAN_IRQHandler+0x316>
 8001504:	2b40      	cmp	r3, #64	@ 0x40
 8001506:	d826      	bhi.n	8001556 <HAL_CAN_IRQHandler+0x334>
 8001508:	2b30      	cmp	r3, #48	@ 0x30
 800150a:	d010      	beq.n	800152e <HAL_CAN_IRQHandler+0x30c>
 800150c:	2b30      	cmp	r3, #48	@ 0x30
 800150e:	d822      	bhi.n	8001556 <HAL_CAN_IRQHandler+0x334>
 8001510:	2b10      	cmp	r3, #16
 8001512:	d002      	beq.n	800151a <HAL_CAN_IRQHandler+0x2f8>
 8001514:	2b20      	cmp	r3, #32
 8001516:	d005      	beq.n	8001524 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001518:	e01d      	b.n	8001556 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001522:	e019      	b.n	8001558 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	f043 0310 	orr.w	r3, r3, #16
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800152c:	e014      	b.n	8001558 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001536:	e00f      	b.n	8001558 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001540:	e00a      	b.n	8001558 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800154a:	e005      	b.n	8001558 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001554:	e000      	b.n	8001558 <HAL_CAN_IRQHandler+0x336>
            break;
 8001556:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001566:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2204      	movs	r2, #4
 800156e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001572:	2b00      	cmp	r3, #0
 8001574:	d008      	beq.n	8001588 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f872 	bl	800166c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	@ 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	@ (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	@ (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	@ (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	@ 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	@ (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff29 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff3e 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff8e 	bl	8001774 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff31 	bl	80016e4 <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e165      	b.n	8001b8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	429a      	cmp	r2, r3
 80018da:	f040 8154 	bne.w	8001b86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d005      	beq.n	80018f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d130      	bne.n	8001958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 0201 	and.w	r2, r3, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b03      	cmp	r3, #3
 8001962:	d017      	beq.n	8001994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d123      	bne.n	80019e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80ae 	beq.w	8001b86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ba4 <HAL_GPIO_Init+0x300>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	4a5c      	ldr	r2, [pc, #368]	@ (8001ba4 <HAL_GPIO_Init+0x300>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ba4 <HAL_GPIO_Init+0x300>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a46:	4a58      	ldr	r2, [pc, #352]	@ (8001ba8 <HAL_GPIO_Init+0x304>)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001bac <HAL_GPIO_Init+0x308>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d025      	beq.n	8001abe <HAL_GPIO_Init+0x21a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4e      	ldr	r2, [pc, #312]	@ (8001bb0 <HAL_GPIO_Init+0x30c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d01f      	beq.n	8001aba <HAL_GPIO_Init+0x216>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001bb4 <HAL_GPIO_Init+0x310>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d019      	beq.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4c      	ldr	r2, [pc, #304]	@ (8001bb8 <HAL_GPIO_Init+0x314>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0x20e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001bbc <HAL_GPIO_Init+0x318>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00d      	beq.n	8001aae <HAL_GPIO_Init+0x20a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4a      	ldr	r2, [pc, #296]	@ (8001bc0 <HAL_GPIO_Init+0x31c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d007      	beq.n	8001aaa <HAL_GPIO_Init+0x206>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a49      	ldr	r2, [pc, #292]	@ (8001bc4 <HAL_GPIO_Init+0x320>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_GPIO_Init+0x202>
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	e00c      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	e00a      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001aaa:	2305      	movs	r3, #5
 8001aac:	e008      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001aae:	2304      	movs	r3, #4
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e004      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	f002 0203 	and.w	r2, r2, #3
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	4093      	lsls	r3, r2
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad0:	4935      	ldr	r1, [pc, #212]	@ (8001ba8 <HAL_GPIO_Init+0x304>)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ade:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b02:	4a31      	ldr	r2, [pc, #196]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b08:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b2c:	4a26      	ldr	r2, [pc, #152]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b32:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b56:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b80:	4a11      	ldr	r2, [pc, #68]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b0f      	cmp	r3, #15
 8001b90:	f67f ae96 	bls.w	80018c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3724      	adds	r7, #36	@ 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40013800 	.word	0x40013800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40021400 	.word	0x40021400
 8001bc4:	40021800 	.word	0x40021800
 8001bc8:	40013c00 	.word	0x40013c00

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001be8:	e003      	b.n	8001bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	041a      	lsls	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	619a      	str	r2, [r3, #24]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0cc      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c14:	4b68      	ldr	r3, [pc, #416]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d90c      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b65      	ldr	r3, [pc, #404]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b63      	ldr	r3, [pc, #396]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0b8      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c54:	4b59      	ldr	r3, [pc, #356]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4a58      	ldr	r2, [pc, #352]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c6c:	4b53      	ldr	r3, [pc, #332]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4a52      	ldr	r2, [pc, #328]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c78:	4b50      	ldr	r3, [pc, #320]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	494d      	ldr	r1, [pc, #308]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d044      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d119      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e07f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e06f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cce:	4b3b      	ldr	r3, [pc, #236]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e067      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b37      	ldr	r3, [pc, #220]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4934      	ldr	r1, [pc, #208]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f804 	bl	8000cfc <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff f800 	bl	8000cfc <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e04f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d20:	4b25      	ldr	r3, [pc, #148]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d20c      	bcs.n	8001d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e032      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4916      	ldr	r1, [pc, #88]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	490e      	ldr	r1, [pc, #56]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d86:	f000 f855 	bl	8001e34 <HAL_RCC_GetSysClockFreq>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	490a      	ldr	r1, [pc, #40]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	5ccb      	ldrb	r3, [r1, r3]
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a09      	ldr	r2, [pc, #36]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001da2:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe ff64 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023c00 	.word	0x40023c00
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	08002dc8 	.word	0x08002dc8
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000004 	.word	0x20000004

08001dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000000 	.word	0x20000000

08001de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001de8:	f7ff fff0 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	0a9b      	lsrs	r3, r3, #10
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	4903      	ldr	r1, [pc, #12]	@ (8001e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	08002dd8 	.word	0x08002dd8

08001e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e10:	f7ff ffdc 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	0b5b      	lsrs	r3, r3, #13
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	4903      	ldr	r1, [pc, #12]	@ (8001e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	08002dd8 	.word	0x08002dd8

08001e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e38:	b0ae      	sub	sp, #184	@ 0xb8
 8001e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e5a:	4bcb      	ldr	r3, [pc, #812]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	f200 8206 	bhi.w	8002274 <HAL_RCC_GetSysClockFreq+0x440>
 8001e68:	a201      	add	r2, pc, #4	@ (adr r2, 8001e70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6e:	bf00      	nop
 8001e70:	08001ea5 	.word	0x08001ea5
 8001e74:	08002275 	.word	0x08002275
 8001e78:	08002275 	.word	0x08002275
 8001e7c:	08002275 	.word	0x08002275
 8001e80:	08001ead 	.word	0x08001ead
 8001e84:	08002275 	.word	0x08002275
 8001e88:	08002275 	.word	0x08002275
 8001e8c:	08002275 	.word	0x08002275
 8001e90:	08001eb5 	.word	0x08001eb5
 8001e94:	08002275 	.word	0x08002275
 8001e98:	08002275 	.word	0x08002275
 8001e9c:	08002275 	.word	0x08002275
 8001ea0:	080020a5 	.word	0x080020a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ea4:	4bb9      	ldr	r3, [pc, #740]	@ (800218c <HAL_RCC_GetSysClockFreq+0x358>)
 8001ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001eaa:	e1e7      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eac:	4bb8      	ldr	r3, [pc, #736]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001eae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001eb2:	e1e3      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eb4:	4bb4      	ldr	r3, [pc, #720]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ec0:	4bb1      	ldr	r3, [pc, #708]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d071      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ecc:	4bae      	ldr	r3, [pc, #696]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ed8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001ef2:	4622      	mov	r2, r4
 8001ef4:	462b      	mov	r3, r5
 8001ef6:	f04f 0000 	mov.w	r0, #0
 8001efa:	f04f 0100 	mov.w	r1, #0
 8001efe:	0159      	lsls	r1, r3, #5
 8001f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f04:	0150      	lsls	r0, r2, #5
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	1a51      	subs	r1, r2, r1
 8001f0e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001f10:	4629      	mov	r1, r5
 8001f12:	eb63 0301 	sbc.w	r3, r3, r1
 8001f16:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f24:	4649      	mov	r1, r9
 8001f26:	018b      	lsls	r3, r1, #6
 8001f28:	4641      	mov	r1, r8
 8001f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f2e:	4641      	mov	r1, r8
 8001f30:	018a      	lsls	r2, r1, #6
 8001f32:	4641      	mov	r1, r8
 8001f34:	1a51      	subs	r1, r2, r1
 8001f36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f38:	4649      	mov	r1, r9
 8001f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001f4c:	4649      	mov	r1, r9
 8001f4e:	00cb      	lsls	r3, r1, #3
 8001f50:	4641      	mov	r1, r8
 8001f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f56:	4641      	mov	r1, r8
 8001f58:	00ca      	lsls	r2, r1, #3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4622      	mov	r2, r4
 8001f62:	189b      	adds	r3, r3, r2
 8001f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f66:	462b      	mov	r3, r5
 8001f68:	460a      	mov	r2, r1
 8001f6a:	eb42 0303 	adc.w	r3, r2, r3
 8001f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	024b      	lsls	r3, r1, #9
 8001f80:	4621      	mov	r1, r4
 8001f82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f86:	4621      	mov	r1, r4
 8001f88:	024a      	lsls	r2, r1, #9
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f92:	2200      	movs	r2, #0
 8001f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001fa0:	f7fe f930 	bl	8000204 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fae:	e067      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb0:	4b75      	ldr	r3, [pc, #468]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	099b      	lsrs	r3, r3, #6
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fbc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fca:	2300      	movs	r3, #0
 8001fcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001fd2:	4622      	mov	r2, r4
 8001fd4:	462b      	mov	r3, r5
 8001fd6:	f04f 0000 	mov.w	r0, #0
 8001fda:	f04f 0100 	mov.w	r1, #0
 8001fde:	0159      	lsls	r1, r3, #5
 8001fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe4:	0150      	lsls	r0, r2, #5
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4621      	mov	r1, r4
 8001fec:	1a51      	subs	r1, r2, r1
 8001fee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002004:	4649      	mov	r1, r9
 8002006:	018b      	lsls	r3, r1, #6
 8002008:	4641      	mov	r1, r8
 800200a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800200e:	4641      	mov	r1, r8
 8002010:	018a      	lsls	r2, r1, #6
 8002012:	4641      	mov	r1, r8
 8002014:	ebb2 0a01 	subs.w	sl, r2, r1
 8002018:	4649      	mov	r1, r9
 800201a:	eb63 0b01 	sbc.w	fp, r3, r1
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800202a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800202e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002032:	4692      	mov	sl, r2
 8002034:	469b      	mov	fp, r3
 8002036:	4623      	mov	r3, r4
 8002038:	eb1a 0303 	adds.w	r3, sl, r3
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	462b      	mov	r3, r5
 8002040:	eb4b 0303 	adc.w	r3, fp, r3
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002052:	4629      	mov	r1, r5
 8002054:	028b      	lsls	r3, r1, #10
 8002056:	4621      	mov	r1, r4
 8002058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800205c:	4621      	mov	r1, r4
 800205e:	028a      	lsls	r2, r1, #10
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002068:	2200      	movs	r2, #0
 800206a:	673b      	str	r3, [r7, #112]	@ 0x70
 800206c:	677a      	str	r2, [r7, #116]	@ 0x74
 800206e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002072:	f7fe f8c7 	bl	8000204 <__aeabi_uldivmod>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4613      	mov	r3, r2
 800207c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002080:	4b41      	ldr	r3, [pc, #260]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	3301      	adds	r3, #1
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002096:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020a2:	e0eb      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a4:	4b38      	ldr	r3, [pc, #224]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b0:	4b35      	ldr	r3, [pc, #212]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d06b      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020bc:	4b32      	ldr	r3, [pc, #200]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x354>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	2200      	movs	r2, #0
 80020c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80020d0:	2300      	movs	r3, #0
 80020d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80020d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80020d8:	4622      	mov	r2, r4
 80020da:	462b      	mov	r3, r5
 80020dc:	f04f 0000 	mov.w	r0, #0
 80020e0:	f04f 0100 	mov.w	r1, #0
 80020e4:	0159      	lsls	r1, r3, #5
 80020e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ea:	0150      	lsls	r0, r2, #5
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4621      	mov	r1, r4
 80020f2:	1a51      	subs	r1, r2, r1
 80020f4:	61b9      	str	r1, [r7, #24]
 80020f6:	4629      	mov	r1, r5
 80020f8:	eb63 0301 	sbc.w	r3, r3, r1
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800210a:	4659      	mov	r1, fp
 800210c:	018b      	lsls	r3, r1, #6
 800210e:	4651      	mov	r1, sl
 8002110:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002114:	4651      	mov	r1, sl
 8002116:	018a      	lsls	r2, r1, #6
 8002118:	4651      	mov	r1, sl
 800211a:	ebb2 0801 	subs.w	r8, r2, r1
 800211e:	4659      	mov	r1, fp
 8002120:	eb63 0901 	sbc.w	r9, r3, r1
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002130:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002134:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002138:	4690      	mov	r8, r2
 800213a:	4699      	mov	r9, r3
 800213c:	4623      	mov	r3, r4
 800213e:	eb18 0303 	adds.w	r3, r8, r3
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	462b      	mov	r3, r5
 8002146:	eb49 0303 	adc.w	r3, r9, r3
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002158:	4629      	mov	r1, r5
 800215a:	024b      	lsls	r3, r1, #9
 800215c:	4621      	mov	r1, r4
 800215e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002162:	4621      	mov	r1, r4
 8002164:	024a      	lsls	r2, r1, #9
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800216e:	2200      	movs	r2, #0
 8002170:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002172:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002174:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002178:	f7fe f844 	bl	8000204 <__aeabi_uldivmod>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4613      	mov	r3, r2
 8002182:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002186:	e065      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x420>
 8002188:	40023800 	.word	0x40023800
 800218c:	00f42400 	.word	0x00f42400
 8002190:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002194:	4b3d      	ldr	r3, [pc, #244]	@ (800228c <HAL_RCC_GetSysClockFreq+0x458>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	2200      	movs	r2, #0
 800219c:	4618      	mov	r0, r3
 800219e:	4611      	mov	r1, r2
 80021a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80021a6:	2300      	movs	r3, #0
 80021a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80021aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80021ae:	4642      	mov	r2, r8
 80021b0:	464b      	mov	r3, r9
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	0159      	lsls	r1, r3, #5
 80021bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c0:	0150      	lsls	r0, r2, #5
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4641      	mov	r1, r8
 80021c8:	1a51      	subs	r1, r2, r1
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	4649      	mov	r1, r9
 80021ce:	eb63 0301 	sbc.w	r3, r3, r1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021e0:	4659      	mov	r1, fp
 80021e2:	018b      	lsls	r3, r1, #6
 80021e4:	4651      	mov	r1, sl
 80021e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ea:	4651      	mov	r1, sl
 80021ec:	018a      	lsls	r2, r1, #6
 80021ee:	4651      	mov	r1, sl
 80021f0:	1a54      	subs	r4, r2, r1
 80021f2:	4659      	mov	r1, fp
 80021f4:	eb63 0501 	sbc.w	r5, r3, r1
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	00eb      	lsls	r3, r5, #3
 8002202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002206:	00e2      	lsls	r2, r4, #3
 8002208:	4614      	mov	r4, r2
 800220a:	461d      	mov	r5, r3
 800220c:	4643      	mov	r3, r8
 800220e:	18e3      	adds	r3, r4, r3
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	464b      	mov	r3, r9
 8002214:	eb45 0303 	adc.w	r3, r5, r3
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002226:	4629      	mov	r1, r5
 8002228:	028b      	lsls	r3, r1, #10
 800222a:	4621      	mov	r1, r4
 800222c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002230:	4621      	mov	r1, r4
 8002232:	028a      	lsls	r2, r1, #10
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800223c:	2200      	movs	r2, #0
 800223e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002240:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002242:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002246:	f7fd ffdd 	bl	8000204 <__aeabi_uldivmod>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4613      	mov	r3, r2
 8002250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002254:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <HAL_RCC_GetSysClockFreq+0x458>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	0f1b      	lsrs	r3, r3, #28
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002272:	e003      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800227a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002280:	4618      	mov	r0, r3
 8002282:	37b8      	adds	r7, #184	@ 0xb8
 8002284:	46bd      	mov	sp, r7
 8002286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	00f42400 	.word	0x00f42400

08002294 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e28d      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8083 	beq.w	80023ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022b4:	4b94      	ldr	r3, [pc, #592]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d019      	beq.n	80022f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022c0:	4b91      	ldr	r3, [pc, #580]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022d8:	d00c      	beq.n	80022f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022da:	4b8b      	ldr	r3, [pc, #556]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022e2:	2b0c      	cmp	r3, #12
 80022e4:	d112      	bne.n	800230c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e6:	4b88      	ldr	r3, [pc, #544]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022f2:	d10b      	bne.n	800230c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	4b84      	ldr	r3, [pc, #528]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d05b      	beq.n	80023b8 <HAL_RCC_OscConfig+0x124>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d157      	bne.n	80023b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e25a      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x90>
 8002316:	4b7c      	ldr	r3, [pc, #496]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7b      	ldr	r2, [pc, #492]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e01d      	b.n	8002360 <HAL_RCC_OscConfig+0xcc>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0xb4>
 800232e:	4b76      	ldr	r3, [pc, #472]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a75      	ldr	r2, [pc, #468]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b73      	ldr	r3, [pc, #460]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a72      	ldr	r2, [pc, #456]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xcc>
 8002348:	4b6f      	ldr	r3, [pc, #444]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6e      	ldr	r2, [pc, #440]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800234e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b6c      	ldr	r3, [pc, #432]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a6b      	ldr	r2, [pc, #428]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800235a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800235e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fcc8 	bl	8000cfc <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe fcc4 	bl	8000cfc <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	@ 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e21f      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	4b61      	ldr	r3, [pc, #388]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0xdc>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fcb4 	bl	8000cfc <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002398:	f7fe fcb0 	bl	8000cfc <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	@ 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e20b      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	4b57      	ldr	r3, [pc, #348]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x104>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d06f      	beq.n	80024a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023c6:	4b50      	ldr	r3, [pc, #320]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d017      	beq.n	8002402 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d105      	bne.n	80023ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023de:	4b4a      	ldr	r3, [pc, #296]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ea:	4b47      	ldr	r3, [pc, #284]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	d11c      	bne.n	8002430 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b44      	ldr	r3, [pc, #272]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d116      	bne.n	8002430 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	4b41      	ldr	r3, [pc, #260]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x186>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e1d3      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b3b      	ldr	r3, [pc, #236]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4937      	ldr	r1, [pc, #220]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	e03a      	b.n	80024a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002438:	4b34      	ldr	r3, [pc, #208]	@ (800250c <HAL_RCC_OscConfig+0x278>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7fe fc5d 	bl	8000cfc <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002446:	f7fe fc59 	bl	8000cfc <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e1b4      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002458:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4925      	ldr	r1, [pc, #148]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
 8002478:	e015      	b.n	80024a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247a:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_RCC_OscConfig+0x278>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fc3c 	bl	8000cfc <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002488:	f7fe fc38 	bl	8000cfc <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e193      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249a:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d036      	beq.n	8002520 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d016      	beq.n	80024e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_RCC_OscConfig+0x27c>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7fe fc1c 	bl	8000cfc <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c8:	f7fe fc18 	bl	8000cfc <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e173      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_OscConfig+0x274>)
 80024dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x234>
 80024e6:	e01b      	b.n	8002520 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e8:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_RCC_OscConfig+0x27c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7fe fc05 	bl	8000cfc <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	e00e      	b.n	8002514 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f6:	f7fe fc01 	bl	8000cfc <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d907      	bls.n	8002514 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e15c      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
 8002508:	40023800 	.word	0x40023800
 800250c:	42470000 	.word	0x42470000
 8002510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	4b8a      	ldr	r3, [pc, #552]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ea      	bne.n	80024f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8097 	beq.w	800265c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002532:	4b83      	ldr	r3, [pc, #524]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10f      	bne.n	800255e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	4b7f      	ldr	r3, [pc, #508]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	4a7e      	ldr	r2, [pc, #504]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	@ 0x40
 800254e:	4b7c      	ldr	r3, [pc, #496]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b79      	ldr	r3, [pc, #484]	@ (8002744 <HAL_RCC_OscConfig+0x4b0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d118      	bne.n	800259c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256a:	4b76      	ldr	r3, [pc, #472]	@ (8002744 <HAL_RCC_OscConfig+0x4b0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a75      	ldr	r2, [pc, #468]	@ (8002744 <HAL_RCC_OscConfig+0x4b0>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7fe fbc1 	bl	8000cfc <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7fe fbbd 	bl	8000cfc <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e118      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	4b6c      	ldr	r3, [pc, #432]	@ (8002744 <HAL_RCC_OscConfig+0x4b0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x31e>
 80025a4:	4b66      	ldr	r3, [pc, #408]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a8:	4a65      	ldr	r2, [pc, #404]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b0:	e01c      	b.n	80025ec <HAL_RCC_OscConfig+0x358>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b05      	cmp	r3, #5
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x340>
 80025ba:	4b61      	ldr	r3, [pc, #388]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025be:	4a60      	ldr	r2, [pc, #384]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	f043 0304 	orr.w	r3, r3, #4
 80025c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0x358>
 80025d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d8:	4a59      	ldr	r2, [pc, #356]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e0:	4b57      	ldr	r3, [pc, #348]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e4:	4a56      	ldr	r2, [pc, #344]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80025e6:	f023 0304 	bic.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d015      	beq.n	8002620 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe fb82 	bl	8000cfc <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7fe fb7e 	bl	8000cfc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0d7      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	4b4b      	ldr	r3, [pc, #300]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0ee      	beq.n	80025fc <HAL_RCC_OscConfig+0x368>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fb6c 	bl	8000cfc <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe fb68 	bl	8000cfc <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0c1      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263e:	4b40      	ldr	r3, [pc, #256]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ee      	bne.n	8002628 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002650:	4b3b      	ldr	r3, [pc, #236]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	4a3a      	ldr	r2, [pc, #232]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800265a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80ad 	beq.w	80027c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002666:	4b36      	ldr	r3, [pc, #216]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b08      	cmp	r3, #8
 8002670:	d060      	beq.n	8002734 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d145      	bne.n	8002706 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b33      	ldr	r3, [pc, #204]	@ (8002748 <HAL_RCC_OscConfig+0x4b4>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fb3c 	bl	8000cfc <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe fb38 	bl	8000cfc <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e093      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	4b29      	ldr	r3, [pc, #164]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	019b      	lsls	r3, r3, #6
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	085b      	lsrs	r3, r3, #1
 80026be:	3b01      	subs	r3, #1
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	061b      	lsls	r3, r3, #24
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d0:	071b      	lsls	r3, r3, #28
 80026d2:	491b      	ldr	r1, [pc, #108]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002748 <HAL_RCC_OscConfig+0x4b4>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fe fb0d 	bl	8000cfc <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe fb09 	bl	8000cfc <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e064      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f8:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x452>
 8002704:	e05c      	b.n	80027c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <HAL_RCC_OscConfig+0x4b4>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe faf6 	bl	8000cfc <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe faf2 	bl	8000cfc <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e04d      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_RCC_OscConfig+0x4ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x480>
 8002732:	e045      	b.n	80027c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d107      	bne.n	800274c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e040      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
 8002740:	40023800 	.word	0x40023800
 8002744:	40007000 	.word	0x40007000
 8002748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800274c:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <HAL_RCC_OscConfig+0x538>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d030      	beq.n	80027bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d129      	bne.n	80027bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d122      	bne.n	80027bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800277c:	4013      	ands	r3, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002784:	4293      	cmp	r3, r2
 8002786:	d119      	bne.n	80027bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	3b01      	subs	r3, #1
 8002796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d10f      	bne.n	80027bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e042      	b.n	8002868 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe f95a 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	@ 0x24
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f82b 	bl	8002870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002874:	b0c0      	sub	sp, #256	@ 0x100
 8002876:	af00      	add	r7, sp, #0
 8002878:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288c:	68d9      	ldr	r1, [r3, #12]
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	ea40 0301 	orr.w	r3, r0, r1
 8002898:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028c8:	f021 010c 	bic.w	r1, r1, #12
 80028cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028d6:	430b      	orrs	r3, r1
 80028d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ea:	6999      	ldr	r1, [r3, #24]
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	ea40 0301 	orr.w	r3, r0, r1
 80028f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b8f      	ldr	r3, [pc, #572]	@ (8002b3c <UART_SetConfig+0x2cc>)
 8002900:	429a      	cmp	r2, r3
 8002902:	d005      	beq.n	8002910 <UART_SetConfig+0xa0>
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b8d      	ldr	r3, [pc, #564]	@ (8002b40 <UART_SetConfig+0x2d0>)
 800290c:	429a      	cmp	r2, r3
 800290e:	d104      	bne.n	800291a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002910:	f7ff fa7c 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 8002914:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002918:	e003      	b.n	8002922 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800291a:	f7ff fa63 	bl	8001de4 <HAL_RCC_GetPCLK1Freq>
 800291e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800292c:	f040 810c 	bne.w	8002b48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002934:	2200      	movs	r2, #0
 8002936:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800293a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800293e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002942:	4622      	mov	r2, r4
 8002944:	462b      	mov	r3, r5
 8002946:	1891      	adds	r1, r2, r2
 8002948:	65b9      	str	r1, [r7, #88]	@ 0x58
 800294a:	415b      	adcs	r3, r3
 800294c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800294e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002952:	4621      	mov	r1, r4
 8002954:	eb12 0801 	adds.w	r8, r2, r1
 8002958:	4629      	mov	r1, r5
 800295a:	eb43 0901 	adc.w	r9, r3, r1
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800296a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800296e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002972:	4690      	mov	r8, r2
 8002974:	4699      	mov	r9, r3
 8002976:	4623      	mov	r3, r4
 8002978:	eb18 0303 	adds.w	r3, r8, r3
 800297c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002980:	462b      	mov	r3, r5
 8002982:	eb49 0303 	adc.w	r3, r9, r3
 8002986:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800298a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002996:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800299a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800299e:	460b      	mov	r3, r1
 80029a0:	18db      	adds	r3, r3, r3
 80029a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80029a4:	4613      	mov	r3, r2
 80029a6:	eb42 0303 	adc.w	r3, r2, r3
 80029aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80029ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029b4:	f7fd fc26 	bl	8000204 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4b61      	ldr	r3, [pc, #388]	@ (8002b44 <UART_SetConfig+0x2d4>)
 80029be:	fba3 2302 	umull	r2, r3, r3, r2
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	011c      	lsls	r4, r3, #4
 80029c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029d8:	4642      	mov	r2, r8
 80029da:	464b      	mov	r3, r9
 80029dc:	1891      	adds	r1, r2, r2
 80029de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029e0:	415b      	adcs	r3, r3
 80029e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029e8:	4641      	mov	r1, r8
 80029ea:	eb12 0a01 	adds.w	sl, r2, r1
 80029ee:	4649      	mov	r1, r9
 80029f0:	eb43 0b01 	adc.w	fp, r3, r1
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a08:	4692      	mov	sl, r2
 8002a0a:	469b      	mov	fp, r3
 8002a0c:	4643      	mov	r3, r8
 8002a0e:	eb1a 0303 	adds.w	r3, sl, r3
 8002a12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a16:	464b      	mov	r3, r9
 8002a18:	eb4b 0303 	adc.w	r3, fp, r3
 8002a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a34:	460b      	mov	r3, r1
 8002a36:	18db      	adds	r3, r3, r3
 8002a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	eb42 0303 	adc.w	r3, r2, r3
 8002a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a4a:	f7fd fbdb 	bl	8000204 <__aeabi_uldivmod>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4611      	mov	r1, r2
 8002a54:	4b3b      	ldr	r3, [pc, #236]	@ (8002b44 <UART_SetConfig+0x2d4>)
 8002a56:	fba3 2301 	umull	r2, r3, r3, r1
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	2264      	movs	r2, #100	@ 0x64
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	1acb      	subs	r3, r1, r3
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a6a:	4b36      	ldr	r3, [pc, #216]	@ (8002b44 <UART_SetConfig+0x2d4>)
 8002a6c:	fba3 2302 	umull	r2, r3, r3, r2
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a78:	441c      	add	r4, r3
 8002a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	464b      	mov	r3, r9
 8002a90:	1891      	adds	r1, r2, r2
 8002a92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a94:	415b      	adcs	r3, r3
 8002a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a9c:	4641      	mov	r1, r8
 8002a9e:	1851      	adds	r1, r2, r1
 8002aa0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	414b      	adcs	r3, r1
 8002aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ab4:	4659      	mov	r1, fp
 8002ab6:	00cb      	lsls	r3, r1, #3
 8002ab8:	4651      	mov	r1, sl
 8002aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002abe:	4651      	mov	r1, sl
 8002ac0:	00ca      	lsls	r2, r1, #3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4642      	mov	r2, r8
 8002aca:	189b      	adds	r3, r3, r2
 8002acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	460a      	mov	r2, r1
 8002ad4:	eb42 0303 	adc.w	r3, r2, r3
 8002ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ae8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002aec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002af0:	460b      	mov	r3, r1
 8002af2:	18db      	adds	r3, r3, r3
 8002af4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002af6:	4613      	mov	r3, r2
 8002af8:	eb42 0303 	adc.w	r3, r2, r3
 8002afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b06:	f7fd fb7d 	bl	8000204 <__aeabi_uldivmod>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <UART_SetConfig+0x2d4>)
 8002b10:	fba3 1302 	umull	r1, r3, r3, r2
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	2164      	movs	r1, #100	@ 0x64
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	3332      	adds	r3, #50	@ 0x32
 8002b22:	4a08      	ldr	r2, [pc, #32]	@ (8002b44 <UART_SetConfig+0x2d4>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	f003 0207 	and.w	r2, r3, #7
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4422      	add	r2, r4
 8002b36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b38:	e106      	b.n	8002d48 <UART_SetConfig+0x4d8>
 8002b3a:	bf00      	nop
 8002b3c:	40011000 	.word	0x40011000
 8002b40:	40011400 	.word	0x40011400
 8002b44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b5a:	4642      	mov	r2, r8
 8002b5c:	464b      	mov	r3, r9
 8002b5e:	1891      	adds	r1, r2, r2
 8002b60:	6239      	str	r1, [r7, #32]
 8002b62:	415b      	adcs	r3, r3
 8002b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b6a:	4641      	mov	r1, r8
 8002b6c:	1854      	adds	r4, r2, r1
 8002b6e:	4649      	mov	r1, r9
 8002b70:	eb43 0501 	adc.w	r5, r3, r1
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	00eb      	lsls	r3, r5, #3
 8002b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b82:	00e2      	lsls	r2, r4, #3
 8002b84:	4614      	mov	r4, r2
 8002b86:	461d      	mov	r5, r3
 8002b88:	4643      	mov	r3, r8
 8002b8a:	18e3      	adds	r3, r4, r3
 8002b8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b90:	464b      	mov	r3, r9
 8002b92:	eb45 0303 	adc.w	r3, r5, r3
 8002b96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ba6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	008b      	lsls	r3, r1, #2
 8002bba:	4621      	mov	r1, r4
 8002bbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	008a      	lsls	r2, r1, #2
 8002bc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bc8:	f7fd fb1c 	bl	8000204 <__aeabi_uldivmod>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4b60      	ldr	r3, [pc, #384]	@ (8002d54 <UART_SetConfig+0x4e4>)
 8002bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	011c      	lsls	r4, r3, #4
 8002bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002be4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002be8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bec:	4642      	mov	r2, r8
 8002bee:	464b      	mov	r3, r9
 8002bf0:	1891      	adds	r1, r2, r2
 8002bf2:	61b9      	str	r1, [r7, #24]
 8002bf4:	415b      	adcs	r3, r3
 8002bf6:	61fb      	str	r3, [r7, #28]
 8002bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bfc:	4641      	mov	r1, r8
 8002bfe:	1851      	adds	r1, r2, r1
 8002c00:	6139      	str	r1, [r7, #16]
 8002c02:	4649      	mov	r1, r9
 8002c04:	414b      	adcs	r3, r1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c14:	4659      	mov	r1, fp
 8002c16:	00cb      	lsls	r3, r1, #3
 8002c18:	4651      	mov	r1, sl
 8002c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c1e:	4651      	mov	r1, sl
 8002c20:	00ca      	lsls	r2, r1, #3
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	4642      	mov	r2, r8
 8002c2a:	189b      	adds	r3, r3, r2
 8002c2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c30:	464b      	mov	r3, r9
 8002c32:	460a      	mov	r2, r1
 8002c34:	eb42 0303 	adc.w	r3, r2, r3
 8002c38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c54:	4649      	mov	r1, r9
 8002c56:	008b      	lsls	r3, r1, #2
 8002c58:	4641      	mov	r1, r8
 8002c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c5e:	4641      	mov	r1, r8
 8002c60:	008a      	lsls	r2, r1, #2
 8002c62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c66:	f7fd facd 	bl	8000204 <__aeabi_uldivmod>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4b38      	ldr	r3, [pc, #224]	@ (8002d54 <UART_SetConfig+0x4e4>)
 8002c72:	fba3 2301 	umull	r2, r3, r3, r1
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2264      	movs	r2, #100	@ 0x64
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	1acb      	subs	r3, r1, r3
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	3332      	adds	r3, #50	@ 0x32
 8002c84:	4a33      	ldr	r2, [pc, #204]	@ (8002d54 <UART_SetConfig+0x4e4>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c90:	441c      	add	r4, r3
 8002c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c96:	2200      	movs	r2, #0
 8002c98:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ca0:	4642      	mov	r2, r8
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	1891      	adds	r1, r2, r2
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	415b      	adcs	r3, r3
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cb0:	4641      	mov	r1, r8
 8002cb2:	1851      	adds	r1, r2, r1
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	414b      	adcs	r3, r1
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cc8:	4659      	mov	r1, fp
 8002cca:	00cb      	lsls	r3, r1, #3
 8002ccc:	4651      	mov	r1, sl
 8002cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cd2:	4651      	mov	r1, sl
 8002cd4:	00ca      	lsls	r2, r1, #3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4642      	mov	r2, r8
 8002cde:	189b      	adds	r3, r3, r2
 8002ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	eb42 0303 	adc.w	r3, r2, r3
 8002cea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cf6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d04:	4649      	mov	r1, r9
 8002d06:	008b      	lsls	r3, r1, #2
 8002d08:	4641      	mov	r1, r8
 8002d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0e:	4641      	mov	r1, r8
 8002d10:	008a      	lsls	r2, r1, #2
 8002d12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d16:	f7fd fa75 	bl	8000204 <__aeabi_uldivmod>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d54 <UART_SetConfig+0x4e4>)
 8002d20:	fba3 1302 	umull	r1, r3, r3, r2
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	2164      	movs	r1, #100	@ 0x64
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	3332      	adds	r3, #50	@ 0x32
 8002d32:	4a08      	ldr	r2, [pc, #32]	@ (8002d54 <UART_SetConfig+0x4e4>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	f003 020f 	and.w	r2, r3, #15
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4422      	add	r2, r4
 8002d46:	609a      	str	r2, [r3, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d54:	51eb851f 	.word	0x51eb851f

08002d58 <memset>:
 8002d58:	4402      	add	r2, r0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d100      	bne.n	8002d62 <memset+0xa>
 8002d60:	4770      	bx	lr
 8002d62:	f803 1b01 	strb.w	r1, [r3], #1
 8002d66:	e7f9      	b.n	8002d5c <memset+0x4>

08002d68 <__libc_init_array>:
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	4d0d      	ldr	r5, [pc, #52]	@ (8002da0 <__libc_init_array+0x38>)
 8002d6c:	4c0d      	ldr	r4, [pc, #52]	@ (8002da4 <__libc_init_array+0x3c>)
 8002d6e:	1b64      	subs	r4, r4, r5
 8002d70:	10a4      	asrs	r4, r4, #2
 8002d72:	2600      	movs	r6, #0
 8002d74:	42a6      	cmp	r6, r4
 8002d76:	d109      	bne.n	8002d8c <__libc_init_array+0x24>
 8002d78:	4d0b      	ldr	r5, [pc, #44]	@ (8002da8 <__libc_init_array+0x40>)
 8002d7a:	4c0c      	ldr	r4, [pc, #48]	@ (8002dac <__libc_init_array+0x44>)
 8002d7c:	f000 f818 	bl	8002db0 <_init>
 8002d80:	1b64      	subs	r4, r4, r5
 8002d82:	10a4      	asrs	r4, r4, #2
 8002d84:	2600      	movs	r6, #0
 8002d86:	42a6      	cmp	r6, r4
 8002d88:	d105      	bne.n	8002d96 <__libc_init_array+0x2e>
 8002d8a:	bd70      	pop	{r4, r5, r6, pc}
 8002d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d90:	4798      	blx	r3
 8002d92:	3601      	adds	r6, #1
 8002d94:	e7ee      	b.n	8002d74 <__libc_init_array+0xc>
 8002d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9a:	4798      	blx	r3
 8002d9c:	3601      	adds	r6, #1
 8002d9e:	e7f2      	b.n	8002d86 <__libc_init_array+0x1e>
 8002da0:	08002de8 	.word	0x08002de8
 8002da4:	08002de8 	.word	0x08002de8
 8002da8:	08002de8 	.word	0x08002de8
 8002dac:	08002dec 	.word	0x08002dec

08002db0 <_init>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr

08002dbc <_fini>:
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	bf00      	nop
 8002dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc2:	bc08      	pop	{r3}
 8002dc4:	469e      	mov	lr, r3
 8002dc6:	4770      	bx	lr
